
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  08006d4c  08006d4c  00007d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e88  08006e88  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  08006e88  08006e88  00007e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e90  08006e90  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e90  08006e90  00007e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e94  08006e94  00007e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006e98  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008018  2**0
                  CONTENTS
 10 .bss          00000880  20000018  20000018  00008018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000898  20000898  00008018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017780  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003122  00000000  00000000  0001f7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  000228f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f1f  00000000  00000000  00023c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002769b  00000000  00000000  00024b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185fa  00000000  00000000  0004c21a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6eb9  00000000  00000000  00064814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014b6cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000540c  00000000  00000000  0014b710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00150b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006d34 	.word	0x08006d34

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08006d34 	.word	0x08006d34

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	@ 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_uldivmod>:
 8000a38:	b953      	cbnz	r3, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3a:	b94a      	cbnz	r2, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	bf08      	it	eq
 8000a40:	2800      	cmpeq	r0, #0
 8000a42:	bf1c      	itt	ne
 8000a44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a4c:	f000 b96a 	b.w	8000d24 <__aeabi_idiv0>
 8000a50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a58:	f000 f806 	bl	8000a68 <__udivmoddi4>
 8000a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a64:	b004      	add	sp, #16
 8000a66:	4770      	bx	lr

08000a68 <__udivmoddi4>:
 8000a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a6c:	9d08      	ldr	r5, [sp, #32]
 8000a6e:	460c      	mov	r4, r1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d14e      	bne.n	8000b12 <__udivmoddi4+0xaa>
 8000a74:	4694      	mov	ip, r2
 8000a76:	458c      	cmp	ip, r1
 8000a78:	4686      	mov	lr, r0
 8000a7a:	fab2 f282 	clz	r2, r2
 8000a7e:	d962      	bls.n	8000b46 <__udivmoddi4+0xde>
 8000a80:	b14a      	cbz	r2, 8000a96 <__udivmoddi4+0x2e>
 8000a82:	f1c2 0320 	rsb	r3, r2, #32
 8000a86:	4091      	lsls	r1, r2
 8000a88:	fa20 f303 	lsr.w	r3, r0, r3
 8000a8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a90:	4319      	orrs	r1, r3
 8000a92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9a:	fa1f f68c 	uxth.w	r6, ip
 8000a9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aa2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aa6:	fb07 1114 	mls	r1, r7, r4, r1
 8000aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aae:	fb04 f106 	mul.w	r1, r4, r6
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x64>
 8000ab6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000abe:	f080 8112 	bcs.w	8000ce6 <__udivmoddi4+0x27e>
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	f240 810f 	bls.w	8000ce6 <__udivmoddi4+0x27e>
 8000ac8:	3c02      	subs	r4, #2
 8000aca:	4463      	add	r3, ip
 8000acc:	1a59      	subs	r1, r3, r1
 8000ace:	fa1f f38e 	uxth.w	r3, lr
 8000ad2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad6:	fb07 1110 	mls	r1, r7, r0, r1
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f606 	mul.w	r6, r0, r6
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	d90a      	bls.n	8000afc <__udivmoddi4+0x94>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aee:	f080 80fc 	bcs.w	8000cea <__udivmoddi4+0x282>
 8000af2:	429e      	cmp	r6, r3
 8000af4:	f240 80f9 	bls.w	8000cea <__udivmoddi4+0x282>
 8000af8:	4463      	add	r3, ip
 8000afa:	3802      	subs	r0, #2
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b02:	2100      	movs	r1, #0
 8000b04:	b11d      	cbz	r5, 8000b0e <__udivmoddi4+0xa6>
 8000b06:	40d3      	lsrs	r3, r2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d905      	bls.n	8000b22 <__udivmoddi4+0xba>
 8000b16:	b10d      	cbz	r5, 8000b1c <__udivmoddi4+0xb4>
 8000b18:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4608      	mov	r0, r1
 8000b20:	e7f5      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000b22:	fab3 f183 	clz	r1, r3
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d146      	bne.n	8000bb8 <__udivmoddi4+0x150>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d302      	bcc.n	8000b34 <__udivmoddi4+0xcc>
 8000b2e:	4290      	cmp	r0, r2
 8000b30:	f0c0 80f0 	bcc.w	8000d14 <__udivmoddi4+0x2ac>
 8000b34:	1a86      	subs	r6, r0, r2
 8000b36:	eb64 0303 	sbc.w	r3, r4, r3
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d0e6      	beq.n	8000b0e <__udivmoddi4+0xa6>
 8000b40:	e9c5 6300 	strd	r6, r3, [r5]
 8000b44:	e7e3      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x204>
 8000b4c:	eba1 040c 	sub.w	r4, r1, ip
 8000b50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b54:	fa1f f78c 	uxth.w	r7, ip
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b62:	fb08 4416 	mls	r4, r8, r6, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb07 f006 	mul.w	r0, r7, r6
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x11c>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x11a>
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	f200 80cd 	bhi.w	8000d1c <__udivmoddi4+0x2b4>
 8000b82:	4626      	mov	r6, r4
 8000b84:	1a1c      	subs	r4, r3, r0
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b96:	fb00 f707 	mul.w	r7, r0, r7
 8000b9a:	429f      	cmp	r7, r3
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x148>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x146>
 8000ba8:	429f      	cmp	r7, r3
 8000baa:	f200 80b0 	bhi.w	8000d0e <__udivmoddi4+0x2a6>
 8000bae:	4620      	mov	r0, r4
 8000bb0:	1bdb      	subs	r3, r3, r7
 8000bb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb6:	e7a5      	b.n	8000b04 <__udivmoddi4+0x9c>
 8000bb8:	f1c1 0620 	rsb	r6, r1, #32
 8000bbc:	408b      	lsls	r3, r1
 8000bbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000bc2:	431f      	orrs	r7, r3
 8000bc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000bcc:	ea43 030c 	orr.w	r3, r3, ip
 8000bd0:	40f4      	lsrs	r4, r6
 8000bd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000bd6:	0c38      	lsrs	r0, r7, #16
 8000bd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bdc:	fbb4 fef0 	udiv	lr, r4, r0
 8000be0:	fa1f fc87 	uxth.w	ip, r7
 8000be4:	fb00 441e 	mls	r4, r0, lr, r4
 8000be8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bec:	fb0e f90c 	mul.w	r9, lr, ip
 8000bf0:	45a1      	cmp	r9, r4
 8000bf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x1a6>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bfe:	f080 8084 	bcs.w	8000d0a <__udivmoddi4+0x2a2>
 8000c02:	45a1      	cmp	r9, r4
 8000c04:	f240 8081 	bls.w	8000d0a <__udivmoddi4+0x2a2>
 8000c08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	eba4 0409 	sub.w	r4, r4, r9
 8000c12:	fa1f f983 	uxth.w	r9, r3
 8000c16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x1d2>
 8000c2a:	193c      	adds	r4, r7, r4
 8000c2c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c30:	d267      	bcs.n	8000d02 <__udivmoddi4+0x29a>
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d965      	bls.n	8000d02 <__udivmoddi4+0x29a>
 8000c36:	3b02      	subs	r3, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c42:	eba4 040c 	sub.w	r4, r4, ip
 8000c46:	429c      	cmp	r4, r3
 8000c48:	46ce      	mov	lr, r9
 8000c4a:	469c      	mov	ip, r3
 8000c4c:	d351      	bcc.n	8000cf2 <__udivmoddi4+0x28a>
 8000c4e:	d04e      	beq.n	8000cee <__udivmoddi4+0x286>
 8000c50:	b155      	cbz	r5, 8000c68 <__udivmoddi4+0x200>
 8000c52:	ebb8 030e 	subs.w	r3, r8, lr
 8000c56:	eb64 040c 	sbc.w	r4, r4, ip
 8000c5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431e      	orrs	r6, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	e9c5 6400 	strd	r6, r4, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e750      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f103 	lsr.w	r1, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	fa24 f303 	lsr.w	r3, r4, r3
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	430c      	orrs	r4, r1
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3110 	mls	r1, r8, r0, r3
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f107 	mul.w	r1, r0, r7
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x24c>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000caa:	d22c      	bcs.n	8000d06 <__udivmoddi4+0x29e>
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d92a      	bls.n	8000d06 <__udivmoddi4+0x29e>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cbc:	fb08 3311 	mls	r3, r8, r1, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb01 f307 	mul.w	r3, r1, r7
 8000cc8:	42a3      	cmp	r3, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x276>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cd4:	d213      	bcs.n	8000cfe <__udivmoddi4+0x296>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d911      	bls.n	8000cfe <__udivmoddi4+0x296>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4464      	add	r4, ip
 8000cde:	1ae4      	subs	r4, r4, r3
 8000ce0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ce4:	e739      	b.n	8000b5a <__udivmoddi4+0xf2>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	e6f0      	b.n	8000acc <__udivmoddi4+0x64>
 8000cea:	4608      	mov	r0, r1
 8000cec:	e706      	b.n	8000afc <__udivmoddi4+0x94>
 8000cee:	45c8      	cmp	r8, r9
 8000cf0:	d2ae      	bcs.n	8000c50 <__udivmoddi4+0x1e8>
 8000cf2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cf6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7a8      	b.n	8000c50 <__udivmoddi4+0x1e8>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	e7ed      	b.n	8000cde <__udivmoddi4+0x276>
 8000d02:	4603      	mov	r3, r0
 8000d04:	e799      	b.n	8000c3a <__udivmoddi4+0x1d2>
 8000d06:	4630      	mov	r0, r6
 8000d08:	e7d4      	b.n	8000cb4 <__udivmoddi4+0x24c>
 8000d0a:	46d6      	mov	lr, sl
 8000d0c:	e77f      	b.n	8000c0e <__udivmoddi4+0x1a6>
 8000d0e:	4463      	add	r3, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e74d      	b.n	8000bb0 <__udivmoddi4+0x148>
 8000d14:	4606      	mov	r6, r0
 8000d16:	4623      	mov	r3, r4
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e70f      	b.n	8000b3c <__udivmoddi4+0xd4>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	e730      	b.n	8000b84 <__udivmoddi4+0x11c>
 8000d22:	bf00      	nop

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:

#define BME280
#define LCD

int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f001 fc77 	bl	8002620 <HAL_Init>

  /* USER CODE BEGIN Init */
  RTC_TimeTypeDef sTime = {0};
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d46:	f000 f871 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ETH_Init();
 8000d4a:	f000 f8db 	bl	8000f04 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d4e:	f000 f9f5 	bl	800113c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000d52:	f000 f925 	bl	8000fa0 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d56:	f000 f997 	bl	8001088 <MX_RTC_Init>

  uartInit();
 8000d5a:	f001 fb9b 	bl	8002494 <uartInit>

  // Init GPIO & SPI
  MX_GPIO_Init();
 8000d5e:	f000 fd31 	bl	80017c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d62:	f000 fcf9 	bl	8001758 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f001 fbf0 	bl	800254c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f001 fbed 	bl	800254c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000d72:	2002      	movs	r0, #2
 8000d74:	f001 fbea 	bl	800254c <BSP_LED_Init>

#ifdef BME280
  BME280_init();
 8000d78:	f000 ff06 	bl	8001b88 <BME280_init>
  #endif

  // first SPI try before main loop
  TEST_SPI();
 8000d7c:	f001 fa18 	bl	80021b0 <TEST_SPI>

#ifdef LCD
  Init_Lcd();
 8000d80:	f001 fa64 	bl	800224c <Init_Lcd>
#endif

  for (int i = 0; i <= 3; i++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	e008      	b.n	8000d9c <main+0x74>
  {
      BSP_LED_Toggle(LED1); // init LCD OK
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f001 fc2e 	bl	80025ec <BSP_LED_Toggle>
      HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f001 fcb7 	bl	8002704 <HAL_Delay>
  for (int i = 0; i <= 3; i++)
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	61fb      	str	r3, [r7, #28]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	ddf3      	ble.n	8000d8a <main+0x62>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  TEST_SPI();
 8000da2:	f001 fa05 	bl	80021b0 <TEST_SPI>

#ifdef LCD
	  HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2201      	movs	r2, #1
 8000dac:	4619      	mov	r1, r3
 8000dae:	481d      	ldr	r0, [pc, #116]	@ (8000e24 <main+0xfc>)
 8000db0:	f004 f857 	bl	8004e62 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2201      	movs	r2, #1
 8000db8:	4619      	mov	r1, r3
 8000dba:	481a      	ldr	r0, [pc, #104]	@ (8000e24 <main+0xfc>)
 8000dbc:	f004 f933 	bl	8005026 <HAL_RTC_GetDate>

	  PosCaracHLcd(0);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f001 fb2c 	bl	800241e <PosCaracHLcd>
	  SacaTextoLcd((uint8_t *)"TIME:");
 8000dc6:	4818      	ldr	r0, [pc, #96]	@ (8000e28 <main+0x100>)
 8000dc8:	f001 fb14 	bl	80023f4 <SacaTextoLcd>
	  DatoBCD(sTime.Hours);
 8000dcc:	7a3b      	ldrb	r3, [r7, #8]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fab9 	bl	8002346 <DatoBCD>
	  DatoLcd(':');
 8000dd4:	203a      	movs	r0, #58	@ 0x3a
 8000dd6:	f001 fa98 	bl	800230a <DatoLcd>
	  DatoBCD(sTime.Minutes);
 8000dda:	7a7b      	ldrb	r3, [r7, #9]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fab2 	bl	8002346 <DatoBCD>
	  DatoLcd(':');
 8000de2:	203a      	movs	r0, #58	@ 0x3a
 8000de4:	f001 fa91 	bl	800230a <DatoLcd>
	  DatoBCD(sTime.Seconds);
 8000de8:	7abb      	ldrb	r3, [r7, #10]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f001 faab 	bl	8002346 <DatoBCD>

	  PosCaracLLcd(0);
 8000df0:	2000      	movs	r0, #0
 8000df2:	f001 fb24 	bl	800243e <PosCaracLLcd>
	  DatoBCD(sDate.Date);
 8000df6:	79bb      	ldrb	r3, [r7, #6]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f001 faa4 	bl	8002346 <DatoBCD>
	  DatoLcd('/');
 8000dfe:	202f      	movs	r0, #47	@ 0x2f
 8000e00:	f001 fa83 	bl	800230a <DatoLcd>
	  DatoBCD(sDate.Month);
 8000e04:	797b      	ldrb	r3, [r7, #5]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fa9d 	bl	8002346 <DatoBCD>
	  DatoLcd('/');
 8000e0c:	202f      	movs	r0, #47	@ 0x2f
 8000e0e:	f001 fa7c 	bl	800230a <DatoLcd>
	  DatoBCD(sDate.Year);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fa96 	bl	8002346 <DatoBCD>

	  BSP_LED_Toggle(LED1); // looping signal
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f001 fbe6 	bl	80025ec <BSP_LED_Toggle>
	  TEST_SPI();
 8000e20:	bf00      	nop
 8000e22:	e7be      	b.n	8000da2 <main+0x7a>
 8000e24:	200002b0 	.word	0x200002b0
 8000e28:	08006d4c 	.word	0x08006d4c

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b094      	sub	sp, #80	@ 0x50
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	2230      	movs	r2, #48	@ 0x30
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f005 ff3e 	bl	8006cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e50:	2300      	movs	r3, #0
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	4b29      	ldr	r3, [pc, #164]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a28      	ldr	r2, [pc, #160]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e60:	4b26      	ldr	r3, [pc, #152]	@ (8000efc <SystemClock_Config+0xd0>)
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	607b      	str	r3, [r7, #4]
 8000e70:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a22      	ldr	r2, [pc, #136]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <SystemClock_Config+0xd4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e88:	2309      	movs	r3, #9
 8000e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e8c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e96:	2302      	movs	r3, #2
 8000e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ea4:	23a8      	movs	r3, #168	@ 0xa8
 8000ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000eac:	2307      	movs	r3, #7
 8000eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb0:	f107 0320 	add.w	r3, r7, #32
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f003 f85f 	bl	8003f78 <HAL_RCC_OscConfig>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ec0:	f000 f96a 	bl	8001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ed0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2105      	movs	r1, #5
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f003 fac0 	bl	8004468 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000eee:	f000 f953 	bl	8001198 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	@ 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_ETH_Init+0x84>)
 8000f0a:	4a20      	ldr	r2, [pc, #128]	@ (8000f8c <MX_ETH_Init+0x88>)
 8000f0c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f0e:	4b20      	ldr	r3, [pc, #128]	@ (8000f90 <MX_ETH_Init+0x8c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f14:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <MX_ETH_Init+0x8c>)
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f90 <MX_ETH_Init+0x8c>)
 8000f1c:	22e1      	movs	r2, #225	@ 0xe1
 8000f1e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f20:	4b1b      	ldr	r3, [pc, #108]	@ (8000f90 <MX_ETH_Init+0x8c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f26:	4b1a      	ldr	r3, [pc, #104]	@ (8000f90 <MX_ETH_Init+0x8c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f2c:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <MX_ETH_Init+0x8c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f32:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_ETH_Init+0x84>)
 8000f34:	4a16      	ldr	r2, [pc, #88]	@ (8000f90 <MX_ETH_Init+0x8c>)
 8000f36:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f38:	4b13      	ldr	r3, [pc, #76]	@ (8000f88 <MX_ETH_Init+0x84>)
 8000f3a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f3e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f40:	4b11      	ldr	r3, [pc, #68]	@ (8000f88 <MX_ETH_Init+0x84>)
 8000f42:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <MX_ETH_Init+0x90>)
 8000f44:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <MX_ETH_Init+0x84>)
 8000f48:	4a13      	ldr	r2, [pc, #76]	@ (8000f98 <MX_ETH_Init+0x94>)
 8000f4a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <MX_ETH_Init+0x84>)
 8000f4e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f52:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <MX_ETH_Init+0x84>)
 8000f56:	f001 fcdf 	bl	8002918 <HAL_ETH_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f60:	f000 f91a 	bl	8001198 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f64:	2238      	movs	r2, #56	@ 0x38
 8000f66:	2100      	movs	r1, #0
 8000f68:	480c      	ldr	r0, [pc, #48]	@ (8000f9c <MX_ETH_Init+0x98>)
 8000f6a:	f005 fea7 	bl	8006cbc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <MX_ETH_Init+0x98>)
 8000f70:	2221      	movs	r2, #33	@ 0x21
 8000f72:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f74:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_ETH_Init+0x98>)
 8000f76:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000f7a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	@ (8000f9c <MX_ETH_Init+0x98>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001ac 	.word	0x200001ac
 8000f8c:	40028000 	.word	0x40028000
 8000f90:	200007b4 	.word	0x200007b4
 8000f94:	2000010c 	.word	0x2000010c
 8000f98:	2000006c 	.word	0x2000006c
 8000f9c:	20000034 	.word	0x20000034

08000fa0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fa6:	4b33      	ldr	r3, [pc, #204]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fa8:	4a33      	ldr	r2, [pc, #204]	@ (8001078 <MX_I2C1_Init+0xd8>)
 8000faa:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fac:	4b31      	ldr	r3, [pc, #196]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fae:	4a33      	ldr	r2, [pc, #204]	@ (800107c <MX_I2C1_Init+0xdc>)
 8000fb0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fb2:	4b30      	ldr	r3, [pc, #192]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fc0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fcc:	4b29      	ldr	r3, [pc, #164]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fd2:	4b28      	ldr	r3, [pc, #160]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fd8:	4b26      	ldr	r3, [pc, #152]	@ (8001074 <MX_I2C1_Init+0xd4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	621a      	str	r2, [r3, #32]

  // I2C init code
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <MX_I2C1_Init+0xe0>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	4a26      	ldr	r2, [pc, #152]	@ (8001080 <MX_I2C1_Init+0xe0>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <MX_I2C1_Init+0xe0>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ffa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ffe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001000:	2312      	movs	r3, #18
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800100c:	2304      	movs	r3, #4
 800100e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	4619      	mov	r1, r3
 8001016:	481b      	ldr	r0, [pc, #108]	@ (8001084 <MX_I2C1_Init+0xe4>)
 8001018:	f001 ffa6 	bl	8002f68 <HAL_GPIO_Init>

	 /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_I2C1_Init+0xe0>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	4a16      	ldr	r2, [pc, #88]	@ (8001080 <MX_I2C1_Init+0xe0>)
 8001026:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800102a:	6413      	str	r3, [r2, #64]	@ 0x40
 800102c:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_I2C1_Init+0xe0>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001038:	480e      	ldr	r0, [pc, #56]	@ (8001074 <MX_I2C1_Init+0xd4>)
 800103a:	f002 f975 	bl	8003328 <HAL_I2C_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_I2C1_Init+0xa8>
  {
    Error_Handler();
 8001044:	f000 f8a8 	bl	8001198 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001048:	2100      	movs	r1, #0
 800104a:	480a      	ldr	r0, [pc, #40]	@ (8001074 <MX_I2C1_Init+0xd4>)
 800104c:	f002 fe09 	bl	8003c62 <HAL_I2CEx_ConfigAnalogFilter>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_I2C1_Init+0xba>
  {
    Error_Handler();
 8001056:	f000 f89f 	bl	8001198 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4805      	ldr	r0, [pc, #20]	@ (8001074 <MX_I2C1_Init+0xd4>)
 800105e:	f002 fe3c 	bl	8003cda <HAL_I2CEx_ConfigDigitalFilter>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_I2C1_Init+0xcc>
  {
    Error_Handler();
 8001068:	f000 f896 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106c:	bf00      	nop
 800106e:	3720      	adds	r7, #32
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000025c 	.word	0x2000025c
 8001078:	40005400 	.word	0x40005400
 800107c:	000186a0 	.word	0x000186a0
 8001080:	40023800 	.word	0x40023800
 8001084:	40020400 	.word	0x40020400

08001088 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  RTC_TimeTypeDef sTime = {0}; // key user variables for RTC date
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010a0:	4b24      	ldr	r3, [pc, #144]	@ (8001134 <MX_RTC_Init+0xac>)
 80010a2:	4a25      	ldr	r2, [pc, #148]	@ (8001138 <MX_RTC_Init+0xb0>)
 80010a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010a6:	4b23      	ldr	r3, [pc, #140]	@ (8001134 <MX_RTC_Init+0xac>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80010ac:	4b21      	ldr	r3, [pc, #132]	@ (8001134 <MX_RTC_Init+0xac>)
 80010ae:	227f      	movs	r2, #127	@ 0x7f
 80010b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010b2:	4b20      	ldr	r3, [pc, #128]	@ (8001134 <MX_RTC_Init+0xac>)
 80010b4:	22ff      	movs	r2, #255	@ 0xff
 80010b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001134 <MX_RTC_Init+0xac>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010be:	4b1d      	ldr	r3, [pc, #116]	@ (8001134 <MX_RTC_Init+0xac>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001134 <MX_RTC_Init+0xac>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ca:	481a      	ldr	r0, [pc, #104]	@ (8001134 <MX_RTC_Init+0xac>)
 80010cc:	f003 fdac 	bl	8004c28 <HAL_RTC_Init>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80010d6:	f000 f85f 	bl	8001198 <Error_Handler>
  // Important RTC init code.
  /*
   * * Initialize RTC and set the Time and Date
  */

  sTime.Hours = 0x01;
 80010da:	2301      	movs	r3, #1
 80010dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 80010de:	2320      	movs	r3, #32
 80010e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x00;
 80010e2:	2300      	movs	r3, #0
 80010e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2201      	movs	r2, #1
 80010f2:	4619      	mov	r1, r3
 80010f4:	480f      	ldr	r0, [pc, #60]	@ (8001134 <MX_RTC_Init+0xac>)
 80010f6:	f003 fe1a 	bl	8004d2e <HAL_RTC_SetTime>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001100:	f000 f84a 	bl	8001198 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001104:	2301      	movs	r3, #1
 8001106:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8001108:	2308      	movs	r3, #8
 800110a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x05;
 800110c:	2305      	movs	r3, #5
 800110e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8001110:	2324      	movs	r3, #36	@ 0x24
 8001112:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	2201      	movs	r2, #1
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	@ (8001134 <MX_RTC_Init+0xac>)
 800111c:	f003 feff 	bl	8004f1e <HAL_RTC_SetDate>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001126:	f000 f837 	bl	8001198 <Error_Handler>
  }

  /* USER CODE END RTC_Init 2 */
}
 800112a:	bf00      	nop
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200002b0 	.word	0x200002b0
 8001138:	40002800 	.word	0x40002800

0800113c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001142:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001146:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114a:	2204      	movs	r2, #4
 800114c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001150:	2202      	movs	r2, #2
 8001152:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115c:	2202      	movs	r2, #2
 800115e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001162:	2201      	movs	r2, #1
 8001164:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001166:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800116c:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001172:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001174:	2201      	movs	r2, #1
 8001176:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001178:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800117a:	2200      	movs	r2, #0
 800117c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800117e:	4805      	ldr	r0, [pc, #20]	@ (8001194 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001180:	f002 fdea 	bl	8003d58 <HAL_PCD_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800118a:	f000 f805 	bl	8001198 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200002d0 	.word	0x200002d0

08001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800119c:	b672      	cpsid	i
}
 800119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <Error_Handler+0x8>

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	@ 0x38
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a55      	ldr	r2, [pc, #340]	@ (8001368 <HAL_ETH_MspInit+0x174>)
 8001212:	4293      	cmp	r3, r2
 8001214:	f040 80a4 	bne.w	8001360 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
 800121c:	4b53      	ldr	r3, [pc, #332]	@ (800136c <HAL_ETH_MspInit+0x178>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001220:	4a52      	ldr	r2, [pc, #328]	@ (800136c <HAL_ETH_MspInit+0x178>)
 8001222:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001226:	6313      	str	r3, [r2, #48]	@ 0x30
 8001228:	4b50      	ldr	r3, [pc, #320]	@ (800136c <HAL_ETH_MspInit+0x178>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001230:	623b      	str	r3, [r7, #32]
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	2300      	movs	r3, #0
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	4b4c      	ldr	r3, [pc, #304]	@ (800136c <HAL_ETH_MspInit+0x178>)
 800123a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123c:	4a4b      	ldr	r2, [pc, #300]	@ (800136c <HAL_ETH_MspInit+0x178>)
 800123e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001242:	6313      	str	r3, [r2, #48]	@ 0x30
 8001244:	4b49      	ldr	r3, [pc, #292]	@ (800136c <HAL_ETH_MspInit+0x178>)
 8001246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001248:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	4b45      	ldr	r3, [pc, #276]	@ (800136c <HAL_ETH_MspInit+0x178>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001258:	4a44      	ldr	r2, [pc, #272]	@ (800136c <HAL_ETH_MspInit+0x178>)
 800125a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800125e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001260:	4b42      	ldr	r3, [pc, #264]	@ (800136c <HAL_ETH_MspInit+0x178>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001264:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001268:	61bb      	str	r3, [r7, #24]
 800126a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	4b3e      	ldr	r3, [pc, #248]	@ (800136c <HAL_ETH_MspInit+0x178>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	4a3d      	ldr	r2, [pc, #244]	@ (800136c <HAL_ETH_MspInit+0x178>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6313      	str	r3, [r2, #48]	@ 0x30
 800127c:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <HAL_ETH_MspInit+0x178>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	4b37      	ldr	r3, [pc, #220]	@ (800136c <HAL_ETH_MspInit+0x178>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001290:	4a36      	ldr	r2, [pc, #216]	@ (800136c <HAL_ETH_MspInit+0x178>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6313      	str	r3, [r2, #48]	@ 0x30
 8001298:	4b34      	ldr	r3, [pc, #208]	@ (800136c <HAL_ETH_MspInit+0x178>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4b30      	ldr	r3, [pc, #192]	@ (800136c <HAL_ETH_MspInit+0x178>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ac:	4a2f      	ldr	r2, [pc, #188]	@ (800136c <HAL_ETH_MspInit+0x178>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <HAL_ETH_MspInit+0x178>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012c0:	2300      	movs	r3, #0
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	4b29      	ldr	r3, [pc, #164]	@ (800136c <HAL_ETH_MspInit+0x178>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	4a28      	ldr	r2, [pc, #160]	@ (800136c <HAL_ETH_MspInit+0x178>)
 80012ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d0:	4b26      	ldr	r3, [pc, #152]	@ (800136c <HAL_ETH_MspInit+0x178>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012dc:	2332      	movs	r3, #50	@ 0x32
 80012de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ec:	230b      	movs	r3, #11
 80012ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	481e      	ldr	r0, [pc, #120]	@ (8001370 <HAL_ETH_MspInit+0x17c>)
 80012f8:	f001 fe36 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012fc:	2386      	movs	r3, #134	@ 0x86
 80012fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130c:	230b      	movs	r3, #11
 800130e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	4619      	mov	r1, r3
 8001316:	4817      	ldr	r0, [pc, #92]	@ (8001374 <HAL_ETH_MspInit+0x180>)
 8001318:	f001 fe26 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800131c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132a:	2303      	movs	r3, #3
 800132c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132e:	230b      	movs	r3, #11
 8001330:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001336:	4619      	mov	r1, r3
 8001338:	480f      	ldr	r0, [pc, #60]	@ (8001378 <HAL_ETH_MspInit+0x184>)
 800133a:	f001 fe15 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800133e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001342:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134c:	2303      	movs	r3, #3
 800134e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001350:	230b      	movs	r3, #11
 8001352:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001358:	4619      	mov	r1, r3
 800135a:	4808      	ldr	r0, [pc, #32]	@ (800137c <HAL_ETH_MspInit+0x188>)
 800135c:	f001 fe04 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	3738      	adds	r7, #56	@ 0x38
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40028000 	.word	0x40028000
 800136c:	40023800 	.word	0x40023800
 8001370:	40020800 	.word	0x40020800
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40021800 	.word	0x40021800

08001380 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <HAL_I2C_MspInit+0x84>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d12c      	bne.n	80013fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
 80013a6:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_I2C_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <HAL_I2C_MspInit+0x88>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_I2C_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80013be:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80013c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c4:	2312      	movs	r3, #18
 80013c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013d0:	2304      	movs	r3, #4
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	480c      	ldr	r0, [pc, #48]	@ (800140c <HAL_I2C_MspInit+0x8c>)
 80013dc:	f001 fdc4 	bl	8002f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_I2C_MspInit+0x88>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e8:	4a07      	ldr	r2, [pc, #28]	@ (8001408 <HAL_I2C_MspInit+0x88>)
 80013ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f0:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_I2C_MspInit+0x88>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40005400 	.word	0x40005400
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400

08001410 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	@ 0x38
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001418:	f107 0308 	add.w	r3, r7, #8
 800141c:	2230      	movs	r2, #48	@ 0x30
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f005 fc4b 	bl	8006cbc <memset>
  if(hrtc->Instance==RTC)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a0c      	ldr	r2, [pc, #48]	@ (800145c <HAL_RTC_MspInit+0x4c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d111      	bne.n	8001454 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001430:	2320      	movs	r3, #32
 8001432:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001434:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800143a:	f107 0308 	add.w	r3, r7, #8
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fa32 	bl	80048a8 <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800144a:	f7ff fea5 	bl	8001198 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <HAL_RTC_MspInit+0x50>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3738      	adds	r7, #56	@ 0x38
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40002800 	.word	0x40002800
 8001460:	42470e3c 	.word	0x42470e3c

08001464 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a28      	ldr	r2, [pc, #160]	@ (8001524 <HAL_SPI_MspInit+0xc0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d149      	bne.n	800151a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a26      	ldr	r2, [pc, #152]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 8001490:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b24      	ldr	r3, [pc, #144]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <HAL_SPI_MspInit+0xc4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014da:	2360      	movs	r3, #96	@ 0x60
 80014dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e6:	2303      	movs	r3, #3
 80014e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ea:	2305      	movs	r3, #5
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0314 	add.w	r3, r7, #20
 80014f2:	4619      	mov	r1, r3
 80014f4:	480d      	ldr	r0, [pc, #52]	@ (800152c <HAL_SPI_MspInit+0xc8>)
 80014f6:	f001 fd37 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014fa:	2320      	movs	r3, #32
 80014fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fe:	2302      	movs	r3, #2
 8001500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001506:	2303      	movs	r3, #3
 8001508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800150a:	2305      	movs	r3, #5
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4806      	ldr	r0, [pc, #24]	@ (8001530 <HAL_SPI_MspInit+0xcc>)
 8001516:	f001 fd27 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	@ 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40013000 	.word	0x40013000
 8001528:	40023800 	.word	0x40023800
 800152c:	40020000 	.word	0x40020000
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a19      	ldr	r2, [pc, #100]	@ (80015b8 <HAL_UART_MspInit+0x84>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d12c      	bne.n	80015b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <HAL_UART_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4a17      	ldr	r2, [pc, #92]	@ (80015bc <HAL_UART_MspInit+0x88>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_UART_MspInit+0x88>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <HAL_UART_MspInit+0x88>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	4a10      	ldr	r2, [pc, #64]	@ (80015bc <HAL_UART_MspInit+0x88>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6313      	str	r3, [r2, #48]	@ 0x30
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_UART_MspInit+0x88>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800158e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001592:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015a0:	2307      	movs	r3, #7
 80015a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <HAL_UART_MspInit+0x8c>)
 80015ac:	f001 fcdc 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015b0:	bf00      	nop
 80015b2:	3728      	adds	r7, #40	@ 0x28
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40004800 	.word	0x40004800
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020c00 	.word	0x40020c00

080015c4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	@ 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015e4:	d13f      	bne.n	8001666 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <HAL_PCD_MspInit+0xac>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a20      	ldr	r2, [pc, #128]	@ (8001670 <HAL_PCD_MspInit+0xac>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <HAL_PCD_MspInit+0xac>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001602:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001608:	2302      	movs	r3, #2
 800160a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001610:	2303      	movs	r3, #3
 8001612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001614:	230a      	movs	r3, #10
 8001616:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4815      	ldr	r0, [pc, #84]	@ (8001674 <HAL_PCD_MspInit+0xb0>)
 8001620:	f001 fca2 	bl	8002f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001624:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	480e      	ldr	r0, [pc, #56]	@ (8001674 <HAL_PCD_MspInit+0xb0>)
 800163a:	f001 fc95 	bl	8002f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <HAL_PCD_MspInit+0xac>)
 8001640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001642:	4a0b      	ldr	r2, [pc, #44]	@ (8001670 <HAL_PCD_MspInit+0xac>)
 8001644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001648:	6353      	str	r3, [r2, #52]	@ 0x34
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_PCD_MspInit+0xac>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001652:	4a07      	ldr	r2, [pc, #28]	@ (8001670 <HAL_PCD_MspInit+0xac>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001658:	6453      	str	r3, [r2, #68]	@ 0x44
 800165a:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_PCD_MspInit+0xac>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	@ 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <NMI_Handler+0x4>

08001680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <HardFault_Handler+0x4>

08001688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <MemManage_Handler+0x4>

08001690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <BusFault_Handler+0x4>

08001698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <UsageFault_Handler+0x4>

080016a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ce:	f000 fff9 	bl	80026c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001734 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001700:	f7ff ffea 	bl	80016d8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001704:	480c      	ldr	r0, [pc, #48]	@ (8001738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001706:	490d      	ldr	r1, [pc, #52]	@ (800173c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001708:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800170c:	e002      	b.n	8001714 <LoopCopyDataInit>

0800170e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001712:	3304      	adds	r3, #4

08001714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001718:	d3f9      	bcc.n	800170e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800171a:	4a0a      	ldr	r2, [pc, #40]	@ (8001744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800171c:	4c0a      	ldr	r4, [pc, #40]	@ (8001748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800171e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001720:	e001      	b.n	8001726 <LoopFillZerobss>

08001722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001724:	3204      	adds	r2, #4

08001726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001728:	d3fb      	bcc.n	8001722 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800172a:	f005 fadf 	bl	8006cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fafb 	bl	8000d28 <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001734:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001740:	08006e98 	.word	0x08006e98
  ldr r2, =_sbss
 8001744:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001748:	20000898 	.word	0x20000898

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>

0800174e <BME280_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void BME280_Error_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
 8001752:	bf00      	nop
 8001754:	e7fd      	b.n	8001752 <BME280_Error_Handler+0x4>
	...

08001758 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 800175c:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <MX_SPI1_Init+0x64>)
 800175e:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <MX_SPI1_Init+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b16      	ldr	r3, [pc, #88]	@ (80017bc <MX_SPI1_Init+0x64>)
 8001764:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001768:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800176a:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <MX_SPI1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <MX_SPI1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001776:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <MX_SPI1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	@ (80017bc <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8001782:	4b0e      	ldr	r3, [pc, #56]	@ (80017bc <MX_SPI1_Init+0x64>)
 8001784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001788:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800178a:	4b0c      	ldr	r3, [pc, #48]	@ (80017bc <MX_SPI1_Init+0x64>)
 800178c:	2238      	movs	r2, #56	@ 0x38
 800178e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <MX_SPI1_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b09      	ldr	r3, [pc, #36]	@ (80017bc <MX_SPI1_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <MX_SPI1_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 80017a2:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <MX_SPI1_Init+0x64>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	@ (80017bc <MX_SPI1_Init+0x64>)
 80017aa:	f003 fd49 	bl	8005240 <HAL_SPI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SPI1_Init+0x60>
    {
        BME280_Error_Handler();
 80017b4:	f7ff ffcb 	bl	800174e <BME280_Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200007bc 	.word	0x200007bc
 80017c0:	40013000 	.word	0x40013000

080017c4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	@ 0x30
 80017c8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <MX_GPIO_Init+0x14c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001910 <MX_GPIO_Init+0x14c>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <MX_GPIO_Init+0x14c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	61bb      	str	r3, [r7, #24]
 80017f4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	4b45      	ldr	r3, [pc, #276]	@ (8001910 <MX_GPIO_Init+0x14c>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a44      	ldr	r2, [pc, #272]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b42      	ldr	r3, [pc, #264]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a3d      	ldr	r2, [pc, #244]	@ (8001910 <MX_GPIO_Init+0x14c>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	4a36      	ldr	r2, [pc, #216]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	@ 0x30
 800183e:	4b34      	ldr	r3, [pc, #208]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	4a2f      	ldr	r2, [pc, #188]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001854:	f043 0308 	orr.w	r3, r3, #8
 8001858:	6313      	str	r3, [r2, #48]	@ 0x30
 800185a:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <MX_GPIO_Init+0x14c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b29      	ldr	r3, [pc, #164]	@ (8001910 <MX_GPIO_Init+0x14c>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4a28      	ldr	r2, [pc, #160]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001874:	6313      	str	r3, [r2, #48]	@ 0x30
 8001876:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <MX_GPIO_Init+0x14c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001882:	2200      	movs	r2, #0
 8001884:	f244 0189 	movw	r1, #16521	@ 0x4089
 8001888:	4822      	ldr	r0, [pc, #136]	@ (8001914 <MX_GPIO_Init+0x150>)
 800188a:	f001 fd19 	bl	80032c0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800188e:	2200      	movs	r2, #0
 8001890:	2140      	movs	r1, #64	@ 0x40
 8001892:	4821      	ldr	r0, [pc, #132]	@ (8001918 <MX_GPIO_Init+0x154>)
 8001894:	f001 fd14 	bl	80032c0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800189c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800189e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	481b      	ldr	r0, [pc, #108]	@ (800191c <MX_GPIO_Init+0x158>)
 80018b0:	f001 fb5a 	bl	8002f68 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin CS_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin;
 80018b4:	f244 0389 	movw	r3, #16521	@ 0x4089
 80018b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4811      	ldr	r0, [pc, #68]	@ (8001914 <MX_GPIO_Init+0x150>)
 80018ce:	f001 fb4b 	bl	8002f68 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018d2:	2340      	movs	r3, #64	@ 0x40
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018de:	2300      	movs	r3, #0
 80018e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	4619      	mov	r1, r3
 80018e8:	480b      	ldr	r0, [pc, #44]	@ (8001918 <MX_GPIO_Init+0x154>)
 80018ea:	f001 fb3d 	bl	8002f68 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018ee:	2380      	movs	r3, #128	@ 0x80
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 031c 	add.w	r3, r7, #28
 80018fe:	4619      	mov	r1, r3
 8001900:	4805      	ldr	r0, [pc, #20]	@ (8001918 <MX_GPIO_Init+0x154>)
 8001902:	f001 fb31 	bl	8002f68 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	@ 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020400 	.word	0x40020400
 8001918:	40021800 	.word	0x40021800
 800191c:	40020800 	.word	0x40020800

08001920 <SPI_Write>:

static void SPI_Write(uint8_t reg, uint8_t *data, uint16_t size)
{                                    // 6.3.2 SPI write
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
 800192c:	4613      	mov	r3, r2
 800192e:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg & 0x7F; // Write command -> applies mask 0x7F = 0b01111111 -> Most Significant Bit (bit number 7) = 0
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001936:	b2db      	uxtb	r3, r3
 8001938:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2108      	movs	r1, #8
 800193e:	480d      	ldr	r0, [pc, #52]	@ (8001974 <SPI_Write+0x54>)
 8001940:	f001 fcbe 	bl	80032c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 8001944:	f107 010f 	add.w	r1, r7, #15
 8001948:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800194c:	2201      	movs	r2, #1
 800194e:	480a      	ldr	r0, [pc, #40]	@ (8001978 <SPI_Write+0x58>)
 8001950:	f003 fcff 	bl	8005352 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001954:	88ba      	ldrh	r2, [r7, #4]
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800195a:	6839      	ldr	r1, [r7, #0]
 800195c:	4806      	ldr	r0, [pc, #24]	@ (8001978 <SPI_Write+0x58>)
 800195e:	f003 fcf8 	bl	8005352 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8001962:	2201      	movs	r2, #1
 8001964:	2108      	movs	r1, #8
 8001966:	4803      	ldr	r0, [pc, #12]	@ (8001974 <SPI_Write+0x54>)
 8001968:	f001 fcaa 	bl	80032c0 <HAL_GPIO_WritePin>
}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40020400 	.word	0x40020400
 8001978:	200007bc 	.word	0x200007bc

0800197c <SPI_Read>:

static void SPI_Read(uint8_t reg, uint8_t *data, uint16_t size)
{                                    // 6.3.1 SPI read
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	4613      	mov	r3, r2
 800198a:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg | 0x80; // Read command -> applies mask 0x80 = 0b10000000 -> Most Significant Bit (bit number 7) = 1
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001992:	b2db      	uxtb	r3, r3
 8001994:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2108      	movs	r1, #8
 800199a:	480d      	ldr	r0, [pc, #52]	@ (80019d0 <SPI_Read+0x54>)
 800199c:	f001 fc90 	bl	80032c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), TIMEOUT);
 80019a0:	f107 010f 	add.w	r1, r7, #15
 80019a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a8:	2201      	movs	r2, #1
 80019aa:	480a      	ldr	r0, [pc, #40]	@ (80019d4 <SPI_Read+0x58>)
 80019ac:	f003 fcd1 	bl	8005352 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, size, TIMEOUT);
 80019b0:	88ba      	ldrh	r2, [r7, #4]
 80019b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	4806      	ldr	r0, [pc, #24]	@ (80019d4 <SPI_Read+0x58>)
 80019ba:	f003 fe0d 	bl	80055d8 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80019be:	2201      	movs	r2, #1
 80019c0:	2108      	movs	r1, #8
 80019c2:	4803      	ldr	r0, [pc, #12]	@ (80019d0 <SPI_Read+0x54>)
 80019c4:	f001 fc7c 	bl	80032c0 <HAL_GPIO_WritePin>
}
 80019c8:	bf00      	nop
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40020400 	.word	0x40020400
 80019d4:	200007bc 	.word	0x200007bc

080019d8 <trimmingParametersRead>:

static float temp, hum;

// 4.2.2 Trimming parameter readout
static void trimmingParametersRead(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
    uint8_t calibData1[26]; // Table 18: Memory map -> calib00..calib25 | 0x88 to 0xA1
    uint8_t calibData2[7];

    SPI_Read(CALIBMEMADD1, calibData1, CALIBDATASIZE1); // 8-bit temperature calibration value
 80019de:	f107 030c 	add.w	r3, r7, #12
 80019e2:	2219      	movs	r2, #25
 80019e4:	4619      	mov	r1, r3
 80019e6:	2088      	movs	r0, #136	@ 0x88
 80019e8:	f7ff ffc8 	bl	800197c <SPI_Read>
    SPI_Read(CALIBMEMADD2, calibData2, CALIBDATASIZE2); // 8-bit humidity calibration value
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2207      	movs	r2, #7
 80019f0:	4619      	mov	r1, r3
 80019f2:	20e1      	movs	r0, #225	@ 0xe1
 80019f4:	f7ff ffc2 	bl	800197c <SPI_Read>

    // Combine the bytes read from the calibration memory into 16-bit integers.
    dig_T1 = (calibData1[1] << 8) | calibData1[0];
 80019f8:	7b7b      	ldrb	r3, [r7, #13]
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	b21a      	sxth	r2, r3
 80019fe:	7b3b      	ldrb	r3, [r7, #12]
 8001a00:	b21b      	sxth	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b4d      	ldr	r3, [pc, #308]	@ (8001b40 <trimmingParametersRead+0x168>)
 8001a0a:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calibData1[3] << 8) | calibData1[2];
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001b44 <trimmingParametersRead+0x16c>)
 8001a1c:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calibData1[5] << 8) | calibData1[4];
 8001a1e:	7c7b      	ldrb	r3, [r7, #17]
 8001a20:	021b      	lsls	r3, r3, #8
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	7c3b      	ldrb	r3, [r7, #16]
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b21a      	sxth	r2, r3
 8001a2c:	4b46      	ldr	r3, [pc, #280]	@ (8001b48 <trimmingParametersRead+0x170>)
 8001a2e:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calibData1[7] << 8) | calibData1[6];
 8001a30:	7cfb      	ldrb	r3, [r7, #19]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b21a      	sxth	r2, r3
 8001a36:	7cbb      	ldrb	r3, [r7, #18]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b21b      	sxth	r3, r3
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b42      	ldr	r3, [pc, #264]	@ (8001b4c <trimmingParametersRead+0x174>)
 8001a42:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calibData1[9] << 8) | calibData1[8];
 8001a44:	7d7b      	ldrb	r3, [r7, #21]
 8001a46:	021b      	lsls	r3, r3, #8
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	7d3b      	ldrb	r3, [r7, #20]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	4b3f      	ldr	r3, [pc, #252]	@ (8001b50 <trimmingParametersRead+0x178>)
 8001a54:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calibData1[11] << 8) | calibData1[10];
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	b21a      	sxth	r2, r3
 8001a5c:	7dbb      	ldrb	r3, [r7, #22]
 8001a5e:	b21b      	sxth	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	4b3b      	ldr	r3, [pc, #236]	@ (8001b54 <trimmingParametersRead+0x17c>)
 8001a66:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calibData1[13] << 8) | calibData1[12];
 8001a68:	7e7b      	ldrb	r3, [r7, #25]
 8001a6a:	021b      	lsls	r3, r3, #8
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	7e3b      	ldrb	r3, [r7, #24]
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	4313      	orrs	r3, r2
 8001a74:	b21a      	sxth	r2, r3
 8001a76:	4b38      	ldr	r3, [pc, #224]	@ (8001b58 <trimmingParametersRead+0x180>)
 8001a78:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calibData1[15] << 8) | calibData1[14];
 8001a7a:	7efb      	ldrb	r3, [r7, #27]
 8001a7c:	021b      	lsls	r3, r3, #8
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	7ebb      	ldrb	r3, [r7, #26]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	4313      	orrs	r3, r2
 8001a86:	b21a      	sxth	r2, r3
 8001a88:	4b34      	ldr	r3, [pc, #208]	@ (8001b5c <trimmingParametersRead+0x184>)
 8001a8a:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calibData1[17] << 8) | calibData1[16];
 8001a8c:	7f7b      	ldrb	r3, [r7, #29]
 8001a8e:	021b      	lsls	r3, r3, #8
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	7f3b      	ldrb	r3, [r7, #28]
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	4313      	orrs	r3, r2
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <trimmingParametersRead+0x188>)
 8001a9c:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calibData1[19] << 8) | calibData1[18];
 8001a9e:	7ffb      	ldrb	r3, [r7, #31]
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	7fbb      	ldrb	r3, [r7, #30]
 8001aa6:	b21b      	sxth	r3, r3
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	b21a      	sxth	r2, r3
 8001aac:	4b2d      	ldr	r3, [pc, #180]	@ (8001b64 <trimmingParametersRead+0x18c>)
 8001aae:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calibData1[21] << 8) | calibData1[20];
 8001ab0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	b21a      	sxth	r2, r3
 8001ab8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001abc:	b21b      	sxth	r3, r3
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	b21a      	sxth	r2, r3
 8001ac2:	4b29      	ldr	r3, [pc, #164]	@ (8001b68 <trimmingParametersRead+0x190>)
 8001ac4:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calibData1[23] << 8) | calibData1[22];
 8001ac6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	b21a      	sxth	r2, r3
 8001ace:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	b21a      	sxth	r2, r3
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <trimmingParametersRead+0x194>)
 8001ada:	801a      	strh	r2, [r3, #0]

    dig_H1 = calibData1[24];
 8001adc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <trimmingParametersRead+0x198>)
 8001ae4:	801a      	strh	r2, [r3, #0]
    dig_H2 = (calibData2[1] << 8) | calibData2[0];
 8001ae6:	797b      	ldrb	r3, [r7, #5]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	793b      	ldrb	r3, [r7, #4]
 8001aee:	b21b      	sxth	r3, r3
 8001af0:	4313      	orrs	r3, r2
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b74 <trimmingParametersRead+0x19c>)
 8001af6:	801a      	strh	r2, [r3, #0]
    dig_H3 = calibData2[2];
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b78 <trimmingParametersRead+0x1a0>)
 8001afe:	801a      	strh	r2, [r3, #0]
    dig_H4 = (calibData2[3] << 4) | (calibData2[4] & 0x0F);
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	7a3b      	ldrb	r3, [r7, #8]
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	4313      	orrs	r3, r2
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	4b19      	ldr	r3, [pc, #100]	@ (8001b7c <trimmingParametersRead+0x1a4>)
 8001b16:	801a      	strh	r2, [r3, #0]
    dig_H5 = (calibData2[4] << 4) | (calibData2[5] >> 4);
 8001b18:	7a3b      	ldrb	r3, [r7, #8]
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	7a7b      	ldrb	r3, [r7, #9]
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	b21b      	sxth	r3, r3
 8001b26:	4313      	orrs	r3, r2
 8001b28:	b21a      	sxth	r2, r3
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <trimmingParametersRead+0x1a8>)
 8001b2c:	801a      	strh	r2, [r3, #0]
    dig_H6 = calibData2[6];
 8001b2e:	7abb      	ldrb	r3, [r7, #10]
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <trimmingParametersRead+0x1ac>)
 8001b34:	801a      	strh	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	@ 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000814 	.word	0x20000814
 8001b44:	2000081c 	.word	0x2000081c
 8001b48:	2000081e 	.word	0x2000081e
 8001b4c:	20000816 	.word	0x20000816
 8001b50:	20000820 	.word	0x20000820
 8001b54:	20000822 	.word	0x20000822
 8001b58:	20000824 	.word	0x20000824
 8001b5c:	20000826 	.word	0x20000826
 8001b60:	20000828 	.word	0x20000828
 8001b64:	2000082a 	.word	0x2000082a
 8001b68:	2000082c 	.word	0x2000082c
 8001b6c:	2000082e 	.word	0x2000082e
 8001b70:	20000818 	.word	0x20000818
 8001b74:	20000830 	.word	0x20000830
 8001b78:	2000081a 	.word	0x2000081a
 8001b7c:	20000832 	.word	0x20000832
 8001b80:	20000834 	.word	0x20000834
 8001b84:	20000836 	.word	0x20000836

08001b88 <BME280_init>:

// Function to initialize the BME280 sensor
void BME280_init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
    // Read trimming parameters from the sensor
    trimmingParametersRead();
 8001b8e:	f7ff ff23 	bl	80019d8 <trimmingParametersRead>
    /*
    5.4.2 The "reset" register contains the soft reset word reset[7:0].
    If the value 0xB6 is written to the register, the device is reset using the complete power-on-reset procedure.
    The readout value is 0x00.
    */
    uint8_t resetSeq = 0xB6;
 8001b92:	23b6      	movs	r3, #182	@ 0xb6
 8001b94:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrlHum = 0x01;
 8001b96:	2301      	movs	r3, #1
 8001b98:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrlMeas = 0xA3; // 0b10100011 in hexadecimal
 8001b9a:	23a3      	movs	r3, #163	@ 0xa3
 8001b9c:	717b      	strb	r3, [r7, #5]
    uint8_t config = 0x10;   // 0b00010000 in hexadecimal
 8001b9e:	2310      	movs	r3, #16
 8001ba0:	713b      	strb	r3, [r7, #4]

    // Write reset sequence to the reset register
    SPI_Write(RESET_REG, &resetSeq, CMDWRITESIZE);
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	20e0      	movs	r0, #224	@ 0xe0
 8001baa:	f7ff feb9 	bl	8001920 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001bae:	2064      	movs	r0, #100	@ 0x64
 8001bb0:	f000 fda8 	bl	8002704 <HAL_Delay>

    // Write control settings to the control registers
    SPI_Write(CTRL_HUM, &ctrlHum, CMDWRITESIZE);
 8001bb4:	1dbb      	adds	r3, r7, #6
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4619      	mov	r1, r3
 8001bba:	20f2      	movs	r0, #242	@ 0xf2
 8001bbc:	f7ff feb0 	bl	8001920 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001bc0:	2064      	movs	r0, #100	@ 0x64
 8001bc2:	f000 fd9f 	bl	8002704 <HAL_Delay>

    SPI_Write(CTRL_MEAS, &ctrlMeas, CMDWRITESIZE);
 8001bc6:	1d7b      	adds	r3, r7, #5
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	20f4      	movs	r0, #244	@ 0xf4
 8001bce:	f7ff fea7 	bl	8001920 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001bd2:	2064      	movs	r0, #100	@ 0x64
 8001bd4:	f000 fd96 	bl	8002704 <HAL_Delay>

    SPI_Write(CONFIG_REG, &config, CMDWRITESIZE);
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4619      	mov	r1, r3
 8001bde:	20f5      	movs	r0, #245	@ 0xf5
 8001be0:	f7ff fe9e 	bl	8001920 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001be4:	2064      	movs	r0, #100	@ 0x64
 8001be6:	f000 fd8d 	bl	8002704 <HAL_Delay>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <BME280_compensate_T_int32>:
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
static BME280_S32_t t_fine; // t_fine carries fine temperature as global value

// Temperature compensation formula taken from datasheet (please check page 25/60 for reference).
static BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    BME280_S32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((BME280_S32_t)dig_T1 << 1))) * ((BME280_S32_t)dig_T2)) >> 11;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	10da      	asrs	r2, r3, #3
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <BME280_compensate_T_int32+0x74>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	4a18      	ldr	r2, [pc, #96]	@ (8001c6c <BME280_compensate_T_int32+0x78>)
 8001c0a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c0e:	fb02 f303 	mul.w	r3, r2, r3
 8001c12:	12db      	asrs	r3, r3, #11
 8001c14:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((BME280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BME280_S32_t)dig_T1))) >> 12) * ((BME280_S32_t)dig_T3)) >> 14;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	111b      	asrs	r3, r3, #4
 8001c1a:	4a13      	ldr	r2, [pc, #76]	@ (8001c68 <BME280_compensate_T_int32+0x74>)
 8001c1c:	8812      	ldrh	r2, [r2, #0]
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	1112      	asrs	r2, r2, #4
 8001c24:	4910      	ldr	r1, [pc, #64]	@ (8001c68 <BME280_compensate_T_int32+0x74>)
 8001c26:	8809      	ldrh	r1, [r1, #0]
 8001c28:	1a52      	subs	r2, r2, r1
 8001c2a:	fb02 f303 	mul.w	r3, r2, r3
 8001c2e:	131b      	asrs	r3, r3, #12
 8001c30:	4a0f      	ldr	r2, [pc, #60]	@ (8001c70 <BME280_compensate_T_int32+0x7c>)
 8001c32:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	139b      	asrs	r3, r3, #14
 8001c3c:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a0b      	ldr	r2, [pc, #44]	@ (8001c74 <BME280_compensate_T_int32+0x80>)
 8001c46:	6013      	str	r3, [r2, #0]
    T = (t_fine * 5 + 128) >> 8;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	@ (8001c74 <BME280_compensate_T_int32+0x80>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	3380      	adds	r3, #128	@ 0x80
 8001c54:	121b      	asrs	r3, r3, #8
 8001c56:	60fb      	str	r3, [r7, #12]
    return T;
 8001c58:	68fb      	ldr	r3, [r7, #12]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000814 	.word	0x20000814
 8001c6c:	2000081c 	.word	0x2000081c
 8001c70:	2000081e 	.word	0x2000081e
 8001c74:	20000848 	.word	0x20000848

08001c78 <bme280_compensate_H_int32>:

// Humidity compensation formula taken from datasheet (please check page 25/60 for reference).
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH.
static BME280_U32_t bme280_compensate_H_int32(BME280_S32_t adc_H)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
    BME280_S32_t v_x1_u32r;
    v_x1_u32r = (t_fine - ((BME280_S32_t)76800));
 8001c80:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <bme280_compensate_H_int32+0xbc>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c88:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) * v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) * ((BME280_S32_t)dig_H2) + 8192) >> 14));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	039a      	lsls	r2, r3, #14
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <bme280_compensate_H_int32+0xc0>)
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	051b      	lsls	r3, r3, #20
 8001c96:	1ad2      	subs	r2, r2, r3
 8001c98:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <bme280_compensate_H_int32+0xc4>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	fb01 f303 	mul.w	r3, r1, r3
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001cac:	13db      	asrs	r3, r3, #15
 8001cae:	4a24      	ldr	r2, [pc, #144]	@ (8001d40 <bme280_compensate_H_int32+0xc8>)
 8001cb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	fb01 f202 	mul.w	r2, r1, r2
 8001cbc:	1292      	asrs	r2, r2, #10
 8001cbe:	4921      	ldr	r1, [pc, #132]	@ (8001d44 <bme280_compensate_H_int32+0xcc>)
 8001cc0:	8809      	ldrh	r1, [r1, #0]
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	fb00 f101 	mul.w	r1, r0, r1
 8001cca:	12c9      	asrs	r1, r1, #11
 8001ccc:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001cd0:	fb01 f202 	mul.w	r2, r1, r2
 8001cd4:	1292      	asrs	r2, r2, #10
 8001cd6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001cda:	491b      	ldr	r1, [pc, #108]	@ (8001d48 <bme280_compensate_H_int32+0xd0>)
 8001cdc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001ce0:	fb01 f202 	mul.w	r2, r1, r2
 8001ce4:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001ce8:	1392      	asrs	r2, r2, #14
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((BME280_S32_t)dig_H1)) >> 4));
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	13db      	asrs	r3, r3, #15
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	13d2      	asrs	r2, r2, #15
 8001cf8:	fb02 f303 	mul.w	r3, r2, r3
 8001cfc:	11db      	asrs	r3, r3, #7
 8001cfe:	4a13      	ldr	r2, [pc, #76]	@ (8001d4c <bme280_compensate_H_int32+0xd4>)
 8001d00:	8812      	ldrh	r2, [r2, #0]
 8001d02:	fb02 f303 	mul.w	r3, r2, r3
 8001d06:	111b      	asrs	r3, r3, #4
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001d14:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001d1c:	bfa8      	it	ge
 8001d1e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001d22:	60fb      	str	r3, [r7, #12]
    return (BME280_U32_t)(v_x1_u32r >> 12);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	131b      	asrs	r3, r3, #12
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	20000848 	.word	0x20000848
 8001d38:	20000832 	.word	0x20000832
 8001d3c:	20000834 	.word	0x20000834
 8001d40:	20000836 	.word	0x20000836
 8001d44:	2000081a 	.word	0x2000081a
 8001d48:	20000830 	.word	0x20000830
 8001d4c:	20000818 	.word	0x20000818

08001d50 <BME280_read>:
{
    return hum;
}

static uint8_t BME280_read(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
    uint8_t sensorData[8];
    uint8_t chipID;

    SPI_Read(CHIPIDREG, &chipID, MEMADDRESSSIZE);
 8001d56:	1dfb      	adds	r3, r7, #7
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	20d0      	movs	r0, #208	@ 0xd0
 8001d5e:	f7ff fe0d 	bl	800197c <SPI_Read>

    if (chipID == 0x60)
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2b60      	cmp	r3, #96	@ 0x60
 8001d66:	d128      	bne.n	8001dba <BME280_read+0x6a>
    {
        for (int i = 0; i <= 2; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	e008      	b.n	8001d80 <BME280_read+0x30>
        {
            BSP_LED_Toggle(LED2); // sensor ID OK
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f000 fc3c 	bl	80025ec <BSP_LED_Toggle>
            HAL_Delay(100);
 8001d74:	2064      	movs	r0, #100	@ 0x64
 8001d76:	f000 fcc5 	bl	8002704 <HAL_Delay>
        for (int i = 0; i <= 2; i++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	ddf3      	ble.n	8001d6e <BME280_read+0x1e>
        }

        SPI_Read(RAWDATAREG1, sensorData, RAWDATASIZE);
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	2208      	movs	r2, #8
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	20f7      	movs	r0, #247	@ 0xf7
 8001d90:	f7ff fdf4 	bl	800197c <SPI_Read>

        /* Data readout is done by starting a burst read from 0xF7 to 0xFC (temperature and pressure) or from 0xF7 to 0xFE
         * (temperature, pressure and humidity). The data are read out in an unsigned 20-bit format both for pressure and
         * for temperature and in an unsigned 16-bit format for humidity. */

        tADC = (sensorData[3] << 12) | (sensorData[4] << 4) | (sensorData[5] >> 4);
 8001d94:	7afb      	ldrb	r3, [r7, #11]
 8001d96:	031a      	lsls	r2, r3, #12
 8001d98:	7b3b      	ldrb	r3, [r7, #12]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	7b7a      	ldrb	r2, [r7, #13]
 8001da0:	0912      	lsrs	r2, r2, #4
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	4313      	orrs	r3, r2
 8001da6:	4a0f      	ldr	r2, [pc, #60]	@ (8001de4 <BME280_read+0x94>)
 8001da8:	6013      	str	r3, [r2, #0]
        hADC = (sensorData[6] << 8) | sensorData[7];
 8001daa:	7bbb      	ldrb	r3, [r7, #14]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	4a0d      	ldr	r2, [pc, #52]	@ (8001de8 <BME280_read+0x98>)
 8001db4:	6013      	str	r3, [r2, #0]

        return 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	e00f      	b.n	8001dda <BME280_read+0x8a>
    }
    else
    {
        for (int i = 0; i <= 2; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
 8001dbe:	e008      	b.n	8001dd2 <BME280_read+0x82>
        {
            BSP_LED_Toggle(LED3); // sensor ID ERROR
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f000 fc13 	bl	80025ec <BSP_LED_Toggle>
            HAL_Delay(100);
 8001dc6:	2064      	movs	r0, #100	@ 0x64
 8001dc8:	f000 fc9c 	bl	8002704 <HAL_Delay>
        for (int i = 0; i <= 2; i++)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	ddf3      	ble.n	8001dc0 <BME280_read+0x70>
        }

        return 1;
 8001dd8:	2301      	movs	r3, #1
    }
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000838 	.word	0x20000838
 8001de8:	2000083c 	.word	0x2000083c

08001dec <BME280_calculate>:

void BME280_calculate(void)
{
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	ed2d 8b02 	vpush	{d8}
 8001df2:	b0a4      	sub	sp, #144	@ 0x90
 8001df4:	af00      	add	r7, sp, #0
    if (BME280_read() == 0)
 8001df6:	f7ff ffab 	bl	8001d50 <BME280_read>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 819a 	bne.w	8002136 <BME280_calculate+0x34a>
    {
        temp = BME280_compensate_T_int32(tADC) / 100.0;
 8001e02:	4bdb      	ldr	r3, [pc, #876]	@ (8002170 <BME280_calculate+0x384>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fef4 	bl	8001bf4 <BME280_compensate_T_int32>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb46 	bl	80004a0 <__aeabi_i2d>
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4bd6      	ldr	r3, [pc, #856]	@ (8002174 <BME280_calculate+0x388>)
 8001e1a:	f7fe fcd5 	bl	80007c8 <__aeabi_ddiv>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4610      	mov	r0, r2
 8001e24:	4619      	mov	r1, r3
 8001e26:	f7fe fdb7 	bl	8000998 <__aeabi_d2f>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4ad2      	ldr	r2, [pc, #840]	@ (8002178 <BME280_calculate+0x38c>)
 8001e2e:	6013      	str	r3, [r2, #0]
        hum = bme280_compensate_H_int32(hADC) / 1024.0;
 8001e30:	4bd2      	ldr	r3, [pc, #840]	@ (800217c <BME280_calculate+0x390>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff1f 	bl	8001c78 <bme280_compensate_H_int32>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb1f 	bl	8000480 <__aeabi_ui2d>
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	4bce      	ldr	r3, [pc, #824]	@ (8002180 <BME280_calculate+0x394>)
 8001e48:	f7fe fcbe 	bl	80007c8 <__aeabi_ddiv>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fda0 	bl	8000998 <__aeabi_d2f>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4aca      	ldr	r2, [pc, #808]	@ (8002184 <BME280_calculate+0x398>)
 8001e5c:	6013      	str	r3, [r2, #0]

        uint8_t message[50];

        // Notify that the device is ready
        strcpy((char *)message, "Device ready, going to transfer data via UART.\r\n");
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4ac9      	ldr	r2, [pc, #804]	@ (8002188 <BME280_calculate+0x39c>)
 8001e62:	461c      	mov	r4, r3
 8001e64:	4615      	mov	r5, r2
 8001e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e72:	682b      	ldr	r3, [r5, #0]
 8001e74:	7023      	strb	r3, [r4, #0]
        uartSendString(message);
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f000 fb3b 	bl	80024f4 <uartSendString>

        // Send temperature data
        strcpy((char *)message, "Temperature: ");
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	4ac2      	ldr	r2, [pc, #776]	@ (800218c <BME280_calculate+0x3a0>)
 8001e82:	461c      	mov	r4, r3
 8001e84:	4613      	mov	r3, r2
 8001e86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e88:	c407      	stmia	r4!, {r0, r1, r2}
 8001e8a:	8023      	strh	r3, [r4, #0]
        char tempStr[20];
        int intPart = (int)temp;
 8001e8c:	4bba      	ldr	r3, [pc, #744]	@ (8002178 <BME280_calculate+0x38c>)
 8001e8e:	edd3 7a00 	vldr	s15, [r3]
 8001e92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        int fracPart = (int)((temp - intPart) * 100);
 8001e9e:	4bb6      	ldr	r3, [pc, #728]	@ (8002178 <BME280_calculate+0x38c>)
 8001ea0:	ed93 7a00 	vldr	s14, [r3]
 8001ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ea8:	ee07 3a90 	vmov	s15, r3
 8001eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb4:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8002190 <BME280_calculate+0x3a4>
 8001eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ebc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec0:	ee17 3a90 	vmov	r3, s15
 8001ec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        itoa(intPart, tempStr, 10);
 8001ec8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ecc:	220a      	movs	r2, #10
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001ed4:	f004 fead 	bl	8006c32 <itoa>
        strcat((char *)message, tempStr);
 8001ed8:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 fef3 	bl	8006ccc <strcat>
        strcat((char *)message, ".");
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe f97f 	bl	80001ec <strlen>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	4413      	add	r3, r2
 8001ef6:	49a7      	ldr	r1, [pc, #668]	@ (8002194 <BME280_calculate+0x3a8>)
 8001ef8:	461a      	mov	r2, r3
 8001efa:	460b      	mov	r3, r1
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	8013      	strh	r3, [r2, #0]
        itoa(fracPart, tempStr, 10);
 8001f00:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001f04:	220a      	movs	r2, #10
 8001f06:	4619      	mov	r1, r3
 8001f08:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001f0c:	f004 fe91 	bl	8006c32 <itoa>
        strcat((char *)message, tempStr);
 8001f10:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f004 fed7 	bl	8006ccc <strcat>
        strcat((char *)message, " C\r\n");
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe f963 	bl	80001ec <strlen>
 8001f26:	4603      	mov	r3, r0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	4a9a      	ldr	r2, [pc, #616]	@ (8002198 <BME280_calculate+0x3ac>)
 8001f30:	6810      	ldr	r0, [r2, #0]
 8001f32:	6018      	str	r0, [r3, #0]
 8001f34:	7912      	ldrb	r2, [r2, #4]
 8001f36:	711a      	strb	r2, [r3, #4]
        uartSendString(message);
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fada 	bl	80024f4 <uartSendString>

        // Send humidity data
        strcpy((char *)message, "Humidity: ");
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4a96      	ldr	r2, [pc, #600]	@ (800219c <BME280_calculate+0x3b0>)
 8001f44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f46:	c303      	stmia	r3!, {r0, r1}
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	0c12      	lsrs	r2, r2, #16
 8001f4e:	701a      	strb	r2, [r3, #0]
        char humStr[20];
        intPart = (int)hum;
 8001f50:	4b8c      	ldr	r3, [pc, #560]	@ (8002184 <BME280_calculate+0x398>)
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5a:	ee17 3a90 	vmov	r3, s15
 8001f5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        fracPart = (int)((hum - intPart) * 100);
 8001f62:	4b88      	ldr	r3, [pc, #544]	@ (8002184 <BME280_calculate+0x398>)
 8001f64:	ed93 7a00 	vldr	s14, [r3]
 8001f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f78:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002190 <BME280_calculate+0x3a4>
 8001f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        itoa(intPart, humStr, 10);
 8001f8c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f90:	220a      	movs	r2, #10
 8001f92:	4619      	mov	r1, r3
 8001f94:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001f98:	f004 fe4b 	bl	8006c32 <itoa>
        strcat((char *)message, humStr);
 8001f9c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f004 fe91 	bl	8006ccc <strcat>
        strcat((char *)message, ".");
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe f91d 	bl	80001ec <strlen>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	1d3b      	adds	r3, r7, #4
 8001fb8:	4413      	add	r3, r2
 8001fba:	4976      	ldr	r1, [pc, #472]	@ (8002194 <BME280_calculate+0x3a8>)
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	8013      	strh	r3, [r2, #0]
        itoa(fracPart, humStr, 10);
 8001fc4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fc8:	220a      	movs	r2, #10
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001fd0:	f004 fe2f 	bl	8006c32 <itoa>
        strcat((char *)message, humStr);
 8001fd4:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 fe75 	bl	8006ccc <strcat>
        strcat((char *)message, " %\r\n");
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe f901 	bl	80001ec <strlen>
 8001fea:	4603      	mov	r3, r0
 8001fec:	461a      	mov	r2, r3
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a6b      	ldr	r2, [pc, #428]	@ (80021a0 <BME280_calculate+0x3b4>)
 8001ff4:	6810      	ldr	r0, [r2, #0]
 8001ff6:	6018      	str	r0, [r3, #0]
 8001ff8:	7912      	ldrb	r2, [r2, #4]
 8001ffa:	711a      	strb	r2, [r3, #4]
        uartSendString(message);
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 fa78 	bl	80024f4 <uartSendString>

        // Prepare temperature string for LCD
        char lcdTempStr[20];
        itoa((int)temp, lcdTempStr, 10);
 8002004:	4b5c      	ldr	r3, [pc, #368]	@ (8002178 <BME280_calculate+0x38c>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002012:	220a      	movs	r2, #10
 8002014:	4619      	mov	r1, r3
 8002016:	ee17 0a90 	vmov	r0, s15
 800201a:	f004 fe0a 	bl	8006c32 <itoa>
        strcat(lcdTempStr, ".");
 800201e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe f8e2 	bl	80001ec <strlen>
 8002028:	4603      	mov	r3, r0
 800202a:	461a      	mov	r2, r3
 800202c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002030:	4413      	add	r3, r2
 8002032:	4958      	ldr	r1, [pc, #352]	@ (8002194 <BME280_calculate+0x3a8>)
 8002034:	461a      	mov	r2, r3
 8002036:	460b      	mov	r3, r1
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	8013      	strh	r3, [r2, #0]
        itoa((int)((temp - (int)temp) * 100), lcdTempStr + strlen(lcdTempStr), 10);
 800203c:	4b4e      	ldr	r3, [pc, #312]	@ (8002178 <BME280_calculate+0x38c>)
 800203e:	ed93 7a00 	vldr	s14, [r3]
 8002042:	4b4d      	ldr	r3, [pc, #308]	@ (8002178 <BME280_calculate+0x38c>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002054:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002190 <BME280_calculate+0x3a4>
 8002058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800205c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8002060:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe f8c1 	bl	80001ec <strlen>
 800206a:	4602      	mov	r2, r0
 800206c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002070:	4413      	add	r3, r2
 8002072:	220a      	movs	r2, #10
 8002074:	4619      	mov	r1, r3
 8002076:	ee18 0a10 	vmov	r0, s16
 800207a:	f004 fdda 	bl	8006c32 <itoa>

        // Prepare humidity string for LCD
        char lcdHumStr[20];
        itoa((int)hum, lcdHumStr, 10);
 800207e:	4b41      	ldr	r3, [pc, #260]	@ (8002184 <BME280_calculate+0x398>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002088:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800208c:	220a      	movs	r2, #10
 800208e:	4619      	mov	r1, r3
 8002090:	ee17 0a90 	vmov	r0, s15
 8002094:	f004 fdcd 	bl	8006c32 <itoa>
        strcat(lcdHumStr, ".");
 8002098:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe f8a5 	bl	80001ec <strlen>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020aa:	4413      	add	r3, r2
 80020ac:	4939      	ldr	r1, [pc, #228]	@ (8002194 <BME280_calculate+0x3a8>)
 80020ae:	461a      	mov	r2, r3
 80020b0:	460b      	mov	r3, r1
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	8013      	strh	r3, [r2, #0]
        itoa((int)((hum - (int)hum) * 100), lcdHumStr + strlen(lcdHumStr), 10);
 80020b6:	4b33      	ldr	r3, [pc, #204]	@ (8002184 <BME280_calculate+0x398>)
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	4b31      	ldr	r3, [pc, #196]	@ (8002184 <BME280_calculate+0x398>)
 80020be:	edd3 7a00 	vldr	s15, [r3]
 80020c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ce:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002190 <BME280_calculate+0x3a4>
 80020d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d6:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80020da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f884 	bl	80001ec <strlen>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ea:	4413      	add	r3, r2
 80020ec:	220a      	movs	r2, #10
 80020ee:	4619      	mov	r1, r3
 80020f0:	ee18 0a10 	vmov	r0, s16
 80020f4:	f004 fd9d 	bl	8006c32 <itoa>

        // Display temperature on the LCD
        PosCaracLLcd(9); // Assuming position 0 on the upper line
 80020f8:	2009      	movs	r0, #9
 80020fa:	f000 f9a0 	bl	800243e <PosCaracLLcd>
        SacaTextoLcd((uint8_t *)"T:");
 80020fe:	4829      	ldr	r0, [pc, #164]	@ (80021a4 <BME280_calculate+0x3b8>)
 8002100:	f000 f978 	bl	80023f4 <SacaTextoLcd>
        SacaTextoLcd((uint8_t *)lcdTempStr);
 8002104:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f973 	bl	80023f4 <SacaTextoLcd>

        HAL_Delay(500);
 800210e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002112:	f000 faf7 	bl	8002704 <HAL_Delay>

        // Display humidity on the LCD
        PosCaracLLcd(9); // Assuming position 0 on the lower line
 8002116:	2009      	movs	r0, #9
 8002118:	f000 f991 	bl	800243e <PosCaracLLcd>
        SacaTextoLcd((uint8_t *)"H:");
 800211c:	4822      	ldr	r0, [pc, #136]	@ (80021a8 <BME280_calculate+0x3bc>)
 800211e:	f000 f969 	bl	80023f4 <SacaTextoLcd>
        SacaTextoLcd((uint8_t *)lcdHumStr);
 8002122:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002126:	4618      	mov	r0, r3
 8002128:	f000 f964 	bl	80023f4 <SacaTextoLcd>

        HAL_Delay(500);
 800212c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002130:	f000 fae8 	bl	8002704 <HAL_Delay>
        temp = 0;
        hum = 0;
        uint8_t errorMessage[] = "Device not ready. Check device connection\r\n";
        uartSendString(errorMessage);
    }
}
 8002134:	e016      	b.n	8002164 <BME280_calculate+0x378>
        temp = 0;
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <BME280_calculate+0x38c>)
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
        hum = 0;
 800213e:	4b11      	ldr	r3, [pc, #68]	@ (8002184 <BME280_calculate+0x398>)
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
        uint8_t errorMessage[] = "Device not ready. Check device connection\r\n";
 8002146:	4b19      	ldr	r3, [pc, #100]	@ (80021ac <BME280_calculate+0x3c0>)
 8002148:	1d3c      	adds	r4, r7, #4
 800214a:	461d      	mov	r5, r3
 800214c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800214e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002154:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002158:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uartSendString(errorMessage);
 800215c:	1d3b      	adds	r3, r7, #4
 800215e:	4618      	mov	r0, r3
 8002160:	f000 f9c8 	bl	80024f4 <uartSendString>
}
 8002164:	bf00      	nop
 8002166:	3790      	adds	r7, #144	@ 0x90
 8002168:	46bd      	mov	sp, r7
 800216a:	ecbd 8b02 	vpop	{d8}
 800216e:	bdb0      	pop	{r4, r5, r7, pc}
 8002170:	20000838 	.word	0x20000838
 8002174:	40590000 	.word	0x40590000
 8002178:	20000840 	.word	0x20000840
 800217c:	2000083c 	.word	0x2000083c
 8002180:	40900000 	.word	0x40900000
 8002184:	20000844 	.word	0x20000844
 8002188:	08006d54 	.word	0x08006d54
 800218c:	08006d88 	.word	0x08006d88
 8002190:	42c80000 	.word	0x42c80000
 8002194:	08006d98 	.word	0x08006d98
 8002198:	08006d9c 	.word	0x08006d9c
 800219c:	08006da4 	.word	0x08006da4
 80021a0:	08006db0 	.word	0x08006db0
 80021a4:	08006db8 	.word	0x08006db8
 80021a8:	08006dbc 	.word	0x08006dbc
 80021ac:	08006dc0 	.word	0x08006dc0

080021b0 <TEST_SPI>:

#define TEST_DATA
#define TEST_BME280

void TEST_SPI()
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
    for (int i = 0; i <= 4; i++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	e008      	b.n	80021ce <TEST_SPI+0x1e>
    {
        BSP_LED_Toggle(LED2);
 80021bc:	2001      	movs	r0, #1
 80021be:	f000 fa15 	bl	80025ec <BSP_LED_Toggle>
        HAL_Delay(100);
 80021c2:	2064      	movs	r0, #100	@ 0x64
 80021c4:	f000 fa9e 	bl	8002704 <HAL_Delay>
    for (int i = 0; i <= 4; i++)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	3301      	adds	r3, #1
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	ddf3      	ble.n	80021bc <TEST_SPI+0xc>
    }

#ifdef TEST_DATA
    // Test 2 data transactions (MOSI -> SDA/SDI on bme280 board) to see them in the logic analyzer display.
    uint8_t dato = 0xAA;
 80021d4:	23aa      	movs	r3, #170	@ 0xaa
 80021d6:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2108      	movs	r1, #8
 80021dc:	4819      	ldr	r0, [pc, #100]	@ (8002244 <TEST_SPI+0x94>)
 80021de:	f001 f86f 	bl	80032c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &dato, sizeof(dato), HAL_MAX_DELAY);
 80021e2:	1cf9      	adds	r1, r7, #3
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021e8:	2201      	movs	r2, #1
 80021ea:	4817      	ldr	r0, [pc, #92]	@ (8002248 <TEST_SPI+0x98>)
 80021ec:	f003 f8b1 	bl	8005352 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80021f0:	2201      	movs	r2, #1
 80021f2:	2108      	movs	r1, #8
 80021f4:	4813      	ldr	r0, [pc, #76]	@ (8002244 <TEST_SPI+0x94>)
 80021f6:	f001 f863 	bl	80032c0 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80021fa:	2001      	movs	r0, #1
 80021fc:	f000 fa82 	bl	8002704 <HAL_Delay>

    uint8_t regAddress = 0xAB;
 8002200:	23ab      	movs	r3, #171	@ 0xab
 8002202:	70bb      	strb	r3, [r7, #2]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2108      	movs	r1, #8
 8002208:	480e      	ldr	r0, [pc, #56]	@ (8002244 <TEST_SPI+0x94>)
 800220a:	f001 f859 	bl	80032c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 800220e:	1cb9      	adds	r1, r7, #2
 8002210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002214:	2201      	movs	r2, #1
 8002216:	480c      	ldr	r0, [pc, #48]	@ (8002248 <TEST_SPI+0x98>)
 8002218:	f003 f89b 	bl	8005352 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800221c:	2201      	movs	r2, #1
 800221e:	2108      	movs	r1, #8
 8002220:	4808      	ldr	r0, [pc, #32]	@ (8002244 <TEST_SPI+0x94>)
 8002222:	f001 f84d 	bl	80032c0 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 8002226:	2001      	movs	r0, #1
 8002228:	f000 fa6c 	bl	8002704 <HAL_Delay>
#endif
#ifdef TEST_BME280
    // Test 1 data transactions to check chip ID and see it in the logic analyzer display.
    BME280_read();
 800222c:	f7ff fd90 	bl	8001d50 <BME280_read>
    HAL_Delay(100);
 8002230:	2064      	movs	r0, #100	@ 0x64
 8002232:	f000 fa67 	bl	8002704 <HAL_Delay>
    BME280_calculate();
 8002236:	f7ff fdd9 	bl	8001dec <BME280_calculate>

#endif
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40020400 	.word	0x40020400
 8002248:	200007bc 	.word	0x200007bc

0800224c <Init_Lcd>:
  * @version 1.0
  * @date 16/4/2023
*/


_Bool Init_Lcd(void){
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
   DelayLcd(DELAY20ms);
 8002252:	2014      	movs	r0, #20
 8002254:	f000 f840 	bl	80022d8 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL); // program hangs here
 8002258:	2100      	movs	r1, #0
 800225a:	2030      	movs	r0, #48	@ 0x30
 800225c:	f000 f8a6 	bl	80023ac <Envia4bitsLcd>

   for (int i = 0; i <= 3; i++)
 8002260:	2300      	movs	r3, #0
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	e009      	b.n	800227a <Init_Lcd+0x2e>
   {
	   BSP_LED_Toggle(LED1); // init LCD OK
 8002266:	2000      	movs	r0, #0
 8002268:	f000 f9c0 	bl	80025ec <BSP_LED_Toggle>
	   HAL_Delay(500);
 800226c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002270:	f000 fa48 	bl	8002704 <HAL_Delay>
   for (int i = 0; i <= 3; i++)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3301      	adds	r3, #1
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b03      	cmp	r3, #3
 800227e:	ddf2      	ble.n	8002266 <Init_Lcd+0x1a>
   }

   DelayLcd(DELAY10ms);
 8002280:	200a      	movs	r0, #10
 8002282:	f000 f829 	bl	80022d8 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8002286:	2100      	movs	r1, #0
 8002288:	2030      	movs	r0, #48	@ 0x30
 800228a:	f000 f88f 	bl	80023ac <Envia4bitsLcd>
   DelayLcd(DELAY1ms);
 800228e:	2001      	movs	r0, #1
 8002290:	f000 f822 	bl	80022d8 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8002294:	2100      	movs	r1, #0
 8002296:	2030      	movs	r0, #48	@ 0x30
 8002298:	f000 f888 	bl	80023ac <Envia4bitsLcd>
   Envia4bitsLcd(COMANDO_INI2,CONTROL);
 800229c:	2100      	movs	r1, #0
 800229e:	2020      	movs	r0, #32
 80022a0:	f000 f884 	bl	80023ac <Envia4bitsLcd>
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
 80022a4:	2300      	movs	r3, #0
 80022a6:	70fb      	strb	r3, [r7, #3]
 80022a8:	e008      	b.n	80022bc <Init_Lcd+0x70>
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	4a09      	ldr	r2, [pc, #36]	@ (80022d4 <Init_Lcd+0x88>)
 80022ae:	5cd3      	ldrb	r3, [r2, r3]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 f81c 	bl	80022ee <ControlLcd>
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	3301      	adds	r3, #1
 80022ba:	70fb      	strb	r3, [r7, #3]
 80022bc:	78fb      	ldrb	r3, [r7, #3]
 80022be:	2b05      	cmp	r3, #5
 80022c0:	d9f3      	bls.n	80022aa <Init_Lcd+0x5e>
   DelayLcd(DELAY2ms);
 80022c2:	2002      	movs	r0, #2
 80022c4:	f000 f808 	bl	80022d8 <DelayLcd>
   return LCD_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	08006e54 	.word	0x08006e54

080022d8 <DelayLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


static void DelayLcd(uint32_t demora){
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	  HAL_Delay(demora);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fa0f 	bl	8002704 <HAL_Delay>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <ControlLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


static void ControlLcd(uint8_t valor){
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	4603      	mov	r3, r0
 80022f6:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(valor,CONTROL);
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f000 f838 	bl	8002372 <Envia8bitsLcd>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <DatoLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void DatoLcd (uint8_t dato){
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	4603      	mov	r3, r0
 8002312:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato,DATOS);
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	2101      	movs	r1, #1
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f82a 	bl	8002372 <Envia8bitsLcd>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <DatoAsciiLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void DatoAsciiLcd (uint8_t dato){
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato+ '0',DATOS);
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	3330      	adds	r3, #48	@ 0x30
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f81a 	bl	8002372 <Envia8bitsLcd>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <DatoBCD>:
  * @author Ing. Pavelek Israel
  * @version 1.0
  * @date 16/4/2023
*/

void DatoBCD (uint8_t dato){
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]

	  DatoAsciiLcd((((dato)&0xf0)>>4));
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff ffe5 	bl	8002326 <DatoAsciiLcd>
	  DatoAsciiLcd(((dato)&0x0f));
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	b2db      	uxtb	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ffde 	bl	8002326 <DatoAsciiLcd>

}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <Envia8bitsLcd>:
  * @author Ing. Pavelek Israel
  * @version 1.0
  * @date 16/4/2023
*/

void Envia8bitsLcd (uint8_t valor,_Bool tipo){
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	460a      	mov	r2, r1
 800237c:	71fb      	strb	r3, [r7, #7]
 800237e:	4613      	mov	r3, r2
 8002380:	71bb      	strb	r3, [r7, #6]
	Envia4bitsLcd(valor&HIGH_NIBBLE,tipo); 		//me con quedo y envio los 4 bits más significaticos.
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	f023 030f 	bic.w	r3, r3, #15
 8002388:	b2db      	uxtb	r3, r3
 800238a:	79ba      	ldrb	r2, [r7, #6]
 800238c:	4611      	mov	r1, r2
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f80c 	bl	80023ac <Envia4bitsLcd>
	Envia4bitsLcd(valor<<LOW_NIBBLE,tipo);   	//me quedo y envio los 4 bits menos significativos.
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	011b      	lsls	r3, r3, #4
 8002398:	b2db      	uxtb	r3, r3
 800239a:	79ba      	ldrb	r2, [r7, #6]
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 f804 	bl	80023ac <Envia4bitsLcd>
}
 80023a4:	bf00      	nop
 80023a6:	3708      	adds	r7, #8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <Envia4bitsLcd>:
  * @author Ing. Pavelek Israel
  * @version 1.0
  * @date 16/4/2023
*/

static void Envia4bitsLcd (uint8_t valor,_Bool tipo){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	4603      	mov	r3, r0
 80023b4:	460a      	mov	r2, r1
 80023b6:	71fb      	strb	r3, [r7, #7]
 80023b8:	4613      	mov	r3, r2
 80023ba:	71bb      	strb	r3, [r7, #6]
	LCD_Write_Byte(valor+tipo+EN+BL);
 80023bc:	79ba      	ldrb	r2, [r7, #6]
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	4413      	add	r3, r2
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	330c      	adds	r3, #12
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f849 	bl	8002460 <LCD_Write_Byte>
	DelayLcd(DelayTime);
 80023ce:	2001      	movs	r0, #1
 80023d0:	f7ff ff82 	bl	80022d8 <DelayLcd>
	LCD_Write_Byte(valor+tipo+BL);
 80023d4:	79ba      	ldrb	r2, [r7, #6]
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	4413      	add	r3, r2
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	3308      	adds	r3, #8
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f83d 	bl	8002460 <LCD_Write_Byte>
	DelayLcd(DelayTime);
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7ff ff76 	bl	80022d8 <DelayLcd>
}
 80023ec:	bf00      	nop
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <SacaTextoLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void SacaTextoLcd (uint8_t *texto){
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	while(*texto)DatoLcd(*texto++);
 80023fc:	e006      	b.n	800240c <SacaTextoLcd+0x18>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	607a      	str	r2, [r7, #4]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff ff7f 	bl	800230a <DatoLcd>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1f4      	bne.n	80023fe <SacaTextoLcd+0xa>
}
 8002414:	bf00      	nop
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <PosCaracHLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void PosCaracHLcd(uint8_t posH){
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posH | LINEA1);
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800242e:	b2db      	uxtb	r3, r3
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5c 	bl	80022ee <ControlLcd>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <PosCaracLLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void PosCaracLLcd(uint8_t posL){
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posL | LINEA2);
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800244e:	b2db      	uxtb	r3, r3
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff ff4c 	bl	80022ee <ControlLcd>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
	...

08002460 <LCD_Write_Byte>:
  * @version 1.0
  * @date 16/4/2023
*/


void LCD_Write_Byte(uint8_t valor){
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af02      	add	r7, sp, #8
 8002466:	4603      	mov	r3, r0
 8002468:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit (&hi2c1,LCD_DIR<<1,&valor, sizeof(valor),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 800246a:	1dfa      	adds	r2, r7, #7
 800246c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2301      	movs	r3, #1
 8002474:	214e      	movs	r1, #78	@ 0x4e
 8002476:	4806      	ldr	r0, [pc, #24]	@ (8002490 <LCD_Write_Byte+0x30>)
 8002478:	f001 f89a 	bl	80035b0 <HAL_I2C_Master_Transmit>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <LCD_Write_Byte+0x26>
 8002482:	f7fe fe89 	bl	8001198 <Error_Handler>

}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000025c 	.word	0x2000025c

08002494 <uartInit>:
  * @param  None
  * @retval bool_t: returns true if initialization is successful, otherwise false
  */

bool_t uartInit(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  UartHandle.Instance        = USARTx;
 8002498:	4b13      	ldr	r3, [pc, #76]	@ (80024e8 <uartInit+0x54>)
 800249a:	4a14      	ldr	r2, [pc, #80]	@ (80024ec <uartInit+0x58>)
 800249c:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 9600;
 800249e:	4b12      	ldr	r3, [pc, #72]	@ (80024e8 <uartInit+0x54>)
 80024a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024a4:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <uartInit+0x54>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80024ac:	4b0e      	ldr	r3, [pc, #56]	@ (80024e8 <uartInit+0x54>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 80024b2:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <uartInit+0x54>)
 80024b4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80024b8:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80024ba:	4b0b      	ldr	r3, [pc, #44]	@ (80024e8 <uartInit+0x54>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80024c0:	4b09      	ldr	r3, [pc, #36]	@ (80024e8 <uartInit+0x54>)
 80024c2:	220c      	movs	r2, #12
 80024c4:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c6:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <uartInit+0x54>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80024cc:	4806      	ldr	r0, [pc, #24]	@ (80024e8 <uartInit+0x54>)
 80024ce:	f003 fc8d 	bl	8005dec <HAL_UART_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <uartInit+0x48>
  {
    /* Initialization Error */
   return false;
 80024d8:	2300      	movs	r3, #0
 80024da:	e003      	b.n	80024e4 <uartInit+0x50>
  }

  uartSendString((uint8_t*)"UART init OK -> baud rate configured = 9600 | stopbits = 1 | parity = odd.\r\n");
 80024dc:	4804      	ldr	r0, [pc, #16]	@ (80024f0 <uartInit+0x5c>)
 80024de:	f000 f809 	bl	80024f4 <uartSendString>

  return true;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	2000084c 	.word	0x2000084c
 80024ec:	40004800 	.word	0x40004800
 80024f0:	08006dec 	.word	0x08006dec

080024f4 <uartSendString>:
  * @brief  Send a null-terminated string via UART
  * @param  uint8_t * pstring: pointer to the null-terminated string
  * @retval None
  */
void uartSendString(uint8_t * pstring)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if(NULL != pstring && MAXbUFFER > strlen((char*)pstring))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d016      	beq.n	8002530 <uartSendString+0x3c>
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fd fe72 	bl	80001ec <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	2bff      	cmp	r3, #255	@ 0xff
 800250c:	d810      	bhi.n	8002530 <uartSendString+0x3c>
  {
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fd fe6c 	bl	80001ec <strlen>
 8002514:	4603      	mov	r3, r0
 8002516:	b29a      	uxth	r2, r3
 8002518:	f241 3388 	movw	r3, #5000	@ 0x1388
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4808      	ldr	r0, [pc, #32]	@ (8002540 <uartSendString+0x4c>)
 8002520:	f003 fcb4 	bl	8005e8c <HAL_UART_Transmit>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <uartSendString+0x42>
      Error_Handler();
 800252a:	f000 f80b 	bl	8002544 <Error_Handler>
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 800252e:	e002      	b.n	8002536 <uartSendString+0x42>
  }
  else
    Error_Handler();
 8002530:	f000 f808 	bl	8002544 <Error_Handler>
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	2000084c 	.word	0x2000084c

08002544 <Error_Handler>:
  * @brief  Handles errors by entering an infinite loop
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <Error_Handler+0x4>

0800254c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	@ 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10e      	bne.n	800257a <BSP_LED_Init+0x2e>
 800255c:	2300      	movs	r3, #0
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	4b1f      	ldr	r3, [pc, #124]	@ (80025e0 <BSP_LED_Init+0x94>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	4a1e      	ldr	r2, [pc, #120]	@ (80025e0 <BSP_LED_Init+0x94>)
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	6313      	str	r3, [r2, #48]	@ 0x30
 800256c:	4b1c      	ldr	r3, [pc, #112]	@ (80025e0 <BSP_LED_Init+0x94>)
 800256e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	e00d      	b.n	8002596 <BSP_LED_Init+0x4a>
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
 800257e:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <BSP_LED_Init+0x94>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <BSP_LED_Init+0x94>)
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	6313      	str	r3, [r2, #48]	@ 0x30
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <BSP_LED_Init+0x94>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <BSP_LED_Init+0x98>)
 800259a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800259e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a0:	2301      	movs	r3, #1
 80025a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80025a8:	2302      	movs	r3, #2
 80025aa:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4a0e      	ldr	r2, [pc, #56]	@ (80025e8 <BSP_LED_Init+0x9c>)
 80025b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b4:	f107 0214 	add.w	r2, r7, #20
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fcd4 	bl	8002f68 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <BSP_LED_Init+0x9c>)
 80025c4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	4a06      	ldr	r2, [pc, #24]	@ (80025e4 <BSP_LED_Init+0x98>)
 80025cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025d0:	2200      	movs	r2, #0
 80025d2:	4619      	mov	r1, r3
 80025d4:	f000 fe74 	bl	80032c0 <HAL_GPIO_WritePin>
}
 80025d8:	bf00      	nop
 80025da:	3728      	adds	r7, #40	@ 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40023800 	.word	0x40023800
 80025e4:	08006e5c 	.word	0x08006e5c
 80025e8:	20000004 	.word	0x20000004

080025ec <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4a07      	ldr	r2, [pc, #28]	@ (8002618 <BSP_LED_Toggle+0x2c>)
 80025fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4906      	ldr	r1, [pc, #24]	@ (800261c <BSP_LED_Toggle+0x30>)
 8002602:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002606:	4619      	mov	r1, r3
 8002608:	4610      	mov	r0, r2
 800260a:	f000 fe72 	bl	80032f2 <HAL_GPIO_TogglePin>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000004 	.word	0x20000004
 800261c:	08006e5c 	.word	0x08006e5c

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002624:	4b0e      	ldr	r3, [pc, #56]	@ (8002660 <HAL_Init+0x40>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a0d      	ldr	r2, [pc, #52]	@ (8002660 <HAL_Init+0x40>)
 800262a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800262e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002630:	4b0b      	ldr	r3, [pc, #44]	@ (8002660 <HAL_Init+0x40>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <HAL_Init+0x40>)
 8002636:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800263a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800263c:	4b08      	ldr	r3, [pc, #32]	@ (8002660 <HAL_Init+0x40>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a07      	ldr	r2, [pc, #28]	@ (8002660 <HAL_Init+0x40>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002648:	2003      	movs	r0, #3
 800264a:	f000 f931 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264e:	2000      	movs	r0, #0
 8002650:	f000 f808 	bl	8002664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002654:	f7fe fda6 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_InitTick+0x54>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_InitTick+0x58>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800267a:	fbb3 f3f1 	udiv	r3, r3, r1
 800267e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f93b 	bl	80028fe <HAL_SYSTICK_Config>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e00e      	b.n	80026b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d80a      	bhi.n	80026ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002698:	2200      	movs	r2, #0
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026a0:	f000 f911 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a4:	4a06      	ldr	r2, [pc, #24]	@ (80026c0 <HAL_InitTick+0x5c>)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e000      	b.n	80026b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000000 	.word	0x20000000
 80026bc:	20000014 	.word	0x20000014
 80026c0:	20000010 	.word	0x20000010

080026c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_IncTick+0x20>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_IncTick+0x24>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_IncTick+0x24>)
 80026d6:	6013      	str	r3, [r2, #0]
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	20000014 	.word	0x20000014
 80026e8:	20000894 	.word	0x20000894

080026ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  return uwTick;
 80026f0:	4b03      	ldr	r3, [pc, #12]	@ (8002700 <HAL_GetTick+0x14>)
 80026f2:	681b      	ldr	r3, [r3, #0]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000894 	.word	0x20000894

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff ffee 	bl	80026ec <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800271c:	d005      	beq.n	800272a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b0a      	ldr	r3, [pc, #40]	@ (8002748 <HAL_Delay+0x44>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4413      	add	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800272a:	bf00      	nop
 800272c:	f7ff ffde 	bl	80026ec <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8f7      	bhi.n	800272c <HAL_Delay+0x28>
  {
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000014 	.word	0x20000014

0800274c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002768:	4013      	ands	r3, r2
 800276a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002774:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002778:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800277c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277e:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <__NVIC_SetPriorityGrouping+0x44>)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	60d3      	str	r3, [r2, #12]
}
 8002784:	bf00      	nop
 8002786:	3714      	adds	r7, #20
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <__NVIC_GetPriorityGrouping+0x18>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	0a1b      	lsrs	r3, r3, #8
 800279e:	f003 0307 	and.w	r3, r3, #7
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	@ (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	@ (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	@ 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	@ 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff47 	bl	800274c <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff5c 	bl	8002794 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffb0 	bl	800286c <SysTick_Config>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e06c      	b.n	8002a04 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2223      	movs	r2, #35	@ 0x23
 8002938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fe fc59 	bl	80011f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	4b31      	ldr	r3, [pc, #196]	@ (8002a0c <HAL_ETH_Init+0xf4>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	4a30      	ldr	r2, [pc, #192]	@ (8002a0c <HAL_ETH_Init+0xf4>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002950:	6453      	str	r3, [r2, #68]	@ 0x44
 8002952:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <HAL_ETH_Init+0xf4>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800295e:	4b2c      	ldr	r3, [pc, #176]	@ (8002a10 <HAL_ETH_Init+0xf8>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	4a2b      	ldr	r2, [pc, #172]	@ (8002a10 <HAL_ETH_Init+0xf8>)
 8002964:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002968:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800296a:	4b29      	ldr	r3, [pc, #164]	@ (8002a10 <HAL_ETH_Init+0xf8>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	4927      	ldr	r1, [pc, #156]	@ (8002a10 <HAL_ETH_Init+0xf8>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002978:	4b25      	ldr	r3, [pc, #148]	@ (8002a10 <HAL_ETH_Init+0xf8>)
 800297a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6812      	ldr	r2, [r2, #0]
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002992:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002994:	f7ff feaa 	bl	80026ec <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800299a:	e011      	b.n	80029c0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800299c:	f7ff fea6 	bl	80026ec <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80029aa:	d909      	bls.n	80029c0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	22e0      	movs	r2, #224	@ 0xe0
 80029b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e021      	b.n	8002a04 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e4      	bne.n	800299c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f958 	bl	8002c88 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f9ff 	bl	8002ddc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa55 	bl	8002e8e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	461a      	mov	r2, r3
 80029ea:	2100      	movs	r1, #0
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f9bd 	bl	8002d6c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2210      	movs	r2, #16
 80029fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40013800 	.word	0x40013800

08002a14 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4b51      	ldr	r3, [pc, #324]	@ (8002b70 <ETH_SetMACConfig+0x15c>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	7c1b      	ldrb	r3, [r3, #16]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d102      	bne.n	8002a3c <ETH_SetMACConfig+0x28>
 8002a36:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002a3a:	e000      	b.n	8002a3e <ETH_SetMACConfig+0x2a>
 8002a3c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	7c5b      	ldrb	r3, [r3, #17]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <ETH_SetMACConfig+0x38>
 8002a46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002a4a:	e000      	b.n	8002a4e <ETH_SetMACConfig+0x3a>
 8002a4c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a4e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a54:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	7fdb      	ldrb	r3, [r3, #31]
 8002a5a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002a5c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002a62:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	7f92      	ldrb	r2, [r2, #30]
 8002a68:	2a00      	cmp	r2, #0
 8002a6a:	d102      	bne.n	8002a72 <ETH_SetMACConfig+0x5e>
 8002a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a70:	e000      	b.n	8002a74 <ETH_SetMACConfig+0x60>
 8002a72:	2200      	movs	r2, #0
                        macconf->Speed |
 8002a74:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	7f1b      	ldrb	r3, [r3, #28]
 8002a7a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002a7c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002a82:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	791b      	ldrb	r3, [r3, #4]
 8002a88:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002a8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002a92:	2a00      	cmp	r2, #0
 8002a94:	d102      	bne.n	8002a9c <ETH_SetMACConfig+0x88>
 8002a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9a:	e000      	b.n	8002a9e <ETH_SetMACConfig+0x8a>
 8002a9c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a9e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	7bdb      	ldrb	r3, [r3, #15]
 8002aa4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002aa6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002aac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002ab4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ace:	2001      	movs	r0, #1
 8002ad0:	f7ff fe18 	bl	8002704 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002aea:	4013      	ands	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002afa:	2a00      	cmp	r2, #0
 8002afc:	d101      	bne.n	8002b02 <ETH_SetMACConfig+0xee>
 8002afe:	2280      	movs	r2, #128	@ 0x80
 8002b00:	e000      	b.n	8002b04 <ETH_SetMACConfig+0xf0>
 8002b02:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b04:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b0a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002b12:	2a01      	cmp	r2, #1
 8002b14:	d101      	bne.n	8002b1a <ETH_SetMACConfig+0x106>
 8002b16:	2208      	movs	r2, #8
 8002b18:	e000      	b.n	8002b1c <ETH_SetMACConfig+0x108>
 8002b1a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b1c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002b24:	2a01      	cmp	r2, #1
 8002b26:	d101      	bne.n	8002b2c <ETH_SetMACConfig+0x118>
 8002b28:	2204      	movs	r2, #4
 8002b2a:	e000      	b.n	8002b2e <ETH_SetMACConfig+0x11a>
 8002b2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002b36:	2a01      	cmp	r2, #1
 8002b38:	d101      	bne.n	8002b3e <ETH_SetMACConfig+0x12a>
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	e000      	b.n	8002b40 <ETH_SetMACConfig+0x12c>
 8002b3e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b40:	4313      	orrs	r3, r2
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b58:	2001      	movs	r0, #1
 8002b5a:	f7ff fdd3 	bl	8002704 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	619a      	str	r2, [r3, #24]
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	ff20810f 	.word	0xff20810f

08002b74 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c84 <ETH_SetDMAConfig+0x110>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	7b1b      	ldrb	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d102      	bne.n	8002ba0 <ETH_SetDMAConfig+0x2c>
 8002b9a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b9e:	e000      	b.n	8002ba2 <ETH_SetDMAConfig+0x2e>
 8002ba0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	7b5b      	ldrb	r3, [r3, #13]
 8002ba6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002ba8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	7f52      	ldrb	r2, [r2, #29]
 8002bae:	2a00      	cmp	r2, #0
 8002bb0:	d102      	bne.n	8002bb8 <ETH_SetDMAConfig+0x44>
 8002bb2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002bb6:	e000      	b.n	8002bba <ETH_SetDMAConfig+0x46>
 8002bb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002bba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	7b9b      	ldrb	r3, [r3, #14]
 8002bc0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002bc2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002bc8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	7f1b      	ldrb	r3, [r3, #28]
 8002bce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002bd0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	7f9b      	ldrb	r3, [r3, #30]
 8002bd6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002bd8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002bde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002be6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002be8:	4313      	orrs	r3, r2
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7ff fd7a 	bl	8002704 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c18:	461a      	mov	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	791b      	ldrb	r3, [r3, #4]
 8002c22:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c28:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c2e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c34:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c3c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c3e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c44:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c46:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002c4c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c5a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f7ff fd4b 	bl	8002704 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6013      	str	r3, [r2, #0]
}
 8002c7c:	bf00      	nop
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	f8de3f23 	.word	0xf8de3f23

08002c88 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0a6      	sub	sp, #152	@ 0x98
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002c90:	2301      	movs	r3, #1
 8002c92:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002cea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002cee:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002cf0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002cfc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002d00:	4619      	mov	r1, r3
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7ff fe86 	bl	8002a14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d10:	2301      	movs	r3, #1
 8002d12:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d34:	2301      	movs	r3, #1
 8002d36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d38:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d3c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002d42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002d58:	f107 0308 	add.w	r3, r7, #8
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ff08 	bl	8002b74 <ETH_SetDMAConfig>
}
 8002d64:	bf00      	nop
 8002d66:	3798      	adds	r7, #152	@ 0x98
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b087      	sub	sp, #28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3305      	adds	r3, #5
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	3204      	adds	r2, #4
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002d8a:	68ba      	ldr	r2, [r7, #8]
 8002d8c:	4b11      	ldr	r3, [pc, #68]	@ (8002dd4 <ETH_MACAddressConfig+0x68>)
 8002d8e:	4413      	add	r3, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3303      	adds	r3, #3
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	061a      	lsls	r2, r3, #24
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3302      	adds	r3, #2
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	041b      	lsls	r3, r3, #16
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3301      	adds	r3, #1
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	4313      	orrs	r3, r2
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	7812      	ldrb	r2, [r2, #0]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <ETH_MACAddressConfig+0x6c>)
 8002dbe:	4413      	add	r3, r2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6013      	str	r3, [r2, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	371c      	adds	r7, #28
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40028040 	.word	0x40028040
 8002dd8:	40028044 	.word	0x40028044

08002ddc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e03e      	b.n	8002e68 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68d9      	ldr	r1, [r3, #12]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2200      	movs	r2, #0
 8002e12:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	3206      	adds	r2, #6
 8002e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d80c      	bhi.n	8002e4c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68d9      	ldr	r1, [r3, #12]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	461a      	mov	r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	e004      	b.n	8002e56 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	461a      	mov	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d9bd      	bls.n	8002dea <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68da      	ldr	r2, [r3, #12]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e80:	611a      	str	r2, [r3, #16]
}
 8002e82:	bf00      	nop
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	e046      	b.n	8002f2a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6919      	ldr	r1, [r3, #16]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002ed8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002ee0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	3212      	adds	r2, #18
 8002ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d80c      	bhi.n	8002f1a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6919      	ldr	r1, [r3, #16]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	440b      	add	r3, r1
 8002f12:	461a      	mov	r2, r3
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	e004      	b.n	8002f24 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	3301      	adds	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d9b5      	bls.n	8002e9c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f5a:	60da      	str	r2, [r3, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e177      	b.n	8003274 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f84:	2201      	movs	r2, #1
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4013      	ands	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	f040 8166 	bne.w	800326e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d005      	beq.n	8002fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d130      	bne.n	800301c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 0201 	and.w	r2, r3, #1
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	4313      	orrs	r3, r2
 8003014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	2b03      	cmp	r3, #3
 8003026:	d017      	beq.n	8003058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 0303 	and.w	r3, r3, #3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d123      	bne.n	80030ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	08da      	lsrs	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3208      	adds	r2, #8
 800306c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	220f      	movs	r2, #15
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	691a      	ldr	r2, [r3, #16]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	08da      	lsrs	r2, r3, #3
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3208      	adds	r2, #8
 80030a6:	69b9      	ldr	r1, [r7, #24]
 80030a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	2203      	movs	r2, #3
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 0203 	and.w	r2, r3, #3
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80c0 	beq.w	800326e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b66      	ldr	r3, [pc, #408]	@ (800328c <HAL_GPIO_Init+0x324>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	4a65      	ldr	r2, [pc, #404]	@ (800328c <HAL_GPIO_Init+0x324>)
 80030f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030fe:	4b63      	ldr	r3, [pc, #396]	@ (800328c <HAL_GPIO_Init+0x324>)
 8003100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310a:	4a61      	ldr	r2, [pc, #388]	@ (8003290 <HAL_GPIO_Init+0x328>)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	089b      	lsrs	r3, r3, #2
 8003110:	3302      	adds	r3, #2
 8003112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	220f      	movs	r2, #15
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a58      	ldr	r2, [pc, #352]	@ (8003294 <HAL_GPIO_Init+0x32c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d037      	beq.n	80031a6 <HAL_GPIO_Init+0x23e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a57      	ldr	r2, [pc, #348]	@ (8003298 <HAL_GPIO_Init+0x330>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d031      	beq.n	80031a2 <HAL_GPIO_Init+0x23a>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a56      	ldr	r2, [pc, #344]	@ (800329c <HAL_GPIO_Init+0x334>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d02b      	beq.n	800319e <HAL_GPIO_Init+0x236>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a55      	ldr	r2, [pc, #340]	@ (80032a0 <HAL_GPIO_Init+0x338>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d025      	beq.n	800319a <HAL_GPIO_Init+0x232>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a54      	ldr	r2, [pc, #336]	@ (80032a4 <HAL_GPIO_Init+0x33c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01f      	beq.n	8003196 <HAL_GPIO_Init+0x22e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a53      	ldr	r2, [pc, #332]	@ (80032a8 <HAL_GPIO_Init+0x340>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d019      	beq.n	8003192 <HAL_GPIO_Init+0x22a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_GPIO_Init+0x344>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <HAL_GPIO_Init+0x226>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a51      	ldr	r2, [pc, #324]	@ (80032b0 <HAL_GPIO_Init+0x348>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00d      	beq.n	800318a <HAL_GPIO_Init+0x222>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a50      	ldr	r2, [pc, #320]	@ (80032b4 <HAL_GPIO_Init+0x34c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d007      	beq.n	8003186 <HAL_GPIO_Init+0x21e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a4f      	ldr	r2, [pc, #316]	@ (80032b8 <HAL_GPIO_Init+0x350>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d101      	bne.n	8003182 <HAL_GPIO_Init+0x21a>
 800317e:	2309      	movs	r3, #9
 8003180:	e012      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003182:	230a      	movs	r3, #10
 8003184:	e010      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003186:	2308      	movs	r3, #8
 8003188:	e00e      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800318a:	2307      	movs	r3, #7
 800318c:	e00c      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800318e:	2306      	movs	r3, #6
 8003190:	e00a      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003192:	2305      	movs	r3, #5
 8003194:	e008      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 8003196:	2304      	movs	r3, #4
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800319a:	2303      	movs	r3, #3
 800319c:	e004      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 800319e:	2302      	movs	r3, #2
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_GPIO_Init+0x240>
 80031a6:	2300      	movs	r3, #0
 80031a8:	69fa      	ldr	r2, [r7, #28]
 80031aa:	f002 0203 	and.w	r2, r2, #3
 80031ae:	0092      	lsls	r2, r2, #2
 80031b0:	4093      	lsls	r3, r2
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031b8:	4935      	ldr	r1, [pc, #212]	@ (8003290 <HAL_GPIO_Init+0x328>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	089b      	lsrs	r3, r3, #2
 80031be:	3302      	adds	r3, #2
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c6:	4b3d      	ldr	r3, [pc, #244]	@ (80032bc <HAL_GPIO_Init+0x354>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ea:	4a34      	ldr	r2, [pc, #208]	@ (80032bc <HAL_GPIO_Init+0x354>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f0:	4b32      	ldr	r3, [pc, #200]	@ (80032bc <HAL_GPIO_Init+0x354>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003214:	4a29      	ldr	r2, [pc, #164]	@ (80032bc <HAL_GPIO_Init+0x354>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321a:	4b28      	ldr	r3, [pc, #160]	@ (80032bc <HAL_GPIO_Init+0x354>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800323e:	4a1f      	ldr	r2, [pc, #124]	@ (80032bc <HAL_GPIO_Init+0x354>)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003244:	4b1d      	ldr	r3, [pc, #116]	@ (80032bc <HAL_GPIO_Init+0x354>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003268:	4a14      	ldr	r2, [pc, #80]	@ (80032bc <HAL_GPIO_Init+0x354>)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3301      	adds	r3, #1
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	2b0f      	cmp	r3, #15
 8003278:	f67f ae84 	bls.w	8002f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3724      	adds	r7, #36	@ 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	40013800 	.word	0x40013800
 8003294:	40020000 	.word	0x40020000
 8003298:	40020400 	.word	0x40020400
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40021400 	.word	0x40021400
 80032ac:	40021800 	.word	0x40021800
 80032b0:	40021c00 	.word	0x40021c00
 80032b4:	40022000 	.word	0x40022000
 80032b8:	40022400 	.word	0x40022400
 80032bc:	40013c00 	.word	0x40013c00

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	041a      	lsls	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003304:	887a      	ldrh	r2, [r7, #2]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4013      	ands	r3, r2
 800330a:	041a      	lsls	r2, r3, #16
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	43d9      	mvns	r1, r3
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	400b      	ands	r3, r1
 8003314:	431a      	orrs	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	619a      	str	r2, [r3, #24]
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e12b      	b.n	8003592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe f816 	bl	8001380 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	@ 0x24
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800337a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800338a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800338c:	f001 fa64 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8003390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4a81      	ldr	r2, [pc, #516]	@ (800359c <HAL_I2C_Init+0x274>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d807      	bhi.n	80033ac <HAL_I2C_Init+0x84>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4a80      	ldr	r2, [pc, #512]	@ (80035a0 <HAL_I2C_Init+0x278>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bf94      	ite	ls
 80033a4:	2301      	movls	r3, #1
 80033a6:	2300      	movhi	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e006      	b.n	80033ba <HAL_I2C_Init+0x92>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	4a7d      	ldr	r2, [pc, #500]	@ (80035a4 <HAL_I2C_Init+0x27c>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	bf94      	ite	ls
 80033b4:	2301      	movls	r3, #1
 80033b6:	2300      	movhi	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0e7      	b.n	8003592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	4a78      	ldr	r2, [pc, #480]	@ (80035a8 <HAL_I2C_Init+0x280>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	0c9b      	lsrs	r3, r3, #18
 80033cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4a6a      	ldr	r2, [pc, #424]	@ (800359c <HAL_I2C_Init+0x274>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d802      	bhi.n	80033fc <HAL_I2C_Init+0xd4>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	3301      	adds	r3, #1
 80033fa:	e009      	b.n	8003410 <HAL_I2C_Init+0xe8>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003402:	fb02 f303 	mul.w	r3, r2, r3
 8003406:	4a69      	ldr	r2, [pc, #420]	@ (80035ac <HAL_I2C_Init+0x284>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	3301      	adds	r3, #1
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	430b      	orrs	r3, r1
 8003416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	495c      	ldr	r1, [pc, #368]	@ (800359c <HAL_I2C_Init+0x274>)
 800342c:	428b      	cmp	r3, r1
 800342e:	d819      	bhi.n	8003464 <HAL_I2C_Init+0x13c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e59      	subs	r1, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fbb1 f3f3 	udiv	r3, r1, r3
 800343e:	1c59      	adds	r1, r3, #1
 8003440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003444:	400b      	ands	r3, r1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_I2C_Init+0x138>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e59      	subs	r1, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fbb1 f3f3 	udiv	r3, r1, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345e:	e051      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 8003460:	2304      	movs	r3, #4
 8003462:	e04f      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d111      	bne.n	8003490 <HAL_I2C_Init+0x168>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1e58      	subs	r0, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6859      	ldr	r1, [r3, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	440b      	add	r3, r1
 800347a:	fbb0 f3f3 	udiv	r3, r0, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	e012      	b.n	80034b6 <HAL_I2C_Init+0x18e>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	1e58      	subs	r0, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6859      	ldr	r1, [r3, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	0099      	lsls	r1, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <HAL_I2C_Init+0x196>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e022      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10e      	bne.n	80034e4 <HAL_I2C_Init+0x1bc>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	1e58      	subs	r0, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	440b      	add	r3, r1
 80034d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034e2:	e00f      	b.n	8003504 <HAL_I2C_Init+0x1dc>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	6809      	ldr	r1, [r1, #0]
 8003508:	4313      	orrs	r3, r2
 800350a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6911      	ldr	r1, [r2, #16]
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68d2      	ldr	r2, [r2, #12]
 800353e:	4311      	orrs	r1, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	430b      	orrs	r3, r1
 8003546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	430a      	orrs	r2, r1
 8003562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	000186a0 	.word	0x000186a0
 80035a0:	001e847f 	.word	0x001e847f
 80035a4:	003d08ff 	.word	0x003d08ff
 80035a8:	431bde83 	.word	0x431bde83
 80035ac:	10624dd3 	.word	0x10624dd3

080035b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af02      	add	r7, sp, #8
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	461a      	mov	r2, r3
 80035bc:	460b      	mov	r3, r1
 80035be:	817b      	strh	r3, [r7, #10]
 80035c0:	4613      	mov	r3, r2
 80035c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035c4:	f7ff f892 	bl	80026ec <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b20      	cmp	r3, #32
 80035d4:	f040 80e0 	bne.w	8003798 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	2319      	movs	r3, #25
 80035de:	2201      	movs	r2, #1
 80035e0:	4970      	ldr	r1, [pc, #448]	@ (80037a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f964 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
 80035f0:	e0d3      	b.n	800379a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d101      	bne.n	8003600 <HAL_I2C_Master_Transmit+0x50>
 80035fc:	2302      	movs	r3, #2
 80035fe:	e0cc      	b.n	800379a <HAL_I2C_Master_Transmit+0x1ea>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	d007      	beq.n	8003626 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0201 	orr.w	r2, r2, #1
 8003624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2221      	movs	r2, #33	@ 0x21
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2210      	movs	r2, #16
 8003642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	893a      	ldrh	r2, [r7, #8]
 8003656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4a50      	ldr	r2, [pc, #320]	@ (80037a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003666:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003668:	8979      	ldrh	r1, [r7, #10]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	6a3a      	ldr	r2, [r7, #32]
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f000 f89c 	bl	80037ac <I2C_MasterRequestWrite>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e08d      	b.n	800379a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003694:	e066      	b.n	8003764 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	6a39      	ldr	r1, [r7, #32]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fa22 	bl	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00d      	beq.n	80036c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d107      	bne.n	80036be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06b      	b.n	800379a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ea:	3b01      	subs	r3, #1
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d11b      	bne.n	8003738 <HAL_I2C_Master_Transmit+0x188>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003704:	2b00      	cmp	r3, #0
 8003706:	d017      	beq.n	8003738 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370c:	781a      	ldrb	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	6a39      	ldr	r1, [r7, #32]
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 fa19 	bl	8003b74 <I2C_WaitOnBTFFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00d      	beq.n	8003764 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	2b04      	cmp	r3, #4
 800374e:	d107      	bne.n	8003760 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e01a      	b.n	800379a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d194      	bne.n	8003696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800377a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	e000      	b.n	800379a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003798:	2302      	movs	r3, #2
  }
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	00100002 	.word	0x00100002
 80037a8:	ffff0000 	.word	0xffff0000

080037ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	460b      	mov	r3, r1
 80037ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d006      	beq.n	80037d6 <I2C_MasterRequestWrite+0x2a>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d003      	beq.n	80037d6 <I2C_MasterRequestWrite+0x2a>
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80037d4:	d108      	bne.n	80037e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	e00b      	b.n	8003800 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ec:	2b12      	cmp	r3, #18
 80037ee:	d107      	bne.n	8003800 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f84f 	bl	80038b0 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00d      	beq.n	8003834 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003826:	d103      	bne.n	8003830 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800382e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e035      	b.n	80038a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800383c:	d108      	bne.n	8003850 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800383e:	897b      	ldrh	r3, [r7, #10]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800384c:	611a      	str	r2, [r3, #16]
 800384e:	e01b      	b.n	8003888 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003850:	897b      	ldrh	r3, [r7, #10]
 8003852:	11db      	asrs	r3, r3, #7
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 0306 	and.w	r3, r3, #6
 800385a:	b2db      	uxtb	r3, r3
 800385c:	f063 030f 	orn	r3, r3, #15
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	490e      	ldr	r1, [pc, #56]	@ (80038a8 <I2C_MasterRequestWrite+0xfc>)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f898 	bl	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e010      	b.n	80038a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	b2da      	uxtb	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4907      	ldr	r1, [pc, #28]	@ (80038ac <I2C_MasterRequestWrite+0x100>)
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 f888 	bl	80039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	00010008 	.word	0x00010008
 80038ac:	00010002 	.word	0x00010002

080038b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4613      	mov	r3, r2
 80038be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038c0:	e048      	b.n	8003954 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038c8:	d044      	beq.n	8003954 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ca:	f7fe ff0f 	bl	80026ec <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d302      	bcc.n	80038e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d139      	bne.n	8003954 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d10d      	bne.n	8003906 <I2C_WaitOnFlagUntilTimeout+0x56>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	43da      	mvns	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4013      	ands	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	e00c      	b.n	8003920 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	43da      	mvns	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	429a      	cmp	r2, r3
 8003924:	d116      	bne.n	8003954 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e023      	b.n	800399c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	0c1b      	lsrs	r3, r3, #16
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b01      	cmp	r3, #1
 800395c:	d10d      	bne.n	800397a <I2C_WaitOnFlagUntilTimeout+0xca>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	43da      	mvns	r2, r3
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	4013      	ands	r3, r2
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	e00c      	b.n	8003994 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	43da      	mvns	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	4013      	ands	r3, r2
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	bf0c      	ite	eq
 800398c:	2301      	moveq	r3, #1
 800398e:	2300      	movne	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	429a      	cmp	r2, r3
 8003998:	d093      	beq.n	80038c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039b2:	e071      	b.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c2:	d123      	bne.n	8003a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f8:	f043 0204 	orr.w	r2, r3, #4
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e067      	b.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a12:	d041      	beq.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a14:	f7fe fe6a 	bl	80026ec <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d302      	bcc.n	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d136      	bne.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d10c      	bne.n	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	e00b      	b.n	8003a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	43da      	mvns	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf14      	ite	ne
 8003a60:	2301      	movne	r3, #1
 8003a62:	2300      	moveq	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e021      	b.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	0c1b      	lsrs	r3, r3, #16
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d10c      	bne.n	8003abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e00b      	b.n	8003ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf14      	ite	ne
 8003ace:	2301      	movne	r3, #1
 8003ad0:	2300      	moveq	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f47f af6d 	bne.w	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af0:	e034      	b.n	8003b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f886 	bl	8003c04 <I2C_IsAcknowledgeFailed>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e034      	b.n	8003b6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b08:	d028      	beq.n	8003b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fe fdef 	bl	80026ec <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11d      	bne.n	8003b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b80      	cmp	r3, #128	@ 0x80
 8003b2c:	d016      	beq.n	8003b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	f043 0220 	orr.w	r2, r3, #32
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e007      	b.n	8003b6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b66:	2b80      	cmp	r3, #128	@ 0x80
 8003b68:	d1c3      	bne.n	8003af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b80:	e034      	b.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f83e 	bl	8003c04 <I2C_IsAcknowledgeFailed>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e034      	b.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b98:	d028      	beq.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fe fda7 	bl	80026ec <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11d      	bne.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d016      	beq.n	8003bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd8:	f043 0220 	orr.w	r2, r3, #32
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e007      	b.n	8003bfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b04      	cmp	r3, #4
 8003bf8:	d1c3      	bne.n	8003b82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1a:	d11b      	bne.n	8003c54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	f043 0204 	orr.w	r2, r3, #4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e000      	b.n	8003c56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d129      	bne.n	8003ccc <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2224      	movs	r2, #36	@ 0x24
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0210 	bic.w	r2, r2, #16
 8003c9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e000      	b.n	8003cce <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ccc:	2302      	movs	r3, #2
  }
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b085      	sub	sp, #20
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
 8003ce2:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d12a      	bne.n	8003d4a <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	@ 0x24
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	f023 030f 	bic.w	r3, r3, #15
 8003d1a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	89fb      	ldrh	r3, [r7, #14]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	89fa      	ldrh	r2, [r7, #14]
 8003d2c:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e000      	b.n	8003d4c <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
  }
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e101      	b.n	8003f6e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d106      	bne.n	8003d8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7fd fc1d 	bl	80015c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d98:	d102      	bne.n	8003da0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 fc91 	bl	80066cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	7c1a      	ldrb	r2, [r3, #16]
 8003db2:	f88d 2000 	strb.w	r2, [sp]
 8003db6:	3304      	adds	r3, #4
 8003db8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003dba:	f002 fc23 	bl	8006604 <USB_CoreInit>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0ce      	b.n	8003f6e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f002 fc89 	bl	80066ee <USB_SetCurrentMode>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2202      	movs	r2, #2
 8003de6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e0bf      	b.n	8003f6e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
 8003df2:	e04a      	b.n	8003e8a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3315      	adds	r3, #21
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3314      	adds	r3, #20
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	7bfb      	ldrb	r3, [r7, #15]
 8003e20:	b298      	uxth	r0, r3
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	332e      	adds	r3, #46	@ 0x2e
 8003e30:	4602      	mov	r2, r0
 8003e32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3318      	adds	r3, #24
 8003e44:	2200      	movs	r2, #0
 8003e46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e48:	7bfa      	ldrb	r2, [r7, #15]
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	331c      	adds	r3, #28
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e5c:	7bfa      	ldrb	r2, [r7, #15]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3320      	adds	r3, #32
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	3324      	adds	r3, #36	@ 0x24
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	3301      	adds	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	791b      	ldrb	r3, [r3, #4]
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d3af      	bcc.n	8003df4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e94:	2300      	movs	r3, #0
 8003e96:	73fb      	strb	r3, [r7, #15]
 8003e98:	e044      	b.n	8003f24 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e9a:	7bfa      	ldrb	r2, [r7, #15]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	4413      	add	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003edc:	7bfa      	ldrb	r2, [r7, #15]
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ef2:	7bfa      	ldrb	r2, [r7, #15]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003f08:	7bfa      	ldrb	r2, [r7, #15]
 8003f0a:	6879      	ldr	r1, [r7, #4]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3301      	adds	r3, #1
 8003f22:	73fb      	strb	r3, [r7, #15]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	791b      	ldrb	r3, [r3, #4]
 8003f28:	7bfa      	ldrb	r2, [r7, #15]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d3b5      	bcc.n	8003e9a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7c1a      	ldrb	r2, [r3, #16]
 8003f36:	f88d 2000 	strb.w	r2, [sp]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f3e:	f002 fc23 	bl	8006788 <USB_DevInit>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e00c      	b.n	8003f6e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f002 fdeb 	bl	8006b42 <USB_DevDisconnect>

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e267      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d075      	beq.n	8004082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f96:	4b88      	ldr	r3, [pc, #544]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d00c      	beq.n	8003fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa2:	4b85      	ldr	r3, [pc, #532]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d112      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fae:	4b82      	ldr	r3, [pc, #520]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d05b      	beq.n	8004080 <HAL_RCC_OscConfig+0x108>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d157      	bne.n	8004080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e242      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fdc:	d106      	bne.n	8003fec <HAL_RCC_OscConfig+0x74>
 8003fde:	4b76      	ldr	r3, [pc, #472]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e01d      	b.n	8004028 <HAL_RCC_OscConfig+0xb0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x98>
 8003ff6:	4b70      	ldr	r3, [pc, #448]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6f      	ldr	r2, [pc, #444]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b6d      	ldr	r3, [pc, #436]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6c      	ldr	r2, [pc, #432]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0xb0>
 8004010:	4b69      	ldr	r3, [pc, #420]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a68      	ldr	r2, [pc, #416]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b66      	ldr	r3, [pc, #408]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a65      	ldr	r2, [pc, #404]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d013      	beq.n	8004058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe fb5c 	bl	80026ec <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe fb58 	bl	80026ec <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	@ 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e207      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b5b      	ldr	r3, [pc, #364]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0xc0>
 8004056:	e014      	b.n	8004082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe fb48 	bl	80026ec <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004060:	f7fe fb44 	bl	80026ec <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	@ 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e1f3      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004072:	4b51      	ldr	r3, [pc, #324]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0xe8>
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d063      	beq.n	8004156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408e:	4b4a      	ldr	r3, [pc, #296]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409a:	4b47      	ldr	r3, [pc, #284]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d11c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a6:	4b44      	ldr	r3, [pc, #272]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d116      	bne.n	80040e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	4b41      	ldr	r3, [pc, #260]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_RCC_OscConfig+0x152>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e1c7      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ca:	4b3b      	ldr	r3, [pc, #236]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4937      	ldr	r1, [pc, #220]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040de:	e03a      	b.n	8004156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e8:	4b34      	ldr	r3, [pc, #208]	@ (80041bc <HAL_RCC_OscConfig+0x244>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fe fafd 	bl	80026ec <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fe faf9 	bl	80026ec <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e1a8      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	4b2b      	ldr	r3, [pc, #172]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004114:	4b28      	ldr	r3, [pc, #160]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4925      	ldr	r1, [pc, #148]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
 8004128:	e015      	b.n	8004156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412a:	4b24      	ldr	r3, [pc, #144]	@ (80041bc <HAL_RCC_OscConfig+0x244>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe fadc 	bl	80026ec <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004138:	f7fe fad8 	bl	80026ec <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e187      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	4b1b      	ldr	r3, [pc, #108]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d036      	beq.n	80041d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416a:	4b15      	ldr	r3, [pc, #84]	@ (80041c0 <HAL_RCC_OscConfig+0x248>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fe fabc 	bl	80026ec <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004178:	f7fe fab8 	bl	80026ec <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e167      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418a:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <HAL_RCC_OscConfig+0x240>)
 800418c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x200>
 8004196:	e01b      	b.n	80041d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004198:	4b09      	ldr	r3, [pc, #36]	@ (80041c0 <HAL_RCC_OscConfig+0x248>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419e:	f7fe faa5 	bl	80026ec <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a4:	e00e      	b.n	80041c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a6:	f7fe faa1 	bl	80026ec <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d907      	bls.n	80041c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e150      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
 80041b8:	40023800 	.word	0x40023800
 80041bc:	42470000 	.word	0x42470000
 80041c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	4b88      	ldr	r3, [pc, #544]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 80041c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ea      	bne.n	80041a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8097 	beq.w	800430c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e2:	4b81      	ldr	r3, [pc, #516]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	4b7d      	ldr	r3, [pc, #500]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	4a7c      	ldr	r2, [pc, #496]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041fe:	4b7a      	ldr	r3, [pc, #488]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420e:	4b77      	ldr	r3, [pc, #476]	@ (80043ec <HAL_RCC_OscConfig+0x474>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d118      	bne.n	800424c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421a:	4b74      	ldr	r3, [pc, #464]	@ (80043ec <HAL_RCC_OscConfig+0x474>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a73      	ldr	r2, [pc, #460]	@ (80043ec <HAL_RCC_OscConfig+0x474>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004226:	f7fe fa61 	bl	80026ec <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fe fa5d 	bl	80026ec <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e10c      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	4b6a      	ldr	r3, [pc, #424]	@ (80043ec <HAL_RCC_OscConfig+0x474>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x2ea>
 8004254:	4b64      	ldr	r3, [pc, #400]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004258:	4a63      	ldr	r2, [pc, #396]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004260:	e01c      	b.n	800429c <HAL_RCC_OscConfig+0x324>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b05      	cmp	r3, #5
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x30c>
 800426a:	4b5f      	ldr	r3, [pc, #380]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800426e:	4a5e      	ldr	r2, [pc, #376]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004270:	f043 0304 	orr.w	r3, r3, #4
 8004274:	6713      	str	r3, [r2, #112]	@ 0x70
 8004276:	4b5c      	ldr	r3, [pc, #368]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800427a:	4a5b      	ldr	r2, [pc, #364]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6713      	str	r3, [r2, #112]	@ 0x70
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0x324>
 8004284:	4b58      	ldr	r3, [pc, #352]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004288:	4a57      	ldr	r2, [pc, #348]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004290:	4b55      	ldr	r3, [pc, #340]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004294:	4a54      	ldr	r2, [pc, #336]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 0304 	bic.w	r3, r3, #4
 800429a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fe fa22 	bl	80026ec <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fe fa1e 	bl	80026ec <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0cb      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c2:	4b49      	ldr	r3, [pc, #292]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ee      	beq.n	80042ac <HAL_RCC_OscConfig+0x334>
 80042ce:	e014      	b.n	80042fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d0:	f7fe fa0c 	bl	80026ec <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7fe fa08 	bl	80026ec <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e0b5      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ee:	4b3e      	ldr	r3, [pc, #248]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ee      	bne.n	80042d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d105      	bne.n	800430c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004300:	4b39      	ldr	r3, [pc, #228]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	4a38      	ldr	r2, [pc, #224]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800430a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80a1 	beq.w	8004458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004316:	4b34      	ldr	r3, [pc, #208]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b08      	cmp	r3, #8
 8004320:	d05c      	beq.n	80043dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d141      	bne.n	80043ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b31      	ldr	r3, [pc, #196]	@ (80043f0 <HAL_RCC_OscConfig+0x478>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe f9dc 	bl	80026ec <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004338:	f7fe f9d8 	bl	80026ec <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e087      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	4b27      	ldr	r3, [pc, #156]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	019b      	lsls	r3, r3, #6
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	3b01      	subs	r3, #1
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	491b      	ldr	r1, [pc, #108]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004380:	4b1b      	ldr	r3, [pc, #108]	@ (80043f0 <HAL_RCC_OscConfig+0x478>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7fe f9b1 	bl	80026ec <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438e:	f7fe f9ad 	bl	80026ec <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e05c      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a0:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x416>
 80043ac:	e054      	b.n	8004458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <HAL_RCC_OscConfig+0x478>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fe f99a 	bl	80026ec <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fe f996 	bl	80026ec <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e045      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ce:	4b06      	ldr	r3, [pc, #24]	@ (80043e8 <HAL_RCC_OscConfig+0x470>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x444>
 80043da:	e03d      	b.n	8004458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e038      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40007000 	.word	0x40007000
 80043f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004464 <HAL_RCC_OscConfig+0x4ec>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d028      	beq.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d121      	bne.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d11a      	bne.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800442a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800442c:	4293      	cmp	r3, r2
 800442e:	d111      	bne.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	3b01      	subs	r3, #1
 800443e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d107      	bne.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800444e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800

08004468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0cc      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b68      	ldr	r3, [pc, #416]	@ (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d90c      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b65      	ldr	r3, [pc, #404]	@ (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b63      	ldr	r3, [pc, #396]	@ (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b8      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044bc:	4b59      	ldr	r3, [pc, #356]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a58      	ldr	r2, [pc, #352]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80044c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d4:	4b53      	ldr	r3, [pc, #332]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a52      	ldr	r2, [pc, #328]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80044de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e0:	4b50      	ldr	r3, [pc, #320]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	494d      	ldr	r1, [pc, #308]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d044      	beq.n	8004588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d107      	bne.n	8004516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b47      	ldr	r3, [pc, #284]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d119      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e07f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d003      	beq.n	8004526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004522:	2b03      	cmp	r3, #3
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004526:	4b3f      	ldr	r3, [pc, #252]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e06f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004536:	4b3b      	ldr	r3, [pc, #236]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e067      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004546:	4b37      	ldr	r3, [pc, #220]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f023 0203 	bic.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4934      	ldr	r1, [pc, #208]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004558:	f7fe f8c8 	bl	80026ec <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	e00a      	b.n	8004576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004560:	f7fe f8c4 	bl	80026ec <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e04f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	4b2b      	ldr	r3, [pc, #172]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 020c 	and.w	r2, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	429a      	cmp	r2, r3
 8004586:	d1eb      	bne.n	8004560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004588:	4b25      	ldr	r3, [pc, #148]	@ (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 030f 	and.w	r3, r3, #15
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d20c      	bcs.n	80045b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b22      	ldr	r3, [pc, #136]	@ (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b20      	ldr	r3, [pc, #128]	@ (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e032      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045bc:	4b19      	ldr	r3, [pc, #100]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4916      	ldr	r1, [pc, #88]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045da:	4b12      	ldr	r3, [pc, #72]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	490e      	ldr	r1, [pc, #56]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ee:	f000 f821 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	490a      	ldr	r1, [pc, #40]	@ (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 8004600:	5ccb      	ldrb	r3, [r1, r3]
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	4a09      	ldr	r2, [pc, #36]	@ (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800460a:	4b09      	ldr	r3, [pc, #36]	@ (8004630 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe f828 	bl	8002664 <HAL_InitTick>

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023c00 	.word	0x40023c00
 8004624:	40023800 	.word	0x40023800
 8004628:	08006e3c 	.word	0x08006e3c
 800462c:	20000000 	.word	0x20000000
 8004630:	20000010 	.word	0x20000010

08004634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004638:	b094      	sub	sp, #80	@ 0x50
 800463a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004640:	2300      	movs	r3, #0
 8004642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004644:	2300      	movs	r3, #0
 8004646:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800464c:	4b79      	ldr	r3, [pc, #484]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d00d      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x40>
 8004658:	2b08      	cmp	r3, #8
 800465a:	f200 80e1 	bhi.w	8004820 <HAL_RCC_GetSysClockFreq+0x1ec>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x34>
 8004662:	2b04      	cmp	r3, #4
 8004664:	d003      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0x3a>
 8004666:	e0db      	b.n	8004820 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b73      	ldr	r3, [pc, #460]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x204>)
 800466a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800466c:	e0db      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800466e:	4b73      	ldr	r3, [pc, #460]	@ (800483c <HAL_RCC_GetSysClockFreq+0x208>)
 8004670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004672:	e0d8      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004674:	4b6f      	ldr	r3, [pc, #444]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800467c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800467e:	4b6d      	ldr	r3, [pc, #436]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d063      	beq.n	8004752 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468a:	4b6a      	ldr	r3, [pc, #424]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	099b      	lsrs	r3, r3, #6
 8004690:	2200      	movs	r2, #0
 8004692:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004694:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	633b      	str	r3, [r7, #48]	@ 0x30
 800469e:	2300      	movs	r3, #0
 80046a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80046a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046a6:	4622      	mov	r2, r4
 80046a8:	462b      	mov	r3, r5
 80046aa:	f04f 0000 	mov.w	r0, #0
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	0159      	lsls	r1, r3, #5
 80046b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b8:	0150      	lsls	r0, r2, #5
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4621      	mov	r1, r4
 80046c0:	1a51      	subs	r1, r2, r1
 80046c2:	6139      	str	r1, [r7, #16]
 80046c4:	4629      	mov	r1, r5
 80046c6:	eb63 0301 	sbc.w	r3, r3, r1
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046d8:	4659      	mov	r1, fp
 80046da:	018b      	lsls	r3, r1, #6
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046e2:	4651      	mov	r1, sl
 80046e4:	018a      	lsls	r2, r1, #6
 80046e6:	4651      	mov	r1, sl
 80046e8:	ebb2 0801 	subs.w	r8, r2, r1
 80046ec:	4659      	mov	r1, fp
 80046ee:	eb63 0901 	sbc.w	r9, r3, r1
 80046f2:	f04f 0200 	mov.w	r2, #0
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004706:	4690      	mov	r8, r2
 8004708:	4699      	mov	r9, r3
 800470a:	4623      	mov	r3, r4
 800470c:	eb18 0303 	adds.w	r3, r8, r3
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	462b      	mov	r3, r5
 8004714:	eb49 0303 	adc.w	r3, r9, r3
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	f04f 0300 	mov.w	r3, #0
 8004722:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004726:	4629      	mov	r1, r5
 8004728:	024b      	lsls	r3, r1, #9
 800472a:	4621      	mov	r1, r4
 800472c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004730:	4621      	mov	r1, r4
 8004732:	024a      	lsls	r2, r1, #9
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800473a:	2200      	movs	r2, #0
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800473e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004740:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004744:	f7fc f978 	bl	8000a38 <__aeabi_uldivmod>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4613      	mov	r3, r2
 800474e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004750:	e058      	b.n	8004804 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004752:	4b38      	ldr	r3, [pc, #224]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	099b      	lsrs	r3, r3, #6
 8004758:	2200      	movs	r2, #0
 800475a:	4618      	mov	r0, r3
 800475c:	4611      	mov	r1, r2
 800475e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004762:	623b      	str	r3, [r7, #32]
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
 8004768:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800476c:	4642      	mov	r2, r8
 800476e:	464b      	mov	r3, r9
 8004770:	f04f 0000 	mov.w	r0, #0
 8004774:	f04f 0100 	mov.w	r1, #0
 8004778:	0159      	lsls	r1, r3, #5
 800477a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477e:	0150      	lsls	r0, r2, #5
 8004780:	4602      	mov	r2, r0
 8004782:	460b      	mov	r3, r1
 8004784:	4641      	mov	r1, r8
 8004786:	ebb2 0a01 	subs.w	sl, r2, r1
 800478a:	4649      	mov	r1, r9
 800478c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800479c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047a4:	ebb2 040a 	subs.w	r4, r2, sl
 80047a8:	eb63 050b 	sbc.w	r5, r3, fp
 80047ac:	f04f 0200 	mov.w	r2, #0
 80047b0:	f04f 0300 	mov.w	r3, #0
 80047b4:	00eb      	lsls	r3, r5, #3
 80047b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047ba:	00e2      	lsls	r2, r4, #3
 80047bc:	4614      	mov	r4, r2
 80047be:	461d      	mov	r5, r3
 80047c0:	4643      	mov	r3, r8
 80047c2:	18e3      	adds	r3, r4, r3
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	464b      	mov	r3, r9
 80047c8:	eb45 0303 	adc.w	r3, r5, r3
 80047cc:	607b      	str	r3, [r7, #4]
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047da:	4629      	mov	r1, r5
 80047dc:	028b      	lsls	r3, r1, #10
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e4:	4621      	mov	r1, r4
 80047e6:	028a      	lsls	r2, r1, #10
 80047e8:	4610      	mov	r0, r2
 80047ea:	4619      	mov	r1, r3
 80047ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ee:	2200      	movs	r2, #0
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	61fa      	str	r2, [r7, #28]
 80047f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f8:	f7fc f91e 	bl	8000a38 <__aeabi_uldivmod>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	4613      	mov	r3, r2
 8004802:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004804:	4b0b      	ldr	r3, [pc, #44]	@ (8004834 <HAL_RCC_GetSysClockFreq+0x200>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	0c1b      	lsrs	r3, r3, #16
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	3301      	adds	r3, #1
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004814:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800481e:	e002      	b.n	8004826 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <HAL_RCC_GetSysClockFreq+0x204>)
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004824:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004828:	4618      	mov	r0, r3
 800482a:	3750      	adds	r7, #80	@ 0x50
 800482c:	46bd      	mov	sp, r7
 800482e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004832:	bf00      	nop
 8004834:	40023800 	.word	0x40023800
 8004838:	00f42400 	.word	0x00f42400
 800483c:	007a1200 	.word	0x007a1200

08004840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004844:	4b03      	ldr	r3, [pc, #12]	@ (8004854 <HAL_RCC_GetHCLKFreq+0x14>)
 8004846:	681b      	ldr	r3, [r3, #0]
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	20000000 	.word	0x20000000

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800485c:	f7ff fff0 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	@ (8004878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	0a9b      	lsrs	r3, r3, #10
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	@ (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40023800 	.word	0x40023800
 800487c:	08006e4c 	.word	0x08006e4c

08004880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004884:	f7ff ffdc 	bl	8004840 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	@ (80048a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	0b5b      	lsrs	r3, r3, #13
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	@ (80048a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40023800 	.word	0x40023800
 80048a4:	08006e4c 	.word	0x08006e4c

080048a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10b      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d105      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d075      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80048dc:	4b91      	ldr	r3, [pc, #580]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048e2:	f7fd ff03 	bl	80026ec <HAL_GetTick>
 80048e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048e8:	e008      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048ea:	f7fd feff 	bl	80026ec <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d901      	bls.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e189      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80048fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1f0      	bne.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0301 	and.w	r3, r3, #1
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	019a      	lsls	r2, r3, #6
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	071b      	lsls	r3, r3, #28
 8004920:	4981      	ldr	r1, [pc, #516]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01f      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004934:	4b7c      	ldr	r3, [pc, #496]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493a:	0f1b      	lsrs	r3, r3, #28
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	019a      	lsls	r2, r3, #6
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	061b      	lsls	r3, r3, #24
 800494e:	431a      	orrs	r2, r3
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	071b      	lsls	r3, r3, #28
 8004954:	4974      	ldr	r1, [pc, #464]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800495c:	4b72      	ldr	r3, [pc, #456]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800495e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004962:	f023 021f 	bic.w	r2, r3, #31
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	3b01      	subs	r3, #1
 800496c:	496e      	ldr	r1, [pc, #440]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800496e:	4313      	orrs	r3, r2
 8004970:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	019a      	lsls	r2, r3, #6
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	071b      	lsls	r3, r3, #28
 8004994:	4964      	ldr	r1, [pc, #400]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800499c:	4b61      	ldr	r3, [pc, #388]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800499e:	2201      	movs	r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049a2:	f7fd fea3 	bl	80026ec <HAL_GetTick>
 80049a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049a8:	e008      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049aa:	f7fd fe9f 	bl	80026ec <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d901      	bls.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e129      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d0f0      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d105      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d079      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80049e0:	4b52      	ldr	r3, [pc, #328]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049e6:	f7fd fe81 	bl	80026ec <HAL_GetTick>
 80049ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80049ee:	f7fd fe7d 	bl	80026ec <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e107      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a00:	4b49      	ldr	r3, [pc, #292]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a0c:	d0ef      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d020      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a1a:	4b43      	ldr	r3, [pc, #268]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a20:	0f1b      	lsrs	r3, r3, #28
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	019a      	lsls	r2, r3, #6
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	061b      	lsls	r3, r3, #24
 8004a34:	431a      	orrs	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	071b      	lsls	r3, r3, #28
 8004a3a:	493b      	ldr	r1, [pc, #236]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a42:	4b39      	ldr	r3, [pc, #228]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a48:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	4934      	ldr	r1, [pc, #208]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01e      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a68:	4b2f      	ldr	r3, [pc, #188]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6e:	0e1b      	lsrs	r3, r3, #24
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	019a      	lsls	r2, r3, #6
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	061b      	lsls	r3, r3, #24
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	071b      	lsls	r3, r3, #28
 8004a88:	4927      	ldr	r1, [pc, #156]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004a90:	4b25      	ldr	r3, [pc, #148]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a96:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	4922      	ldr	r1, [pc, #136]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004aa6:	4b21      	ldr	r3, [pc, #132]	@ (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004aac:	f7fd fe1e 	bl	80026ec <HAL_GetTick>
 8004ab0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ab4:	f7fd fe1a 	bl	80026ec <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e0a4      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ac6:	4b18      	ldr	r3, [pc, #96]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ace:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ad2:	d1ef      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 808b 	beq.w	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	4b10      	ldr	r3, [pc, #64]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	4a0f      	ldr	r2, [pc, #60]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004af0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004af2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004afe:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a0b      	ldr	r2, [pc, #44]	@ (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b0a:	f7fd fdef 	bl	80026ec <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b10:	e010      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fd fdeb 	bl	80026ec <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d909      	bls.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e075      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004b24:	42470068 	.word	0x42470068
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	42470070 	.word	0x42470070
 8004b30:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004b34:	4b38      	ldr	r3, [pc, #224]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0e8      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b40:	4b36      	ldr	r3, [pc, #216]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d02f      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d028      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b68:	4b2d      	ldr	r3, [pc, #180]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004c20 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004b74:	4a29      	ldr	r2, [pc, #164]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b7a:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d114      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004b86:	f7fd fdb1 	bl	80026ec <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8c:	e00a      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b8e:	f7fd fdad 	bl	80026ec <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e035      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0ee      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bbc:	d10d      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004bbe:	4b17      	ldr	r3, [pc, #92]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bd2:	4912      	ldr	r1, [pc, #72]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	608b      	str	r3, [r1, #8]
 8004bd8:	e005      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004bda:	4b10      	ldr	r3, [pc, #64]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	4a0f      	ldr	r2, [pc, #60]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004be0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004be4:	6093      	str	r3, [r2, #8]
 8004be6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004be8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bf2:	490a      	ldr	r1, [pc, #40]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0310 	and.w	r3, r3, #16
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004c0c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3718      	adds	r7, #24
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	40007000 	.word	0x40007000
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	42470e40 	.word	0x42470e40
 8004c24:	424711e0 	.word	0x424711e0

08004c28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e073      	b.n	8004d26 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	7f5b      	ldrb	r3, [r3, #29]
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d105      	bne.n	8004c54 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fc fbde 	bl	8001410 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d055      	beq.n	8004d14 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	22ca      	movs	r2, #202	@ 0xca
 8004c6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2253      	movs	r2, #83	@ 0x53
 8004c76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fa49 	bl	8005110 <RTC_EnterInitMode>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d12c      	bne.n	8004ce2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c9a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	68d2      	ldr	r2, [r2, #12]
 8004cc2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6919      	ldr	r1, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	041a      	lsls	r2, r3, #16
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fa50 	bl	800517e <RTC_ExitInitMode>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d110      	bne.n	8004d0a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cf6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	22ff      	movs	r2, #255	@ 0xff
 8004d10:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d12:	e001      	b.n	8004d18 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004d18:	7bfb      	ldrb	r3, [r7, #15]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d2e:	b590      	push	{r4, r7, lr}
 8004d30:	b087      	sub	sp, #28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	7f1b      	ldrb	r3, [r3, #28]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_RTC_SetTime+0x1c>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e087      	b.n	8004e5a <HAL_RTC_SetTime+0x12c>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2202      	movs	r2, #2
 8004d54:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d126      	bne.n	8004daa <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d102      	bne.n	8004d70 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fa27 	bl	80051c8 <RTC_ByteToBcd2>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa20 	bl	80051c8 <RTC_ByteToBcd2>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004d8c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	789b      	ldrb	r3, [r3, #2]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 fa18 	bl	80051c8 <RTC_ByteToBcd2>
 8004d98:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004d9a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	78db      	ldrb	r3, [r3, #3]
 8004da2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004da4:	4313      	orrs	r3, r2
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e018      	b.n	8004ddc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	785b      	ldrb	r3, [r3, #1]
 8004dc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dca:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004dd0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	78db      	ldrb	r3, [r3, #3]
 8004dd6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	22ca      	movs	r2, #202	@ 0xca
 8004de2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2253      	movs	r2, #83	@ 0x53
 8004dea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 f98f 	bl	8005110 <RTC_EnterInitMode>
 8004df2:	4603      	mov	r3, r0
 8004df4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d120      	bne.n	8004e3e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004e06:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004e0a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004e1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6899      	ldr	r1, [r3, #8]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f9a2 	bl	800517e <RTC_ExitInitMode>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004e3e:	7cfb      	ldrb	r3, [r7, #19]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	22ff      	movs	r2, #255	@ 0xff
 8004e50:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	771a      	strb	r2, [r3, #28]

  return status;
 8004e58:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd90      	pop	{r4, r7, pc}

08004e62 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b086      	sub	sp, #24
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004e94:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004e98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	0a1b      	lsrs	r3, r3, #8
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	0d9b      	lsrs	r3, r3, #22
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f003 0301 	and.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d11a      	bne.n	8004f14 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f98e 	bl	8005204 <RTC_Bcd2ToByte>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	785b      	ldrb	r3, [r3, #1]
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f985 	bl	8005204 <RTC_Bcd2ToByte>
 8004efa:	4603      	mov	r3, r0
 8004efc:	461a      	mov	r2, r3
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	789b      	ldrb	r3, [r3, #2]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 f97c 	bl	8005204 <RTC_Bcd2ToByte>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f1e:	b590      	push	{r4, r7, lr}
 8004f20:	b087      	sub	sp, #28
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	7f1b      	ldrb	r3, [r3, #28]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_RTC_SetDate+0x1c>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e071      	b.n	800501e <HAL_RTC_SetDate+0x100>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2202      	movs	r2, #2
 8004f44:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10e      	bne.n	8004f6a <HAL_RTC_SetDate+0x4c>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d008      	beq.n	8004f6a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	785b      	ldrb	r3, [r3, #1]
 8004f5c:	f023 0310 	bic.w	r3, r3, #16
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	330a      	adds	r3, #10
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d11c      	bne.n	8004faa <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	78db      	ldrb	r3, [r3, #3]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 f927 	bl	80051c8 <RTC_ByteToBcd2>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f920 	bl	80051c8 <RTC_ByteToBcd2>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004f8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	789b      	ldrb	r3, [r3, #2]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 f918 	bl	80051c8 <RTC_ByteToBcd2>
 8004f98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004f9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e00e      	b.n	8004fc8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fb6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004fbc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	22ca      	movs	r2, #202	@ 0xca
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2253      	movs	r2, #83	@ 0x53
 8004fd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f899 	bl	8005110 <RTC_EnterInitMode>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004fe2:	7cfb      	ldrb	r3, [r7, #19]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10c      	bne.n	8005002 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ff2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004ff6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f8c0 	bl	800517e <RTC_ExitInitMode>
 8004ffe:	4603      	mov	r3, r0
 8005000:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005002:	7cfb      	ldrb	r3, [r7, #19]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d102      	bne.n	800500e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2201      	movs	r2, #1
 800500c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	22ff      	movs	r2, #255	@ 0xff
 8005014:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	771a      	strb	r2, [r3, #28]

  return status;
 800501c:	7cfb      	ldrb	r3, [r7, #19]
}
 800501e:	4618      	mov	r0, r3
 8005020:	371c      	adds	r7, #28
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}

08005026 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005040:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005044:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	b2da      	uxtb	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	0a1b      	lsrs	r3, r3, #8
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 031f 	and.w	r3, r3, #31
 800505a:	b2da      	uxtb	r2, r3
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	0b5b      	lsrs	r3, r3, #13
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 0307 	and.w	r3, r3, #7
 8005078:	b2da      	uxtb	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d11a      	bne.n	80050ba <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	78db      	ldrb	r3, [r3, #3]
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f8bb 	bl	8005204 <RTC_Bcd2ToByte>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	785b      	ldrb	r3, [r3, #1]
 800509a:	4618      	mov	r0, r3
 800509c:	f000 f8b2 	bl	8005204 <RTC_Bcd2ToByte>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	789b      	ldrb	r3, [r3, #2]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 f8a9 	bl	8005204 <RTC_Bcd2ToByte>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a0d      	ldr	r2, [pc, #52]	@ (800510c <HAL_RTC_WaitForSynchro+0x48>)
 80050d6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050d8:	f7fd fb08 	bl	80026ec <HAL_GetTick>
 80050dc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050de:	e009      	b.n	80050f4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050e0:	f7fd fb04 	bl	80026ec <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050ee:	d901      	bls.n	80050f4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e007      	b.n	8005104 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ee      	beq.n	80050e0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	00017f5f 	.word	0x00017f5f

08005110 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d122      	bne.n	8005174 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800513c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800513e:	f7fd fad5 	bl	80026ec <HAL_GetTick>
 8005142:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005144:	e00c      	b.n	8005160 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005146:	f7fd fad1 	bl	80026ec <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005154:	d904      	bls.n	8005160 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2204      	movs	r2, #4
 800515a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d102      	bne.n	8005174 <RTC_EnterInitMode+0x64>
 800516e:	7bfb      	ldrb	r3, [r7, #15]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d1e8      	bne.n	8005146 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b084      	sub	sp, #16
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68da      	ldr	r2, [r3, #12]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005198:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 0320 	and.w	r3, r3, #32
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff8b 	bl	80050c4 <HAL_RTC_WaitForSynchro>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d004      	beq.n	80051be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2204      	movs	r2, #4
 80051b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3710      	adds	r7, #16
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051d2:	2300      	movs	r3, #0
 80051d4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80051d6:	e005      	b.n	80051e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	3b0a      	subs	r3, #10
 80051e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80051e4:	79fb      	ldrb	r3, [r7, #7]
 80051e6:	2b09      	cmp	r3, #9
 80051e8:	d8f6      	bhi.n	80051d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	b2da      	uxtb	r2, r3
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	b2db      	uxtb	r3, r3
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	4603      	mov	r3, r0
 800520c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	091b      	lsrs	r3, r3, #4
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	b2da      	uxtb	r2, r3
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	f003 030f 	and.w	r3, r3, #15
 800522e:	b2db      	uxtb	r3, r3
 8005230:	4413      	add	r3, r2
 8005232:	b2db      	uxtb	r3, r3
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e07b      	b.n	800534a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	2b00      	cmp	r3, #0
 8005258:	d108      	bne.n	800526c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005262:	d009      	beq.n	8005278 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	61da      	str	r2, [r3, #28]
 800526a:	e005      	b.n	8005278 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fc f8e6 	bl	8001464 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052c0:	431a      	orrs	r2, r3
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	431a      	orrs	r2, r3
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fc:	ea42 0103 	orr.w	r1, r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005304:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0104 	and.w	r1, r3, #4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	f003 0210 	and.w	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	69da      	ldr	r2, [r3, #28]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005338:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b088      	sub	sp, #32
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	603b      	str	r3, [r7, #0]
 800535e:	4613      	mov	r3, r2
 8005360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_SPI_Transmit+0x22>
 8005370:	2302      	movs	r3, #2
 8005372:	e12d      	b.n	80055d0 <HAL_SPI_Transmit+0x27e>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800537c:	f7fd f9b6 	bl	80026ec <HAL_GetTick>
 8005380:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005382:	88fb      	ldrh	r3, [r7, #6]
 8005384:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005392:	2302      	movs	r3, #2
 8005394:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005396:	e116      	b.n	80055c6 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_SPI_Transmit+0x52>
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d102      	bne.n	80053aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053a8:	e10d      	b.n	80055c6 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2203      	movs	r2, #3
 80053ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	88fa      	ldrh	r2, [r7, #6]
 80053c2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	88fa      	ldrh	r2, [r7, #6]
 80053c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053f0:	d10f      	bne.n	8005412 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005400:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005410:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541c:	2b40      	cmp	r3, #64	@ 0x40
 800541e:	d007      	beq.n	8005430 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800542e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005438:	d14f      	bne.n	80054da <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_SPI_Transmit+0xf6>
 8005442:	8afb      	ldrh	r3, [r7, #22]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d142      	bne.n	80054ce <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544c:	881a      	ldrh	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	1c9a      	adds	r2, r3, #2
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800546c:	e02f      	b.n	80054ce <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b02      	cmp	r3, #2
 800547a:	d112      	bne.n	80054a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005480:	881a      	ldrh	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548c:	1c9a      	adds	r2, r3, #2
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054a0:	e015      	b.n	80054ce <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054a2:	f7fd f923 	bl	80026ec <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d803      	bhi.n	80054ba <HAL_SPI_Transmit+0x168>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054b8:	d102      	bne.n	80054c0 <HAL_SPI_Transmit+0x16e>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80054cc:	e07b      	b.n	80055c6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1ca      	bne.n	800546e <HAL_SPI_Transmit+0x11c>
 80054d8:	e050      	b.n	800557c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d002      	beq.n	80054e8 <HAL_SPI_Transmit+0x196>
 80054e2:	8afb      	ldrh	r3, [r7, #22]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d144      	bne.n	8005572 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	330c      	adds	r3, #12
 80054f2:	7812      	ldrb	r2, [r2, #0]
 80054f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800550e:	e030      	b.n	8005572 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b02      	cmp	r3, #2
 800551c:	d113      	bne.n	8005546 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	7812      	ldrb	r2, [r2, #0]
 800552a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005544:	e015      	b.n	8005572 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005546:	f7fd f8d1 	bl	80026ec <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	683a      	ldr	r2, [r7, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d803      	bhi.n	800555e <HAL_SPI_Transmit+0x20c>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800555c:	d102      	bne.n	8005564 <HAL_SPI_Transmit+0x212>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005570:	e029      	b.n	80055c6 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1c9      	bne.n	8005510 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800557c:	69ba      	ldr	r2, [r7, #24]
 800557e:	6839      	ldr	r1, [r7, #0]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fbdf 	bl	8005d44 <SPI_EndRxTxTransaction>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2220      	movs	r2, #32
 8005590:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10a      	bne.n	80055b0 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800559a:	2300      	movs	r3, #0
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e003      	b.n	80055c6 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80055ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b088      	sub	sp, #32
 80055dc:	af02      	add	r7, sp, #8
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055e8:	2300      	movs	r3, #0
 80055ea:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d002      	beq.n	80055fe <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
 80055fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80055fc:	e0fb      	b.n	80057f6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005606:	d112      	bne.n	800562e <HAL_SPI_Receive+0x56>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10e      	bne.n	800562e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2204      	movs	r2, #4
 8005614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005618:	88fa      	ldrh	r2, [r7, #6]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f8ef 	bl	8005808 <HAL_SPI_TransmitReceive>
 800562a:	4603      	mov	r3, r0
 800562c:	e0e8      	b.n	8005800 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_SPI_Receive+0x64>
 8005638:	2302      	movs	r3, #2
 800563a:	e0e1      	b.n	8005800 <HAL_SPI_Receive+0x228>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005644:	f7fd f852 	bl	80026ec <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <HAL_SPI_Receive+0x7e>
 8005650:	88fb      	ldrh	r3, [r7, #6]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d102      	bne.n	800565c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	75fb      	strb	r3, [r7, #23]
    goto error;
 800565a:	e0cc      	b.n	80057f6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2204      	movs	r2, #4
 8005660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68ba      	ldr	r2, [r7, #8]
 800566e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a2:	d10f      	bne.n	80056c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ce:	2b40      	cmp	r3, #64	@ 0x40
 80056d0:	d007      	beq.n	80056e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d16a      	bne.n	80057c0 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80056ea:	e032      	b.n	8005752 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d115      	bne.n	8005726 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f103 020c 	add.w	r2, r3, #12
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005706:	7812      	ldrb	r2, [r2, #0]
 8005708:	b2d2      	uxtb	r2, r2
 800570a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b01      	subs	r3, #1
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005724:	e015      	b.n	8005752 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005726:	f7fc ffe1 	bl	80026ec <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d803      	bhi.n	800573e <HAL_SPI_Receive+0x166>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800573c:	d102      	bne.n	8005744 <HAL_SPI_Receive+0x16c>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005750:	e051      	b.n	80057f6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1c7      	bne.n	80056ec <HAL_SPI_Receive+0x114>
 800575c:	e035      	b.n	80057ca <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d113      	bne.n	8005794 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005776:	b292      	uxth	r2, r2
 8005778:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577e:	1c9a      	adds	r2, r3, #2
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005788:	b29b      	uxth	r3, r3
 800578a:	3b01      	subs	r3, #1
 800578c:	b29a      	uxth	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005792:	e015      	b.n	80057c0 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005794:	f7fc ffaa 	bl	80026ec <HAL_GetTick>
 8005798:	4602      	mov	r2, r0
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d803      	bhi.n	80057ac <HAL_SPI_Receive+0x1d4>
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057aa:	d102      	bne.n	80057b2 <HAL_SPI_Receive+0x1da>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80057be:	e01a      	b.n	80057f6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1c9      	bne.n	800575e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f000 fa52 	bl	8005c78 <SPI_EndRxTransaction>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
 80057ec:	e003      	b.n	80057f6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80057fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3718      	adds	r7, #24
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08c      	sub	sp, #48	@ 0x30
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005816:	2301      	movs	r3, #1
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_SPI_TransmitReceive+0x26>
 800582a:	2302      	movs	r3, #2
 800582c:	e198      	b.n	8005b60 <HAL_SPI_TransmitReceive+0x358>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005836:	f7fc ff59 	bl	80026ec <HAL_GetTick>
 800583a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800584c:	887b      	ldrh	r3, [r7, #2]
 800584e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005850:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005854:	2b01      	cmp	r3, #1
 8005856:	d00f      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x70>
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800585e:	d107      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x68>
 8005868:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800586c:	2b04      	cmp	r3, #4
 800586e:	d003      	beq.n	8005878 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005870:	2302      	movs	r3, #2
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005876:	e16d      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_SPI_TransmitReceive+0x82>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <HAL_SPI_TransmitReceive+0x82>
 8005884:	887b      	ldrh	r3, [r7, #2]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d103      	bne.n	8005892 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005890:	e160      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b04      	cmp	r3, #4
 800589c:	d003      	beq.n	80058a6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2205      	movs	r2, #5
 80058a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	887a      	ldrh	r2, [r7, #2]
 80058b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	887a      	ldrh	r2, [r7, #2]
 80058bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	887a      	ldrh	r2, [r7, #2]
 80058c8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	887a      	ldrh	r2, [r7, #2]
 80058ce:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e6:	2b40      	cmp	r3, #64	@ 0x40
 80058e8:	d007      	beq.n	80058fa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005902:	d17c      	bne.n	80059fe <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_SPI_TransmitReceive+0x10a>
 800590c:	8b7b      	ldrh	r3, [r7, #26]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d16a      	bne.n	80059e8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005916:	881a      	ldrh	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005922:	1c9a      	adds	r2, r3, #2
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005936:	e057      	b.n	80059e8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b02      	cmp	r3, #2
 8005944:	d11b      	bne.n	800597e <HAL_SPI_TransmitReceive+0x176>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d016      	beq.n	800597e <HAL_SPI_TransmitReceive+0x176>
 8005950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d113      	bne.n	800597e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595a:	881a      	ldrh	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	1c9a      	adds	r2, r3, #2
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005970:	b29b      	uxth	r3, r3
 8005972:	3b01      	subs	r3, #1
 8005974:	b29a      	uxth	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b01      	cmp	r3, #1
 800598a:	d119      	bne.n	80059c0 <HAL_SPI_TransmitReceive+0x1b8>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d014      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a0:	b292      	uxth	r2, r2
 80059a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059a8:	1c9a      	adds	r2, r3, #2
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059bc:	2301      	movs	r3, #1
 80059be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059c0:	f7fc fe94 	bl	80026ec <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d80b      	bhi.n	80059e8 <HAL_SPI_TransmitReceive+0x1e0>
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059d6:	d007      	beq.n	80059e8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80059e6:	e0b5      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1a2      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x130>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d19d      	bne.n	8005938 <HAL_SPI_TransmitReceive+0x130>
 80059fc:	e080      	b.n	8005b00 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <HAL_SPI_TransmitReceive+0x204>
 8005a06:	8b7b      	ldrh	r3, [r7, #26]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d16f      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	7812      	ldrb	r2, [r2, #0]
 8005a18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1e:	1c5a      	adds	r2, r3, #1
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a32:	e05b      	b.n	8005aec <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d11c      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x274>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d017      	beq.n	8005a7c <HAL_SPI_TransmitReceive+0x274>
 8005a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d114      	bne.n	8005a7c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	330c      	adds	r3, #12
 8005a5c:	7812      	ldrb	r2, [r2, #0]
 8005a5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d119      	bne.n	8005abe <HAL_SPI_TransmitReceive+0x2b6>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d014      	beq.n	8005abe <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68da      	ldr	r2, [r3, #12]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9e:	b2d2      	uxtb	r2, r2
 8005aa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa6:	1c5a      	adds	r2, r3, #1
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aba:	2301      	movs	r3, #1
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005abe:	f7fc fe15 	bl	80026ec <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d803      	bhi.n	8005ad6 <HAL_SPI_TransmitReceive+0x2ce>
 8005ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ad4:	d102      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x2d4>
 8005ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d107      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005adc:	2303      	movs	r3, #3
 8005ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005aea:	e033      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d19e      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x22c>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d199      	bne.n	8005a34 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f91d 	bl	8005d44 <SPI_EndRxTxTransaction>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d006      	beq.n	8005b1e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005b1c:	e01a      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	617b      	str	r3, [r7, #20]
 8005b3a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b4a:	e003      	b.n	8005b54 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3730      	adds	r7, #48	@ 0x30
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b78:	f7fc fdb8 	bl	80026ec <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b88:	f7fc fdb0 	bl	80026ec <HAL_GetTick>
 8005b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b8e:	4b39      	ldr	r3, [pc, #228]	@ (8005c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	015b      	lsls	r3, r3, #5
 8005b94:	0d1b      	lsrs	r3, r3, #20
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b9e:	e054      	b.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ba6:	d050      	beq.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba8:	f7fc fda0 	bl	80026ec <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d902      	bls.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d13d      	bne.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bd6:	d111      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005be0:	d004      	beq.n	8005bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bea:	d107      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c04:	d10f      	bne.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e017      	b.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d19b      	bne.n	8005ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000000 	.word	0x20000000

08005c78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b086      	sub	sp, #24
 8005c7c:	af02      	add	r7, sp, #8
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c8c:	d111      	bne.n	8005cb2 <SPI_EndRxTransaction+0x3a>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c96:	d004      	beq.n	8005ca2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ca0:	d107      	bne.n	8005cb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cba:	d12a      	bne.n	8005d12 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cc4:	d012      	beq.n	8005cec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f7ff ff49 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d02d      	beq.n	8005d38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce0:	f043 0220 	orr.w	r2, r3, #32
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e026      	b.n	8005d3a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	68f8      	ldr	r0, [r7, #12]
 8005cf8:	f7ff ff36 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d01a      	beq.n	8005d38 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e013      	b.n	8005d3a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f7ff ff23 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d2c:	f043 0220 	orr.w	r2, r3, #32
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e000      	b.n	8005d3a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2201      	movs	r2, #1
 8005d58:	2102      	movs	r1, #2
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7ff ff04 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6a:	f043 0220 	orr.w	r2, r3, #32
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e032      	b.n	8005ddc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d76:	4b1b      	ldr	r3, [pc, #108]	@ (8005de4 <SPI_EndRxTxTransaction+0xa0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005de8 <SPI_EndRxTxTransaction+0xa4>)
 8005d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d80:	0d5b      	lsrs	r3, r3, #21
 8005d82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d94:	d112      	bne.n	8005dbc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2180      	movs	r1, #128	@ 0x80
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff fee1 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d016      	beq.n	8005dda <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db0:	f043 0220 	orr.w	r2, r3, #32
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e00f      	b.n	8005ddc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dd2:	2b80      	cmp	r3, #128	@ 0x80
 8005dd4:	d0f2      	beq.n	8005dbc <SPI_EndRxTxTransaction+0x78>
 8005dd6:	e000      	b.n	8005dda <SPI_EndRxTxTransaction+0x96>
        break;
 8005dd8:	bf00      	nop
  }

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20000000 	.word	0x20000000
 8005de8:	165e9f81 	.word	0x165e9f81

08005dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e042      	b.n	8005e84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f7fb fb8e 	bl	8001534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2224      	movs	r2, #36	@ 0x24
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f973 	bl	800611c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691a      	ldr	r2, [r3, #16]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	695a      	ldr	r2, [r3, #20]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	@ 0x28
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	603b      	str	r3, [r7, #0]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	d175      	bne.n	8005f98 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_UART_Transmit+0x2c>
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e06e      	b.n	8005f9a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2221      	movs	r2, #33	@ 0x21
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eca:	f7fc fc0f 	bl	80026ec <HAL_GetTick>
 8005ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	88fa      	ldrh	r2, [r7, #6]
 8005ed4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ee4:	d108      	bne.n	8005ef8 <HAL_UART_Transmit+0x6c>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d104      	bne.n	8005ef8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	e003      	b.n	8005f00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005efc:	2300      	movs	r3, #0
 8005efe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f00:	e02e      	b.n	8005f60 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	2180      	movs	r1, #128	@ 0x80
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f000 f848 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d005      	beq.n	8005f24 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e03a      	b.n	8005f9a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10b      	bne.n	8005f42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	881b      	ldrh	r3, [r3, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	e007      	b.n	8005f52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	781a      	ldrb	r2, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1cb      	bne.n	8005f02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2200      	movs	r2, #0
 8005f72:	2140      	movs	r1, #64	@ 0x40
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 f814 	bl	8005fa2 <UART_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e006      	b.n	8005f9a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2220      	movs	r2, #32
 8005f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005f94:	2300      	movs	r3, #0
 8005f96:	e000      	b.n	8005f9a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005f98:	2302      	movs	r3, #2
  }
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3720      	adds	r7, #32
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fa2:	b580      	push	{r7, lr}
 8005fa4:	b086      	sub	sp, #24
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	60f8      	str	r0, [r7, #12]
 8005faa:	60b9      	str	r1, [r7, #8]
 8005fac:	603b      	str	r3, [r7, #0]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb2:	e03b      	b.n	800602c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fba:	d037      	beq.n	800602c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fbc:	f7fc fb96 	bl	80026ec <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	6a3a      	ldr	r2, [r7, #32]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d302      	bcc.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d101      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e03a      	b.n	800604c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d023      	beq.n	800602c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b80      	cmp	r3, #128	@ 0x80
 8005fe8:	d020      	beq.n	800602c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b40      	cmp	r3, #64	@ 0x40
 8005fee:	d01d      	beq.n	800602c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d116      	bne.n	800602c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ffe:	2300      	movs	r3, #0
 8006000:	617b      	str	r3, [r7, #20]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	617b      	str	r3, [r7, #20]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f81d 	bl	8006054 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2208      	movs	r2, #8
 800601e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e00f      	b.n	800604c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	4013      	ands	r3, r2
 8006036:	68ba      	ldr	r2, [r7, #8]
 8006038:	429a      	cmp	r2, r3
 800603a:	bf0c      	ite	eq
 800603c:	2301      	moveq	r3, #1
 800603e:	2300      	movne	r3, #0
 8006040:	b2db      	uxtb	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	429a      	cmp	r2, r3
 8006048:	d0b4      	beq.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b095      	sub	sp, #84	@ 0x54
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006066:	e853 3f00 	ldrex	r3, [r3]
 800606a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800606e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800607c:	643a      	str	r2, [r7, #64]	@ 0x40
 800607e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006084:	e841 2300 	strex	r3, r2, [r1]
 8006088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800608a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1e5      	bne.n	800605c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3314      	adds	r3, #20
 8006096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	e853 3f00 	ldrex	r3, [r3]
 800609e:	61fb      	str	r3, [r7, #28]
   return(result);
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f023 0301 	bic.w	r3, r3, #1
 80060a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1e5      	bne.n	8006090 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d119      	bne.n	8006100 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	330c      	adds	r3, #12
 80060d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	60bb      	str	r3, [r7, #8]
   return(result);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f023 0310 	bic.w	r3, r3, #16
 80060e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	330c      	adds	r3, #12
 80060ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ec:	61ba      	str	r2, [r7, #24]
 80060ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	6979      	ldr	r1, [r7, #20]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	613b      	str	r3, [r7, #16]
   return(result);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e5      	bne.n	80060cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2220      	movs	r2, #32
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800610e:	bf00      	nop
 8006110:	3754      	adds	r7, #84	@ 0x54
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800611c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006120:	b0c0      	sub	sp, #256	@ 0x100
 8006122:	af00      	add	r7, sp, #0
 8006124:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	68d9      	ldr	r1, [r3, #12]
 800613a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	ea40 0301 	orr.w	r3, r0, r1
 8006144:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	431a      	orrs	r2, r3
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	431a      	orrs	r2, r3
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006174:	f021 010c 	bic.w	r1, r1, #12
 8006178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006182:	430b      	orrs	r3, r1
 8006184:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006196:	6999      	ldr	r1, [r3, #24]
 8006198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	ea40 0301 	orr.w	r3, r0, r1
 80061a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b8f      	ldr	r3, [pc, #572]	@ (80063e8 <UART_SetConfig+0x2cc>)
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d005      	beq.n	80061bc <UART_SetConfig+0xa0>
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	4b8d      	ldr	r3, [pc, #564]	@ (80063ec <UART_SetConfig+0x2d0>)
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d104      	bne.n	80061c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061bc:	f7fe fb60 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 80061c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80061c4:	e003      	b.n	80061ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061c6:	f7fe fb47 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 80061ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d8:	f040 810c 	bne.w	80063f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80061e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80061ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80061ee:	4622      	mov	r2, r4
 80061f0:	462b      	mov	r3, r5
 80061f2:	1891      	adds	r1, r2, r2
 80061f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80061f6:	415b      	adcs	r3, r3
 80061f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80061fe:	4621      	mov	r1, r4
 8006200:	eb12 0801 	adds.w	r8, r2, r1
 8006204:	4629      	mov	r1, r5
 8006206:	eb43 0901 	adc.w	r9, r3, r1
 800620a:	f04f 0200 	mov.w	r2, #0
 800620e:	f04f 0300 	mov.w	r3, #0
 8006212:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006216:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800621a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800621e:	4690      	mov	r8, r2
 8006220:	4699      	mov	r9, r3
 8006222:	4623      	mov	r3, r4
 8006224:	eb18 0303 	adds.w	r3, r8, r3
 8006228:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800622c:	462b      	mov	r3, r5
 800622e:	eb49 0303 	adc.w	r3, r9, r3
 8006232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006242:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006246:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800624a:	460b      	mov	r3, r1
 800624c:	18db      	adds	r3, r3, r3
 800624e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006250:	4613      	mov	r3, r2
 8006252:	eb42 0303 	adc.w	r3, r2, r3
 8006256:	657b      	str	r3, [r7, #84]	@ 0x54
 8006258:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800625c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006260:	f7fa fbea 	bl	8000a38 <__aeabi_uldivmod>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	4b61      	ldr	r3, [pc, #388]	@ (80063f0 <UART_SetConfig+0x2d4>)
 800626a:	fba3 2302 	umull	r2, r3, r3, r2
 800626e:	095b      	lsrs	r3, r3, #5
 8006270:	011c      	lsls	r4, r3, #4
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800627c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006280:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006284:	4642      	mov	r2, r8
 8006286:	464b      	mov	r3, r9
 8006288:	1891      	adds	r1, r2, r2
 800628a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800628c:	415b      	adcs	r3, r3
 800628e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006290:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006294:	4641      	mov	r1, r8
 8006296:	eb12 0a01 	adds.w	sl, r2, r1
 800629a:	4649      	mov	r1, r9
 800629c:	eb43 0b01 	adc.w	fp, r3, r1
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062b4:	4692      	mov	sl, r2
 80062b6:	469b      	mov	fp, r3
 80062b8:	4643      	mov	r3, r8
 80062ba:	eb1a 0303 	adds.w	r3, sl, r3
 80062be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062c2:	464b      	mov	r3, r9
 80062c4:	eb4b 0303 	adc.w	r3, fp, r3
 80062c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80062d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80062dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80062e0:	460b      	mov	r3, r1
 80062e2:	18db      	adds	r3, r3, r3
 80062e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80062e6:	4613      	mov	r3, r2
 80062e8:	eb42 0303 	adc.w	r3, r2, r3
 80062ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80062ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80062f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80062f6:	f7fa fb9f 	bl	8000a38 <__aeabi_uldivmod>
 80062fa:	4602      	mov	r2, r0
 80062fc:	460b      	mov	r3, r1
 80062fe:	4611      	mov	r1, r2
 8006300:	4b3b      	ldr	r3, [pc, #236]	@ (80063f0 <UART_SetConfig+0x2d4>)
 8006302:	fba3 2301 	umull	r2, r3, r3, r1
 8006306:	095b      	lsrs	r3, r3, #5
 8006308:	2264      	movs	r2, #100	@ 0x64
 800630a:	fb02 f303 	mul.w	r3, r2, r3
 800630e:	1acb      	subs	r3, r1, r3
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006316:	4b36      	ldr	r3, [pc, #216]	@ (80063f0 <UART_SetConfig+0x2d4>)
 8006318:	fba3 2302 	umull	r2, r3, r3, r2
 800631c:	095b      	lsrs	r3, r3, #5
 800631e:	005b      	lsls	r3, r3, #1
 8006320:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006324:	441c      	add	r4, r3
 8006326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800632a:	2200      	movs	r2, #0
 800632c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006330:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006334:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006338:	4642      	mov	r2, r8
 800633a:	464b      	mov	r3, r9
 800633c:	1891      	adds	r1, r2, r2
 800633e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006340:	415b      	adcs	r3, r3
 8006342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006344:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006348:	4641      	mov	r1, r8
 800634a:	1851      	adds	r1, r2, r1
 800634c:	6339      	str	r1, [r7, #48]	@ 0x30
 800634e:	4649      	mov	r1, r9
 8006350:	414b      	adcs	r3, r1
 8006352:	637b      	str	r3, [r7, #52]	@ 0x34
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006360:	4659      	mov	r1, fp
 8006362:	00cb      	lsls	r3, r1, #3
 8006364:	4651      	mov	r1, sl
 8006366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800636a:	4651      	mov	r1, sl
 800636c:	00ca      	lsls	r2, r1, #3
 800636e:	4610      	mov	r0, r2
 8006370:	4619      	mov	r1, r3
 8006372:	4603      	mov	r3, r0
 8006374:	4642      	mov	r2, r8
 8006376:	189b      	adds	r3, r3, r2
 8006378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800637c:	464b      	mov	r3, r9
 800637e:	460a      	mov	r2, r1
 8006380:	eb42 0303 	adc.w	r3, r2, r3
 8006384:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006394:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800639c:	460b      	mov	r3, r1
 800639e:	18db      	adds	r3, r3, r3
 80063a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063a2:	4613      	mov	r3, r2
 80063a4:	eb42 0303 	adc.w	r3, r2, r3
 80063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80063ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80063b2:	f7fa fb41 	bl	8000a38 <__aeabi_uldivmod>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4b0d      	ldr	r3, [pc, #52]	@ (80063f0 <UART_SetConfig+0x2d4>)
 80063bc:	fba3 1302 	umull	r1, r3, r3, r2
 80063c0:	095b      	lsrs	r3, r3, #5
 80063c2:	2164      	movs	r1, #100	@ 0x64
 80063c4:	fb01 f303 	mul.w	r3, r1, r3
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	3332      	adds	r3, #50	@ 0x32
 80063ce:	4a08      	ldr	r2, [pc, #32]	@ (80063f0 <UART_SetConfig+0x2d4>)
 80063d0:	fba2 2303 	umull	r2, r3, r2, r3
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	f003 0207 	and.w	r2, r3, #7
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4422      	add	r2, r4
 80063e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80063e4:	e106      	b.n	80065f4 <UART_SetConfig+0x4d8>
 80063e6:	bf00      	nop
 80063e8:	40011000 	.word	0x40011000
 80063ec:	40011400 	.word	0x40011400
 80063f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006402:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006406:	4642      	mov	r2, r8
 8006408:	464b      	mov	r3, r9
 800640a:	1891      	adds	r1, r2, r2
 800640c:	6239      	str	r1, [r7, #32]
 800640e:	415b      	adcs	r3, r3
 8006410:	627b      	str	r3, [r7, #36]	@ 0x24
 8006412:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006416:	4641      	mov	r1, r8
 8006418:	1854      	adds	r4, r2, r1
 800641a:	4649      	mov	r1, r9
 800641c:	eb43 0501 	adc.w	r5, r3, r1
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	00eb      	lsls	r3, r5, #3
 800642a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800642e:	00e2      	lsls	r2, r4, #3
 8006430:	4614      	mov	r4, r2
 8006432:	461d      	mov	r5, r3
 8006434:	4643      	mov	r3, r8
 8006436:	18e3      	adds	r3, r4, r3
 8006438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800643c:	464b      	mov	r3, r9
 800643e:	eb45 0303 	adc.w	r3, r5, r3
 8006442:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006452:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006462:	4629      	mov	r1, r5
 8006464:	008b      	lsls	r3, r1, #2
 8006466:	4621      	mov	r1, r4
 8006468:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800646c:	4621      	mov	r1, r4
 800646e:	008a      	lsls	r2, r1, #2
 8006470:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006474:	f7fa fae0 	bl	8000a38 <__aeabi_uldivmod>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	4b60      	ldr	r3, [pc, #384]	@ (8006600 <UART_SetConfig+0x4e4>)
 800647e:	fba3 2302 	umull	r2, r3, r3, r2
 8006482:	095b      	lsrs	r3, r3, #5
 8006484:	011c      	lsls	r4, r3, #4
 8006486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800648a:	2200      	movs	r2, #0
 800648c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006490:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006494:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006498:	4642      	mov	r2, r8
 800649a:	464b      	mov	r3, r9
 800649c:	1891      	adds	r1, r2, r2
 800649e:	61b9      	str	r1, [r7, #24]
 80064a0:	415b      	adcs	r3, r3
 80064a2:	61fb      	str	r3, [r7, #28]
 80064a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064a8:	4641      	mov	r1, r8
 80064aa:	1851      	adds	r1, r2, r1
 80064ac:	6139      	str	r1, [r7, #16]
 80064ae:	4649      	mov	r1, r9
 80064b0:	414b      	adcs	r3, r1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80064c0:	4659      	mov	r1, fp
 80064c2:	00cb      	lsls	r3, r1, #3
 80064c4:	4651      	mov	r1, sl
 80064c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ca:	4651      	mov	r1, sl
 80064cc:	00ca      	lsls	r2, r1, #3
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	4642      	mov	r2, r8
 80064d6:	189b      	adds	r3, r3, r2
 80064d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064dc:	464b      	mov	r3, r9
 80064de:	460a      	mov	r2, r1
 80064e0:	eb42 0303 	adc.w	r3, r2, r3
 80064e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80064f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006500:	4649      	mov	r1, r9
 8006502:	008b      	lsls	r3, r1, #2
 8006504:	4641      	mov	r1, r8
 8006506:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800650a:	4641      	mov	r1, r8
 800650c:	008a      	lsls	r2, r1, #2
 800650e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006512:	f7fa fa91 	bl	8000a38 <__aeabi_uldivmod>
 8006516:	4602      	mov	r2, r0
 8006518:	460b      	mov	r3, r1
 800651a:	4611      	mov	r1, r2
 800651c:	4b38      	ldr	r3, [pc, #224]	@ (8006600 <UART_SetConfig+0x4e4>)
 800651e:	fba3 2301 	umull	r2, r3, r3, r1
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	2264      	movs	r2, #100	@ 0x64
 8006526:	fb02 f303 	mul.w	r3, r2, r3
 800652a:	1acb      	subs	r3, r1, r3
 800652c:	011b      	lsls	r3, r3, #4
 800652e:	3332      	adds	r3, #50	@ 0x32
 8006530:	4a33      	ldr	r2, [pc, #204]	@ (8006600 <UART_SetConfig+0x4e4>)
 8006532:	fba2 2303 	umull	r2, r3, r2, r3
 8006536:	095b      	lsrs	r3, r3, #5
 8006538:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800653c:	441c      	add	r4, r3
 800653e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006542:	2200      	movs	r2, #0
 8006544:	673b      	str	r3, [r7, #112]	@ 0x70
 8006546:	677a      	str	r2, [r7, #116]	@ 0x74
 8006548:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800654c:	4642      	mov	r2, r8
 800654e:	464b      	mov	r3, r9
 8006550:	1891      	adds	r1, r2, r2
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	415b      	adcs	r3, r3
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800655c:	4641      	mov	r1, r8
 800655e:	1851      	adds	r1, r2, r1
 8006560:	6039      	str	r1, [r7, #0]
 8006562:	4649      	mov	r1, r9
 8006564:	414b      	adcs	r3, r1
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	f04f 0200 	mov.w	r2, #0
 800656c:	f04f 0300 	mov.w	r3, #0
 8006570:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006574:	4659      	mov	r1, fp
 8006576:	00cb      	lsls	r3, r1, #3
 8006578:	4651      	mov	r1, sl
 800657a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800657e:	4651      	mov	r1, sl
 8006580:	00ca      	lsls	r2, r1, #3
 8006582:	4610      	mov	r0, r2
 8006584:	4619      	mov	r1, r3
 8006586:	4603      	mov	r3, r0
 8006588:	4642      	mov	r2, r8
 800658a:	189b      	adds	r3, r3, r2
 800658c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800658e:	464b      	mov	r3, r9
 8006590:	460a      	mov	r2, r1
 8006592:	eb42 0303 	adc.w	r3, r2, r3
 8006596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80065a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80065a4:	f04f 0200 	mov.w	r2, #0
 80065a8:	f04f 0300 	mov.w	r3, #0
 80065ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80065b0:	4649      	mov	r1, r9
 80065b2:	008b      	lsls	r3, r1, #2
 80065b4:	4641      	mov	r1, r8
 80065b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ba:	4641      	mov	r1, r8
 80065bc:	008a      	lsls	r2, r1, #2
 80065be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80065c2:	f7fa fa39 	bl	8000a38 <__aeabi_uldivmod>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <UART_SetConfig+0x4e4>)
 80065cc:	fba3 1302 	umull	r1, r3, r3, r2
 80065d0:	095b      	lsrs	r3, r3, #5
 80065d2:	2164      	movs	r1, #100	@ 0x64
 80065d4:	fb01 f303 	mul.w	r3, r1, r3
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	011b      	lsls	r3, r3, #4
 80065dc:	3332      	adds	r3, #50	@ 0x32
 80065de:	4a08      	ldr	r2, [pc, #32]	@ (8006600 <UART_SetConfig+0x4e4>)
 80065e0:	fba2 2303 	umull	r2, r3, r2, r3
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	f003 020f 	and.w	r2, r3, #15
 80065ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4422      	add	r2, r4
 80065f2:	609a      	str	r2, [r3, #8]
}
 80065f4:	bf00      	nop
 80065f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80065fa:	46bd      	mov	sp, r7
 80065fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006600:	51eb851f 	.word	0x51eb851f

08006604 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006604:	b084      	sub	sp, #16
 8006606:	b580      	push	{r7, lr}
 8006608:	b084      	sub	sp, #16
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	f107 001c 	add.w	r0, r7, #28
 8006612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006616:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800661a:	2b01      	cmp	r3, #1
 800661c:	d123      	bne.n	8006666 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006622:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006632:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006646:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800664a:	2b01      	cmp	r3, #1
 800664c:	d105      	bne.n	800665a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 faa0 	bl	8006ba0 <USB_CoreReset>
 8006660:	4603      	mov	r3, r0
 8006662:	73fb      	strb	r3, [r7, #15]
 8006664:	e01b      	b.n	800669e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa94 	bl	8006ba0 <USB_CoreReset>
 8006678:	4603      	mov	r3, r0
 800667a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800667c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006680:	2b00      	cmp	r3, #0
 8006682:	d106      	bne.n	8006692 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006688:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006690:	e005      	b.n	800669e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006696:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800669e:	7fbb      	ldrb	r3, [r7, #30]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d10b      	bne.n	80066bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f043 0206 	orr.w	r2, r3, #6
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066c8:	b004      	add	sp, #16
 80066ca:	4770      	bx	lr

080066cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f023 0201 	bic.w	r2, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
 80066f6:	460b      	mov	r3, r1
 80066f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800670a:	78fb      	ldrb	r3, [r7, #3]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d115      	bne.n	800673c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800671c:	200a      	movs	r0, #10
 800671e:	f7fb fff1 	bl	8002704 <HAL_Delay>
      ms += 10U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	330a      	adds	r3, #10
 8006726:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fa2b 	bl	8006b84 <USB_GetMode>
 800672e:	4603      	mov	r3, r0
 8006730:	2b01      	cmp	r3, #1
 8006732:	d01e      	beq.n	8006772 <USB_SetCurrentMode+0x84>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2bc7      	cmp	r3, #199	@ 0xc7
 8006738:	d9f0      	bls.n	800671c <USB_SetCurrentMode+0x2e>
 800673a:	e01a      	b.n	8006772 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800673c:	78fb      	ldrb	r3, [r7, #3]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d115      	bne.n	800676e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800674e:	200a      	movs	r0, #10
 8006750:	f7fb ffd8 	bl	8002704 <HAL_Delay>
      ms += 10U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	330a      	adds	r3, #10
 8006758:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 fa12 	bl	8006b84 <USB_GetMode>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d005      	beq.n	8006772 <USB_SetCurrentMode+0x84>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2bc7      	cmp	r3, #199	@ 0xc7
 800676a:	d9f0      	bls.n	800674e <USB_SetCurrentMode+0x60>
 800676c:	e001      	b.n	8006772 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e005      	b.n	800677e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2bc8      	cmp	r3, #200	@ 0xc8
 8006776:	d101      	bne.n	800677c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006788:	b084      	sub	sp, #16
 800678a:	b580      	push	{r7, lr}
 800678c:	b086      	sub	sp, #24
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	e009      	b.n	80067bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3340      	adds	r3, #64	@ 0x40
 80067ae:	009b      	lsls	r3, r3, #2
 80067b0:	4413      	add	r3, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3301      	adds	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2b0e      	cmp	r3, #14
 80067c0:	d9f2      	bls.n	80067a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80067c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d11c      	bne.n	8006804 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80067d8:	f043 0302 	orr.w	r3, r3, #2
 80067dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	639a      	str	r2, [r3, #56]	@ 0x38
 8006802:	e00b      	b.n	800681c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006808:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006814:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006822:	461a      	mov	r2, r3
 8006824:	2300      	movs	r3, #0
 8006826:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006828:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800682c:	2b01      	cmp	r3, #1
 800682e:	d10d      	bne.n	800684c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006838:	2100      	movs	r1, #0
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f968 	bl	8006b10 <USB_SetDevSpeed>
 8006840:	e008      	b.n	8006854 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006842:	2101      	movs	r1, #1
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f963 	bl	8006b10 <USB_SetDevSpeed>
 800684a:	e003      	b.n	8006854 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800684c:	2103      	movs	r1, #3
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f95e 	bl	8006b10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006854:	2110      	movs	r1, #16
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f8fa 	bl	8006a50 <USB_FlushTxFifo>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f924 	bl	8006ab4 <USB_FlushRxFifo>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d001      	beq.n	8006876 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800687c:	461a      	mov	r2, r3
 800687e:	2300      	movs	r3, #0
 8006880:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006888:	461a      	mov	r2, r3
 800688a:	2300      	movs	r3, #0
 800688c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006894:	461a      	mov	r2, r3
 8006896:	2300      	movs	r3, #0
 8006898:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	e043      	b.n	8006928 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	015a      	lsls	r2, r3, #5
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068b6:	d118      	bne.n	80068ea <USB_DevInit+0x162>
    {
      if (i == 0U)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10a      	bne.n	80068d4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ca:	461a      	mov	r2, r3
 80068cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	e013      	b.n	80068fc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e0:	461a      	mov	r2, r3
 80068e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	e008      	b.n	80068fc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f6:	461a      	mov	r2, r3
 80068f8:	2300      	movs	r3, #0
 80068fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006908:	461a      	mov	r2, r3
 800690a:	2300      	movs	r3, #0
 800690c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800691a:	461a      	mov	r2, r3
 800691c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006920:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	3301      	adds	r3, #1
 8006926:	613b      	str	r3, [r7, #16]
 8006928:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800692c:	461a      	mov	r2, r3
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	4293      	cmp	r3, r2
 8006932:	d3b5      	bcc.n	80068a0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]
 8006938:	e043      	b.n	80069c2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800694c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006950:	d118      	bne.n	8006984 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	015a      	lsls	r2, r3, #5
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006964:	461a      	mov	r2, r3
 8006966:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	e013      	b.n	8006996 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	015a      	lsls	r2, r3, #5
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	4413      	add	r3, r2
 8006976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697a:	461a      	mov	r2, r3
 800697c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	e008      	b.n	8006996 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006990:	461a      	mov	r2, r3
 8006992:	2300      	movs	r3, #0
 8006994:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a2:	461a      	mov	r2, r3
 80069a4:	2300      	movs	r3, #0
 80069a6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069b4:	461a      	mov	r2, r3
 80069b6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	3301      	adds	r3, #1
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80069c6:	461a      	mov	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d3b5      	bcc.n	800693a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80069ee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80069f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d105      	bne.n	8006a04 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f043 0210 	orr.w	r2, r3, #16
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	699a      	ldr	r2, [r3, #24]
 8006a08:	4b10      	ldr	r3, [pc, #64]	@ (8006a4c <USB_DevInit+0x2c4>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006a10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f043 0208 	orr.w	r2, r3, #8
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006a24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d107      	bne.n	8006a3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a34:	f043 0304 	orr.w	r3, r3, #4
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a48:	b004      	add	sp, #16
 8006a4a:	4770      	bx	lr
 8006a4c:	803c3800 	.word	0x803c3800

08006a50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3301      	adds	r3, #1
 8006a62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a6a:	d901      	bls.n	8006a70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e01b      	b.n	8006aa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	daf2      	bge.n	8006a5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	019b      	lsls	r3, r3, #6
 8006a80:	f043 0220 	orr.w	r2, r3, #32
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a94:	d901      	bls.n	8006a9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e006      	b.n	8006aa8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d0f0      	beq.n	8006a88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006acc:	d901      	bls.n	8006ad2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e018      	b.n	8006b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	daf2      	bge.n	8006ac0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2210      	movs	r2, #16
 8006ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006af0:	d901      	bls.n	8006af6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e006      	b.n	8006b04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b10      	cmp	r3, #16
 8006b00:	d0f0      	beq.n	8006ae4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	460b      	mov	r3, r1
 8006b1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b30:	4313      	orrs	r3, r2
 8006b32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b085      	sub	sp, #20
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b5c:	f023 0303 	bic.w	r3, r3, #3
 8006b60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b70:	f043 0302 	orr.w	r3, r3, #2
 8006b74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f003 0301 	and.w	r3, r3, #1
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006bb8:	d901      	bls.n	8006bbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006bba:	2303      	movs	r3, #3
 8006bbc:	e01b      	b.n	8006bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	daf2      	bge.n	8006bac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f043 0201 	orr.w	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006be2:	d901      	bls.n	8006be8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e006      	b.n	8006bf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0301 	and.w	r3, r3, #1
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d0f0      	beq.n	8006bd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <__itoa>:
 8006c02:	1e93      	subs	r3, r2, #2
 8006c04:	2b22      	cmp	r3, #34	@ 0x22
 8006c06:	b510      	push	{r4, lr}
 8006c08:	460c      	mov	r4, r1
 8006c0a:	d904      	bls.n	8006c16 <__itoa+0x14>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	700b      	strb	r3, [r1, #0]
 8006c10:	461c      	mov	r4, r3
 8006c12:	4620      	mov	r0, r4
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	2a0a      	cmp	r2, #10
 8006c18:	d109      	bne.n	8006c2e <__itoa+0x2c>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	da07      	bge.n	8006c2e <__itoa+0x2c>
 8006c1e:	232d      	movs	r3, #45	@ 0x2d
 8006c20:	700b      	strb	r3, [r1, #0]
 8006c22:	4240      	negs	r0, r0
 8006c24:	2101      	movs	r1, #1
 8006c26:	4421      	add	r1, r4
 8006c28:	f000 f806 	bl	8006c38 <__utoa>
 8006c2c:	e7f1      	b.n	8006c12 <__itoa+0x10>
 8006c2e:	2100      	movs	r1, #0
 8006c30:	e7f9      	b.n	8006c26 <__itoa+0x24>

08006c32 <itoa>:
 8006c32:	f7ff bfe6 	b.w	8006c02 <__itoa>
	...

08006c38 <__utoa>:
 8006c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c3a:	4c1f      	ldr	r4, [pc, #124]	@ (8006cb8 <__utoa+0x80>)
 8006c3c:	b08b      	sub	sp, #44	@ 0x2c
 8006c3e:	4605      	mov	r5, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	466e      	mov	r6, sp
 8006c44:	f104 0c20 	add.w	ip, r4, #32
 8006c48:	6820      	ldr	r0, [r4, #0]
 8006c4a:	6861      	ldr	r1, [r4, #4]
 8006c4c:	4637      	mov	r7, r6
 8006c4e:	c703      	stmia	r7!, {r0, r1}
 8006c50:	3408      	adds	r4, #8
 8006c52:	4564      	cmp	r4, ip
 8006c54:	463e      	mov	r6, r7
 8006c56:	d1f7      	bne.n	8006c48 <__utoa+0x10>
 8006c58:	7921      	ldrb	r1, [r4, #4]
 8006c5a:	7139      	strb	r1, [r7, #4]
 8006c5c:	1e91      	subs	r1, r2, #2
 8006c5e:	6820      	ldr	r0, [r4, #0]
 8006c60:	6038      	str	r0, [r7, #0]
 8006c62:	2922      	cmp	r1, #34	@ 0x22
 8006c64:	f04f 0100 	mov.w	r1, #0
 8006c68:	d904      	bls.n	8006c74 <__utoa+0x3c>
 8006c6a:	7019      	strb	r1, [r3, #0]
 8006c6c:	460b      	mov	r3, r1
 8006c6e:	4618      	mov	r0, r3
 8006c70:	b00b      	add	sp, #44	@ 0x2c
 8006c72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c74:	1e58      	subs	r0, r3, #1
 8006c76:	4684      	mov	ip, r0
 8006c78:	fbb5 f7f2 	udiv	r7, r5, r2
 8006c7c:	fb02 5617 	mls	r6, r2, r7, r5
 8006c80:	3628      	adds	r6, #40	@ 0x28
 8006c82:	446e      	add	r6, sp
 8006c84:	460c      	mov	r4, r1
 8006c86:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006c8a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006c8e:	462e      	mov	r6, r5
 8006c90:	42b2      	cmp	r2, r6
 8006c92:	f101 0101 	add.w	r1, r1, #1
 8006c96:	463d      	mov	r5, r7
 8006c98:	d9ee      	bls.n	8006c78 <__utoa+0x40>
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	545a      	strb	r2, [r3, r1]
 8006c9e:	1919      	adds	r1, r3, r4
 8006ca0:	1aa5      	subs	r5, r4, r2
 8006ca2:	42aa      	cmp	r2, r5
 8006ca4:	dae3      	bge.n	8006c6e <__utoa+0x36>
 8006ca6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006caa:	780e      	ldrb	r6, [r1, #0]
 8006cac:	7006      	strb	r6, [r0, #0]
 8006cae:	3201      	adds	r2, #1
 8006cb0:	f801 5901 	strb.w	r5, [r1], #-1
 8006cb4:	e7f4      	b.n	8006ca0 <__utoa+0x68>
 8006cb6:	bf00      	nop
 8006cb8:	08006e62 	.word	0x08006e62

08006cbc <memset>:
 8006cbc:	4402      	add	r2, r0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d100      	bne.n	8006cc6 <memset+0xa>
 8006cc4:	4770      	bx	lr
 8006cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cca:	e7f9      	b.n	8006cc0 <memset+0x4>

08006ccc <strcat>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	4602      	mov	r2, r0
 8006cd0:	7814      	ldrb	r4, [r2, #0]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	3201      	adds	r2, #1
 8006cd6:	2c00      	cmp	r4, #0
 8006cd8:	d1fa      	bne.n	8006cd0 <strcat+0x4>
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ce4:	2a00      	cmp	r2, #0
 8006ce6:	d1f9      	bne.n	8006cdc <strcat+0x10>
 8006ce8:	bd10      	pop	{r4, pc}
	...

08006cec <__libc_init_array>:
 8006cec:	b570      	push	{r4, r5, r6, lr}
 8006cee:	4d0d      	ldr	r5, [pc, #52]	@ (8006d24 <__libc_init_array+0x38>)
 8006cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8006d28 <__libc_init_array+0x3c>)
 8006cf2:	1b64      	subs	r4, r4, r5
 8006cf4:	10a4      	asrs	r4, r4, #2
 8006cf6:	2600      	movs	r6, #0
 8006cf8:	42a6      	cmp	r6, r4
 8006cfa:	d109      	bne.n	8006d10 <__libc_init_array+0x24>
 8006cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8006d2c <__libc_init_array+0x40>)
 8006cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8006d30 <__libc_init_array+0x44>)
 8006d00:	f000 f818 	bl	8006d34 <_init>
 8006d04:	1b64      	subs	r4, r4, r5
 8006d06:	10a4      	asrs	r4, r4, #2
 8006d08:	2600      	movs	r6, #0
 8006d0a:	42a6      	cmp	r6, r4
 8006d0c:	d105      	bne.n	8006d1a <__libc_init_array+0x2e>
 8006d0e:	bd70      	pop	{r4, r5, r6, pc}
 8006d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d14:	4798      	blx	r3
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7ee      	b.n	8006cf8 <__libc_init_array+0xc>
 8006d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d1e:	4798      	blx	r3
 8006d20:	3601      	adds	r6, #1
 8006d22:	e7f2      	b.n	8006d0a <__libc_init_array+0x1e>
 8006d24:	08006e90 	.word	0x08006e90
 8006d28:	08006e90 	.word	0x08006e90
 8006d2c:	08006e90 	.word	0x08006e90
 8006d30:	08006e94 	.word	0x08006e94

08006d34 <_init>:
 8006d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d36:	bf00      	nop
 8006d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d3a:	bc08      	pop	{r3}
 8006d3c:	469e      	mov	lr, r3
 8006d3e:	4770      	bx	lr

08006d40 <_fini>:
 8006d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d42:	bf00      	nop
 8006d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d46:	bc08      	pop	{r3}
 8006d48:	469e      	mov	lr, r3
 8006d4a:	4770      	bx	lr
