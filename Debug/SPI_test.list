
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059b4  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005b60  08005b60  00006b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c78  08005c78  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005c78  08005c78  00006c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c80  08005c80  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c80  08005c80  00006c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c84  08005c84  00006c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005c88  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          000001c8  20000018  20000018  00007018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011fef  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b25  00000000  00000000  00019037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f50  00000000  00000000  0001bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd4  00000000  00000000  0001cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274e4  00000000  00000000  0001d684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b02  00000000  00000000  00044b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5320  00000000  00000000  0005966a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013e98a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fdc  00000000  00000000  0013e9d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001429ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005b48 	.word	0x08005b48

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08005b48 	.word	0x08005b48

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	@ 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_uldivmod>:
 8000a38:	b953      	cbnz	r3, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3a:	b94a      	cbnz	r2, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	bf08      	it	eq
 8000a40:	2800      	cmpeq	r0, #0
 8000a42:	bf1c      	itt	ne
 8000a44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a4c:	f000 b96a 	b.w	8000d24 <__aeabi_idiv0>
 8000a50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a58:	f000 f806 	bl	8000a68 <__udivmoddi4>
 8000a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a64:	b004      	add	sp, #16
 8000a66:	4770      	bx	lr

08000a68 <__udivmoddi4>:
 8000a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a6c:	9d08      	ldr	r5, [sp, #32]
 8000a6e:	460c      	mov	r4, r1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d14e      	bne.n	8000b12 <__udivmoddi4+0xaa>
 8000a74:	4694      	mov	ip, r2
 8000a76:	458c      	cmp	ip, r1
 8000a78:	4686      	mov	lr, r0
 8000a7a:	fab2 f282 	clz	r2, r2
 8000a7e:	d962      	bls.n	8000b46 <__udivmoddi4+0xde>
 8000a80:	b14a      	cbz	r2, 8000a96 <__udivmoddi4+0x2e>
 8000a82:	f1c2 0320 	rsb	r3, r2, #32
 8000a86:	4091      	lsls	r1, r2
 8000a88:	fa20 f303 	lsr.w	r3, r0, r3
 8000a8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a90:	4319      	orrs	r1, r3
 8000a92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9a:	fa1f f68c 	uxth.w	r6, ip
 8000a9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aa2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aa6:	fb07 1114 	mls	r1, r7, r4, r1
 8000aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aae:	fb04 f106 	mul.w	r1, r4, r6
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x64>
 8000ab6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000abe:	f080 8112 	bcs.w	8000ce6 <__udivmoddi4+0x27e>
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	f240 810f 	bls.w	8000ce6 <__udivmoddi4+0x27e>
 8000ac8:	3c02      	subs	r4, #2
 8000aca:	4463      	add	r3, ip
 8000acc:	1a59      	subs	r1, r3, r1
 8000ace:	fa1f f38e 	uxth.w	r3, lr
 8000ad2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad6:	fb07 1110 	mls	r1, r7, r0, r1
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f606 	mul.w	r6, r0, r6
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	d90a      	bls.n	8000afc <__udivmoddi4+0x94>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aee:	f080 80fc 	bcs.w	8000cea <__udivmoddi4+0x282>
 8000af2:	429e      	cmp	r6, r3
 8000af4:	f240 80f9 	bls.w	8000cea <__udivmoddi4+0x282>
 8000af8:	4463      	add	r3, ip
 8000afa:	3802      	subs	r0, #2
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b02:	2100      	movs	r1, #0
 8000b04:	b11d      	cbz	r5, 8000b0e <__udivmoddi4+0xa6>
 8000b06:	40d3      	lsrs	r3, r2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d905      	bls.n	8000b22 <__udivmoddi4+0xba>
 8000b16:	b10d      	cbz	r5, 8000b1c <__udivmoddi4+0xb4>
 8000b18:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4608      	mov	r0, r1
 8000b20:	e7f5      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000b22:	fab3 f183 	clz	r1, r3
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d146      	bne.n	8000bb8 <__udivmoddi4+0x150>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d302      	bcc.n	8000b34 <__udivmoddi4+0xcc>
 8000b2e:	4290      	cmp	r0, r2
 8000b30:	f0c0 80f0 	bcc.w	8000d14 <__udivmoddi4+0x2ac>
 8000b34:	1a86      	subs	r6, r0, r2
 8000b36:	eb64 0303 	sbc.w	r3, r4, r3
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d0e6      	beq.n	8000b0e <__udivmoddi4+0xa6>
 8000b40:	e9c5 6300 	strd	r6, r3, [r5]
 8000b44:	e7e3      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x204>
 8000b4c:	eba1 040c 	sub.w	r4, r1, ip
 8000b50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b54:	fa1f f78c 	uxth.w	r7, ip
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b62:	fb08 4416 	mls	r4, r8, r6, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb07 f006 	mul.w	r0, r7, r6
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x11c>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x11a>
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	f200 80cd 	bhi.w	8000d1c <__udivmoddi4+0x2b4>
 8000b82:	4626      	mov	r6, r4
 8000b84:	1a1c      	subs	r4, r3, r0
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b96:	fb00 f707 	mul.w	r7, r0, r7
 8000b9a:	429f      	cmp	r7, r3
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x148>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x146>
 8000ba8:	429f      	cmp	r7, r3
 8000baa:	f200 80b0 	bhi.w	8000d0e <__udivmoddi4+0x2a6>
 8000bae:	4620      	mov	r0, r4
 8000bb0:	1bdb      	subs	r3, r3, r7
 8000bb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb6:	e7a5      	b.n	8000b04 <__udivmoddi4+0x9c>
 8000bb8:	f1c1 0620 	rsb	r6, r1, #32
 8000bbc:	408b      	lsls	r3, r1
 8000bbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000bc2:	431f      	orrs	r7, r3
 8000bc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000bcc:	ea43 030c 	orr.w	r3, r3, ip
 8000bd0:	40f4      	lsrs	r4, r6
 8000bd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000bd6:	0c38      	lsrs	r0, r7, #16
 8000bd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bdc:	fbb4 fef0 	udiv	lr, r4, r0
 8000be0:	fa1f fc87 	uxth.w	ip, r7
 8000be4:	fb00 441e 	mls	r4, r0, lr, r4
 8000be8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bec:	fb0e f90c 	mul.w	r9, lr, ip
 8000bf0:	45a1      	cmp	r9, r4
 8000bf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x1a6>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bfe:	f080 8084 	bcs.w	8000d0a <__udivmoddi4+0x2a2>
 8000c02:	45a1      	cmp	r9, r4
 8000c04:	f240 8081 	bls.w	8000d0a <__udivmoddi4+0x2a2>
 8000c08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	eba4 0409 	sub.w	r4, r4, r9
 8000c12:	fa1f f983 	uxth.w	r9, r3
 8000c16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x1d2>
 8000c2a:	193c      	adds	r4, r7, r4
 8000c2c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c30:	d267      	bcs.n	8000d02 <__udivmoddi4+0x29a>
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d965      	bls.n	8000d02 <__udivmoddi4+0x29a>
 8000c36:	3b02      	subs	r3, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c42:	eba4 040c 	sub.w	r4, r4, ip
 8000c46:	429c      	cmp	r4, r3
 8000c48:	46ce      	mov	lr, r9
 8000c4a:	469c      	mov	ip, r3
 8000c4c:	d351      	bcc.n	8000cf2 <__udivmoddi4+0x28a>
 8000c4e:	d04e      	beq.n	8000cee <__udivmoddi4+0x286>
 8000c50:	b155      	cbz	r5, 8000c68 <__udivmoddi4+0x200>
 8000c52:	ebb8 030e 	subs.w	r3, r8, lr
 8000c56:	eb64 040c 	sbc.w	r4, r4, ip
 8000c5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431e      	orrs	r6, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	e9c5 6400 	strd	r6, r4, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e750      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f103 	lsr.w	r1, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	fa24 f303 	lsr.w	r3, r4, r3
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	430c      	orrs	r4, r1
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3110 	mls	r1, r8, r0, r3
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f107 	mul.w	r1, r0, r7
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x24c>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000caa:	d22c      	bcs.n	8000d06 <__udivmoddi4+0x29e>
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d92a      	bls.n	8000d06 <__udivmoddi4+0x29e>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cbc:	fb08 3311 	mls	r3, r8, r1, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb01 f307 	mul.w	r3, r1, r7
 8000cc8:	42a3      	cmp	r3, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x276>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cd4:	d213      	bcs.n	8000cfe <__udivmoddi4+0x296>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d911      	bls.n	8000cfe <__udivmoddi4+0x296>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4464      	add	r4, ip
 8000cde:	1ae4      	subs	r4, r4, r3
 8000ce0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ce4:	e739      	b.n	8000b5a <__udivmoddi4+0xf2>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	e6f0      	b.n	8000acc <__udivmoddi4+0x64>
 8000cea:	4608      	mov	r0, r1
 8000cec:	e706      	b.n	8000afc <__udivmoddi4+0x94>
 8000cee:	45c8      	cmp	r8, r9
 8000cf0:	d2ae      	bcs.n	8000c50 <__udivmoddi4+0x1e8>
 8000cf2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cf6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7a8      	b.n	8000c50 <__udivmoddi4+0x1e8>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	e7ed      	b.n	8000cde <__udivmoddi4+0x276>
 8000d02:	4603      	mov	r3, r0
 8000d04:	e799      	b.n	8000c3a <__udivmoddi4+0x1d2>
 8000d06:	4630      	mov	r0, r6
 8000d08:	e7d4      	b.n	8000cb4 <__udivmoddi4+0x24c>
 8000d0a:	46d6      	mov	lr, sl
 8000d0c:	e77f      	b.n	8000c0e <__udivmoddi4+0x1a6>
 8000d0e:	4463      	add	r3, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e74d      	b.n	8000bb0 <__udivmoddi4+0x148>
 8000d14:	4606      	mov	r6, r0
 8000d16:	4623      	mov	r3, r4
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e70f      	b.n	8000b3c <__udivmoddi4+0xd4>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	e730      	b.n	8000b84 <__udivmoddi4+0x11c>
 8000d22:	bf00      	nop

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:

#define MAX_BUFFER 50 // Example buffer size
uint8_t uartBuffer[MAX_BUFFER];

int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2c:	f001 faba 	bl	80022a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d30:	f000 f81a 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 8000d34:	f000 f884 	bl	8000e40 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d38:	f000 f9da 	bl	80010f0 <MX_RTC_Init>

  // Init GPIO & SPI
  MX_GPIO_Init();
 8000d3c:	f000 f92a 	bl	8000f94 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d40:	f000 f8f2 	bl	8000f28 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
 8000d44:	2000      	movs	r0, #0
 8000d46:	f001 fa43 	bl	80021d0 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f001 fa40 	bl	80021d0 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000d50:	2002      	movs	r0, #2
 8000d52:	f001 fa3d 	bl	80021d0 <BSP_LED_Init>

  APP_init();
 8000d56:	f001 f875 	bl	8001e44 <APP_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    APP_update();
 8000d5a:	f001 f8ac 	bl	8001eb6 <APP_update>

    BSP_LED_Toggle(LED1); // Looping signal
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f001 fa86 	bl	8002270 <BSP_LED_Toggle>
    APP_update();
 8000d64:	bf00      	nop
 8000d66:	e7f8      	b.n	8000d5a <main+0x32>

08000d68 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b094      	sub	sp, #80	@ 0x50
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0320 	add.w	r3, r7, #32
 8000d72:	2230      	movs	r2, #48	@ 0x30
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f004 feaa 	bl	8005ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	4b29      	ldr	r3, [pc, #164]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d94:	4a28      	ldr	r2, [pc, #160]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9c:	4b26      	ldr	r3, [pc, #152]	@ (8000e38 <SystemClock_Config+0xd0>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <SystemClock_Config+0xd4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a22      	ldr	r2, [pc, #136]	@ (8000e3c <SystemClock_Config+0xd4>)
 8000db2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b20      	ldr	r3, [pc, #128]	@ (8000e3c <SystemClock_Config+0xd4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000dc4:	2309      	movs	r3, #9
 8000dc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dc8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000de0:	23a8      	movs	r3, #168	@ 0xa8
 8000de2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de8:	2307      	movs	r3, #7
 8000dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	4618      	mov	r0, r3
 8000df2:	f002 facb 	bl	800338c <HAL_RCC_OscConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000dfc:	f000 f99e 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e04:	2302      	movs	r3, #2
 8000e06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f002 fd2c 	bl	800387c <HAL_RCC_ClockConfig>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e2a:	f000 f987 	bl	800113c <Error_Handler>
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3750      	adds	r7, #80	@ 0x50
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e46:	4b33      	ldr	r3, [pc, #204]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e48:	4a33      	ldr	r2, [pc, #204]	@ (8000f18 <MX_I2C1_Init+0xd8>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e4c:	4b31      	ldr	r3, [pc, #196]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e4e:	4a33      	ldr	r2, [pc, #204]	@ (8000f1c <MX_I2C1_Init+0xdc>)
 8000e50:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e52:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e58:	4b2e      	ldr	r3, [pc, #184]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e66:	4b2b      	ldr	r3, [pc, #172]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e6c:	4b29      	ldr	r3, [pc, #164]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	621a      	str	r2, [r3, #32]

  // I2C init code
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <MX_I2C1_Init+0xe0>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a26      	ldr	r2, [pc, #152]	@ (8000f20 <MX_I2C1_Init+0xe0>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <MX_I2C1_Init+0xe0>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea0:	2312      	movs	r3, #18
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eac:	2304      	movs	r3, #4
 8000eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481b      	ldr	r0, [pc, #108]	@ (8000f24 <MX_I2C1_Init+0xe4>)
 8000eb8:	f001 fb70 	bl	800259c <HAL_GPIO_Init>

	 /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_I2C1_Init+0xe0>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	4a16      	ldr	r2, [pc, #88]	@ (8000f20 <MX_I2C1_Init+0xe0>)
 8000ec6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_I2C1_Init+0xe0>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ed8:	480e      	ldr	r0, [pc, #56]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000eda:	f001 fd3f 	bl	800295c <HAL_I2C_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_I2C1_Init+0xa8>
  {
    Error_Handler();
 8000ee4:	f000 f92a 	bl	800113c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480a      	ldr	r0, [pc, #40]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000eec:	f002 f9d3 	bl	8003296 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_I2C1_Init+0xba>
  {
    Error_Handler();
 8000ef6:	f000 f921 	bl	800113c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000efa:	2100      	movs	r1, #0
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_I2C1_Init+0xd4>)
 8000efe:	f002 fa06 	bl	800330e <HAL_I2CEx_ConfigDigitalFilter>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_I2C1_Init+0xcc>
  {
    Error_Handler();
 8000f08:	f000 f918 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000034 	.word	0x20000034
 8000f18:	40005400 	.word	0x40005400
 8000f1c:	000186a0 	.word	0x000186a0
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40020400 	.word	0x40020400

08000f28 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */

    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f2e:	4a18      	ldr	r2, [pc, #96]	@ (8000f90 <MX_SPI1_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f38:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f46:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f58:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f5c:	2238      	movs	r2, #56	@ 0x38
 8000f5e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f74:	220a      	movs	r2, #10
 8000f76:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	@ (8000f8c <MX_SPI1_Init+0x64>)
 8000f7a:	f003 fb6b 	bl	8004654 <HAL_SPI_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_SPI1_Init+0x60>
    {
        BME280_Error_Handler();
 8000f84:	f000 fb20 	bl	80015c8 <BME280_Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000088 	.word	0x20000088
 8000f90:	40013000 	.word	0x40013000

08000f94 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
 8000fae:	4b4c      	ldr	r3, [pc, #304]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a4b      	ldr	r2, [pc, #300]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b49      	ldr	r3, [pc, #292]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	61bb      	str	r3, [r7, #24]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	4b45      	ldr	r3, [pc, #276]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a44      	ldr	r2, [pc, #272]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b42      	ldr	r3, [pc, #264]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a3d      	ldr	r2, [pc, #244]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b37      	ldr	r3, [pc, #220]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a36      	ldr	r2, [pc, #216]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b34      	ldr	r3, [pc, #208]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a2f      	ldr	r2, [pc, #188]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8001024:	f043 0308 	orr.w	r3, r3, #8
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b2d      	ldr	r3, [pc, #180]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	4b29      	ldr	r3, [pc, #164]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a28      	ldr	r2, [pc, #160]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8001040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b26      	ldr	r3, [pc, #152]	@ (80010e0 <MX_GPIO_Init+0x14c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f244 0189 	movw	r1, #16521	@ 0x4089
 8001058:	4822      	ldr	r0, [pc, #136]	@ (80010e4 <MX_GPIO_Init+0x150>)
 800105a:	f001 fc4b 	bl	80028f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	2140      	movs	r1, #64	@ 0x40
 8001062:	4821      	ldr	r0, [pc, #132]	@ (80010e8 <MX_GPIO_Init+0x154>)
 8001064:	f001 fc46 	bl	80028f4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001068:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	481b      	ldr	r0, [pc, #108]	@ (80010ec <MX_GPIO_Init+0x158>)
 8001080:	f001 fa8c 	bl	800259c <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin CS_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin;
 8001084:	f244 0389 	movw	r3, #16521	@ 0x4089
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4811      	ldr	r0, [pc, #68]	@ (80010e4 <MX_GPIO_Init+0x150>)
 800109e:	f001 fa7d 	bl	800259c <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010a2:	2340      	movs	r3, #64	@ 0x40
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	4619      	mov	r1, r3
 80010b8:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <MX_GPIO_Init+0x154>)
 80010ba:	f001 fa6f 	bl	800259c <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010be:	2380      	movs	r3, #128	@ 0x80
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_GPIO_Init+0x154>)
 80010d2:	f001 fa63 	bl	800259c <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	@ 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020400 	.word	0x40020400
 80010e8:	40021800 	.word	0x40021800
 80010ec:	40020800 	.word	0x40020800

080010f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80010f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001134 <MX_RTC_Init+0x44>)
 80010f6:	4a10      	ldr	r2, [pc, #64]	@ (8001138 <MX_RTC_Init+0x48>)
 80010f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_RTC_Init+0x44>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_RTC_Init+0x44>)
 8001102:	227f      	movs	r2, #127	@ 0x7f
 8001104:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_RTC_Init+0x44>)
 8001108:	22ff      	movs	r2, #255	@ 0xff
 800110a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_RTC_Init+0x44>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_RTC_Init+0x44>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_RTC_Init+0x44>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_RTC_Init+0x44>)
 8001120:	f002 ff8c 	bl	800403c <HAL_RTC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800112a:	f000 f807 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200000e0 	.word	0x200000e0
 8001138:	40002800 	.word	0x40002800

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	bf00      	nop
 8001146:	e7fd      	b.n	8001144 <Error_Handler+0x8>

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a0f      	ldr	r2, [pc, #60]	@ (8001194 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a19      	ldr	r2, [pc, #100]	@ (800121c <HAL_I2C_MspInit+0x84>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d12c      	bne.n	8001214 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a17      	ldr	r2, [pc, #92]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80011d6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80011da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011dc:	2312      	movs	r3, #18
 80011de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011e8:	2304      	movs	r3, #4
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	480c      	ldr	r0, [pc, #48]	@ (8001224 <HAL_I2C_MspInit+0x8c>)
 80011f4:	f001 f9d2 	bl	800259c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001206:	6413      	str	r3, [r2, #64]	@ 0x40
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_I2C_MspInit+0x88>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3728      	adds	r7, #40	@ 0x28
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400

08001228 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08e      	sub	sp, #56	@ 0x38
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	2230      	movs	r2, #48	@ 0x30
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f004 fc49 	bl	8005ad0 <memset>
  if(hrtc->Instance==RTC)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a0c      	ldr	r2, [pc, #48]	@ (8001274 <HAL_RTC_MspInit+0x4c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d111      	bne.n	800126c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001248:	2320      	movs	r3, #32
 800124a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800124c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001250:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4618      	mov	r0, r3
 8001258:	f002 fd30 	bl	8003cbc <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001262:	f7ff ff6b 	bl	800113c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001266:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <HAL_RTC_MspInit+0x50>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3738      	adds	r7, #56	@ 0x38
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40002800 	.word	0x40002800
 8001278:	42470e3c 	.word	0x42470e3c

0800127c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a28      	ldr	r2, [pc, #160]	@ (800133c <HAL_SPI_MspInit+0xc0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d149      	bne.n	8001332 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	4a26      	ldr	r2, [pc, #152]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a18      	ldr	r2, [pc, #96]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HAL_SPI_MspInit+0xc4>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012f2:	2360      	movs	r3, #96	@ 0x60
 80012f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001302:	2305      	movs	r3, #5
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	480d      	ldr	r0, [pc, #52]	@ (8001344 <HAL_SPI_MspInit+0xc8>)
 800130e:	f001 f945 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001312:	2320      	movs	r3, #32
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001322:	2305      	movs	r3, #5
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	4806      	ldr	r0, [pc, #24]	@ (8001348 <HAL_SPI_MspInit+0xcc>)
 800132e:	f001 f935 	bl	800259c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	@ 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40013000 	.word	0x40013000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a19      	ldr	r2, [pc, #100]	@ (80013d0 <HAL_UART_MspInit+0x84>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d12c      	bne.n	80013c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b18      	ldr	r3, [pc, #96]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a17      	ldr	r2, [pc, #92]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b15      	ldr	r3, [pc, #84]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <HAL_UART_MspInit+0x88>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013a6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013b8:	2307      	movs	r3, #7
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	@ (80013d8 <HAL_UART_MspInit+0x8c>)
 80013c4:	f001 f8ea 	bl	800259c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013c8:	bf00      	nop
 80013ca:	3728      	adds	r7, #40	@ 0x28
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40004800 	.word	0x40004800
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40020c00 	.word	0x40020c00

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <NMI_Handler+0x4>

080013e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e8:	bf00      	nop
 80013ea:	e7fd      	b.n	80013e8 <HardFault_Handler+0x4>

080013ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <MemManage_Handler+0x4>

080013f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <UsageFault_Handler+0x4>

08001404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001432:	f000 ff89 	bl	8002348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001440:	4b06      	ldr	r3, [pc, #24]	@ (800145c <SystemInit+0x20>)
 8001442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001446:	4a05      	ldr	r2, [pc, #20]	@ (800145c <SystemInit+0x20>)
 8001448:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800144c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000ed00 	.word	0xe000ed00

08001460 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001460:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001498 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001464:	f7ff ffea 	bl	800143c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001468:	480c      	ldr	r0, [pc, #48]	@ (800149c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800146a:	490d      	ldr	r1, [pc, #52]	@ (80014a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800146c:	4a0d      	ldr	r2, [pc, #52]	@ (80014a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001480:	4c0a      	ldr	r4, [pc, #40]	@ (80014ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800148e:	f004 fb37 	bl	8005b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001492:	f7ff fc49 	bl	8000d28 <main>
  bx  lr    
 8001496:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001498:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800149c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80014a4:	08005c88 	.word	0x08005c88
  ldr r2, =_sbss
 80014a8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014ac:	200001e0 	.word	0x200001e0

080014b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b0:	e7fe      	b.n	80014b0 <ADC_IRQHandler>
	...

080014b4 <SPI_Write>:
int8_t dig_H6;

static BME280_S32_t tADC, hADC;

static void SPI_Write(uint8_t reg, uint8_t *data, uint16_t size)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg & WRITE_CMD_BIT; // Apply the write command mask.
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateLow);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2108      	movs	r1, #8
 80014d2:	480d      	ldr	r0, [pc, #52]	@ (8001508 <SPI_Write+0x54>)
 80014d4:	f001 fa0e 	bl	80028f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 80014d8:	f107 010f 	add.w	r1, r7, #15
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014e0:	2201      	movs	r2, #1
 80014e2:	480a      	ldr	r0, [pc, #40]	@ (800150c <SPI_Write+0x58>)
 80014e4:	f003 f93f 	bl	8004766 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80014e8:	88ba      	ldrh	r2, [r7, #4]
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	4806      	ldr	r0, [pc, #24]	@ (800150c <SPI_Write+0x58>)
 80014f2:	f003 f938 	bl	8004766 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateHigh);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2108      	movs	r1, #8
 80014fa:	4803      	ldr	r0, [pc, #12]	@ (8001508 <SPI_Write+0x54>)
 80014fc:	f001 f9fa 	bl	80028f4 <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	3710      	adds	r7, #16
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40020400 	.word	0x40020400
 800150c:	20000088 	.word	0x20000088

08001510 <SPI_Read>:

static void SPI_Read(uint8_t reg, uint8_t *data, uint16_t size)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg | READ_CMD_BIT; // Apply the read command mask.
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001526:	b2db      	uxtb	r3, r3
 8001528:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateLow);
 800152a:	2200      	movs	r2, #0
 800152c:	2108      	movs	r1, #8
 800152e:	480d      	ldr	r0, [pc, #52]	@ (8001564 <SPI_Read+0x54>)
 8001530:	f001 f9e0 	bl	80028f4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), TIMEOUT);
 8001534:	f107 010f 	add.w	r1, r7, #15
 8001538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153c:	2201      	movs	r2, #1
 800153e:	480a      	ldr	r0, [pc, #40]	@ (8001568 <SPI_Read+0x58>)
 8001540:	f003 f911 	bl	8004766 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, size, TIMEOUT);
 8001544:	88ba      	ldrh	r2, [r7, #4]
 8001546:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800154a:	6839      	ldr	r1, [r7, #0]
 800154c:	4806      	ldr	r0, [pc, #24]	@ (8001568 <SPI_Read+0x58>)
 800154e:	f003 fa4d 	bl	80049ec <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateHigh);
 8001552:	2201      	movs	r2, #1
 8001554:	2108      	movs	r1, #8
 8001556:	4803      	ldr	r0, [pc, #12]	@ (8001564 <SPI_Read+0x54>)
 8001558:	f001 f9cc 	bl	80028f4 <HAL_GPIO_WritePin>
}
 800155c:	bf00      	nop
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020400 	.word	0x40020400
 8001568:	20000088 	.word	0x20000088

0800156c <combineBytes>:

// Combines two bytes into a 16-bit integer.
static uint16_t combineBytes(uint8_t msb, uint8_t lsb) {
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	460a      	mov	r2, r1
 8001576:	71fb      	strb	r3, [r7, #7]
 8001578:	4613      	mov	r3, r2
 800157a:	71bb      	strb	r3, [r7, #6]
    return ((uint16_t)msb << 8) | lsb;
 800157c:	79fb      	ldrb	r3, [r7, #7]
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	b21a      	sxth	r2, r3
 8001582:	79bb      	ldrb	r3, [r7, #6]
 8001584:	b21b      	sxth	r3, r3
 8001586:	4313      	orrs	r3, r2
 8001588:	b21b      	sxth	r3, r3
 800158a:	b29b      	uxth	r3, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <extractBits>:

// Extracts specific bits from a byte value.
static uint8_t extractBits(uint8_t value, uint8_t mask, uint8_t shift) {
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
 80015a2:	460b      	mov	r3, r1
 80015a4:	71bb      	strb	r3, [r7, #6]
 80015a6:	4613      	mov	r3, r2
 80015a8:	717b      	strb	r3, [r7, #5]
    return (value & mask) >> shift;
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	4013      	ands	r3, r2
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	797b      	ldrb	r3, [r7, #5]
 80015b6:	fa42 f303 	asr.w	r3, r2, r3
 80015ba:	b2db      	uxtb	r3, r3
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <BME280_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void BME280_Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
    while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BME280_Error_Handler+0x4>

080015d0 <BME280_CalibrationParams>:
    }
}

// 4.2.2 Trimming parameter readout.
// Function to read the calibration parameters from the BME280 sensor. Each compensation word is a 16-bit signed or unsigned integer value stored in two’s complement.
static void BME280_CalibrationParams(void) {
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b08b      	sub	sp, #44	@ 0x2c
 80015d4:	af00      	add	r7, sp, #0
    uint8_t calibDataBuffer2[BME280_CALIBDATA_BLOCK2_SIZE];

    /* Read the first block of calibration data from the sensor, storing the data read from memory addresses 0x88 to 0xA1.
     * This block contains the calibration values for temperature and pressure, covering a 26-byte range.
     * Although the pressure values won't be used, they will be extracted anyways.*/
    SPI_Read(BME280_CALIB_00_ADDR, calibDataBuffer1, BME280_CALIBDATA_BLOCK1_SIZE);
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	221a      	movs	r2, #26
 80015dc:	4619      	mov	r1, r3
 80015de:	2088      	movs	r0, #136	@ 0x88
 80015e0:	f7ff ff96 	bl	8001510 <SPI_Read>

    /* Read the second block of calibration data from the sensor, storing the data read from memory addresses 0x88 to 0xA1.
    * This block contains the calibration values for humidity, covering a 7-byte range.*/
    SPI_Read(BME280_CALIB_26_ADDR, calibDataBuffer2, BME280_CALIBDATA_BLOCK2_SIZE);
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2207      	movs	r2, #7
 80015e8:	4619      	mov	r1, r3
 80015ea:	20e1      	movs	r0, #225	@ 0xe1
 80015ec:	f7ff ff90 	bl	8001510 <SPI_Read>

    // The next operations rely heavily on datasheet table 16: Compensation parameter storage, naming and data type.

    // Combine the bytes read from the calibration memory into 16-bit integers for temperature
    dig_T1 = combineBytes(calibDataBuffer1[DIG_T1_MSB_INDEX], calibDataBuffer1[DIG_T1_LSB_INDEX]);
 80015f0:	7b7b      	ldrb	r3, [r7, #13]
 80015f2:	7b3a      	ldrb	r2, [r7, #12]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ffb8 	bl	800156c <combineBytes>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <BME280_CalibrationParams+0xc4>)
 8001602:	801a      	strh	r2, [r3, #0]
    dig_T2 = combineBytes(calibDataBuffer1[DIG_T2_MSB_INDEX], calibDataBuffer1[DIG_T2_LSB_INDEX]);
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	7bba      	ldrb	r2, [r7, #14]
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff ffae 	bl	800156c <combineBytes>
 8001610:	4603      	mov	r3, r0
 8001612:	b21a      	sxth	r2, r3
 8001614:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <BME280_CalibrationParams+0xc8>)
 8001616:	801a      	strh	r2, [r3, #0]
    dig_T3 = combineBytes(calibDataBuffer1[DIG_T3_MSB_INDEX], calibDataBuffer1[DIG_T3_LSB_INDEX]);
 8001618:	7c7b      	ldrb	r3, [r7, #17]
 800161a:	7c3a      	ldrb	r2, [r7, #16]
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ffa4 	bl	800156c <combineBytes>
 8001624:	4603      	mov	r3, r0
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <BME280_CalibrationParams+0xcc>)
 800162a:	801a      	strh	r2, [r3, #0]

    // Extract data for first trimming humidity value (dig_H1)
    dig_H1 = calibDataBuffer1[DIG_H1_INDEX];
 800162c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001630:	4b1b      	ldr	r3, [pc, #108]	@ (80016a0 <BME280_CalibrationParams+0xd0>)
 8001632:	701a      	strb	r2, [r3, #0]

    dig_H2 = combineBytes(calibDataBuffer2[DIG_H2_MSB_INDEX], calibDataBuffer2[DIG_H2_LSB_INDEX]);
 8001634:	797b      	ldrb	r3, [r7, #5]
 8001636:	793a      	ldrb	r2, [r7, #4]
 8001638:	4611      	mov	r1, r2
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff96 	bl	800156c <combineBytes>
 8001640:	4603      	mov	r3, r0
 8001642:	b21a      	sxth	r2, r3
 8001644:	4b17      	ldr	r3, [pc, #92]	@ (80016a4 <BME280_CalibrationParams+0xd4>)
 8001646:	801a      	strh	r2, [r3, #0]
    dig_H3 = calibDataBuffer2[DIG_H3_INDEX];
 8001648:	79ba      	ldrb	r2, [r7, #6]
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <BME280_CalibrationParams+0xd8>)
 800164c:	701a      	strb	r2, [r3, #0]

    // For dig_H4, special bit manipulations are required to combine parts of two different bytes
    dig_H4 = (calibDataBuffer2[DIG_H4_MSB_INDEX] << 4) | extractBits(calibDataBuffer2[DIG_H4_LSB_INDEX], 0x0F, 0);
 800164e:	79fb      	ldrb	r3, [r7, #7]
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	b21c      	sxth	r4, r3
 8001654:	7a3b      	ldrb	r3, [r7, #8]
 8001656:	2200      	movs	r2, #0
 8001658:	210f      	movs	r1, #15
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff9c 	bl	8001598 <extractBits>
 8001660:	4603      	mov	r3, r0
 8001662:	b21b      	sxth	r3, r3
 8001664:	4323      	orrs	r3, r4
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b10      	ldr	r3, [pc, #64]	@ (80016ac <BME280_CalibrationParams+0xdc>)
 800166a:	801a      	strh	r2, [r3, #0]

    // For dig_H5, special bit manipulations are required to combine parts of two different bytes
    dig_H5 = (calibDataBuffer2[DIG_H5_MSB_INDEX] << 4) | (calibDataBuffer2[DIG_H5_LSB_INDEX] >> 4);
 800166c:	7a3b      	ldrb	r3, [r7, #8]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	b21a      	sxth	r2, r3
 8001672:	7a7b      	ldrb	r3, [r7, #9]
 8001674:	091b      	lsrs	r3, r3, #4
 8001676:	b2db      	uxtb	r3, r3
 8001678:	b21b      	sxth	r3, r3
 800167a:	4313      	orrs	r3, r2
 800167c:	b21a      	sxth	r2, r3
 800167e:	4b0c      	ldr	r3, [pc, #48]	@ (80016b0 <BME280_CalibrationParams+0xe0>)
 8001680:	801a      	strh	r2, [r3, #0]

    // Store the final humidity calibration value directly from the corresponding byte
    dig_H6 = calibDataBuffer2[DIG_H6_INDEX];
 8001682:	7abb      	ldrb	r3, [r7, #10]
 8001684:	b25a      	sxtb	r2, r3
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <BME280_CalibrationParams+0xe4>)
 8001688:	701a      	strb	r2, [r3, #0]
}
 800168a:	bf00      	nop
 800168c:	372c      	adds	r7, #44	@ 0x2c
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}
 8001692:	bf00      	nop
 8001694:	20000108 	.word	0x20000108
 8001698:	2000010a 	.word	0x2000010a
 800169c:	2000010c 	.word	0x2000010c
 80016a0:	2000010e 	.word	0x2000010e
 80016a4:	20000110 	.word	0x20000110
 80016a8:	20000112 	.word	0x20000112
 80016ac:	20000114 	.word	0x20000114
 80016b0:	20000116 	.word	0x20000116
 80016b4:	20000118 	.word	0x20000118

080016b8 <BME280_init>:

// Function to initialize the BME280 sensor
void BME280_init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
	BME280_CalibrationParams();
 80016be:	f7ff ff87 	bl	80015d0 <BME280_CalibrationParams>

    /* 5.4.2 The "reset" register contains the soft reset word reset[7:0].
    If the value 0xB6 is written to the register, the device is reset using the complete power-on-reset procedure.
    The readout value is 0x00.*/
    uint8_t resetSeq = 0xB6;
 80016c2:	23b6      	movs	r3, #182	@ 0xb6
 80016c4:	71fb      	strb	r3, [r7, #7]

    // Humidity at oversampling x 16.
    uint8_t ctrlHum = 0x05;
 80016c6:	2305      	movs	r3, #5
 80016c8:	71bb      	strb	r3, [r7, #6]
     * bit-7, bit-6, bit-5, bit-4, bit-3, bit-2, bit-1, bit-0
     * 0b10100011
     * Temperature at oversampling x 16.
     * Pressure is not necessary since we will not use it in this system.
     * Mode is Normal.*/
    uint8_t ctrlMeas = 0xA3;
 80016ca:	23a3      	movs	r3, #163	@ 0xa3
 80016cc:	717b      	strb	r3, [r7, #5]
	 * ts_tandby [ms] = 0.5 ms -> chose this configuration so we have the smallest time interval between measurements. Making the system more reactive to changes in temperature.
	 * See in datasheet section 3.3.4 Normal mode (figure 5: Normal mode timing diagram).
	 * For this system I chose to disable the IIR filter, because it slows down the response to the sensor inputs.
	 * For this system we disable 3-wire SPI interface when set to ‘0’. Please check section 6.3 for more information on this.
	 * */
    uint8_t config = 0x10;
 80016ce:	2310      	movs	r3, #16
 80016d0:	713b      	strb	r3, [r7, #4]

    // Write reset sequence to the reset register
    SPI_Write(RESET_REG, &resetSeq, CMDWRITESIZE);
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	2201      	movs	r2, #1
 80016d6:	4619      	mov	r1, r3
 80016d8:	20e0      	movs	r0, #224	@ 0xe0
 80016da:	f7ff feeb 	bl	80014b4 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80016de:	2064      	movs	r0, #100	@ 0x64
 80016e0:	f000 fe52 	bl	8002388 <HAL_Delay>

    // Write control settings to the control registers
    SPI_Write(CTRL_HUM, &ctrlHum, CMDWRITESIZE);
 80016e4:	1dbb      	adds	r3, r7, #6
 80016e6:	2201      	movs	r2, #1
 80016e8:	4619      	mov	r1, r3
 80016ea:	20f2      	movs	r0, #242	@ 0xf2
 80016ec:	f7ff fee2 	bl	80014b4 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80016f0:	2064      	movs	r0, #100	@ 0x64
 80016f2:	f000 fe49 	bl	8002388 <HAL_Delay>

    SPI_Write(CTRL_MEAS, &ctrlMeas, CMDWRITESIZE);
 80016f6:	1d7b      	adds	r3, r7, #5
 80016f8:	2201      	movs	r2, #1
 80016fa:	4619      	mov	r1, r3
 80016fc:	20f4      	movs	r0, #244	@ 0xf4
 80016fe:	f7ff fed9 	bl	80014b4 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001702:	2064      	movs	r0, #100	@ 0x64
 8001704:	f000 fe40 	bl	8002388 <HAL_Delay>

    SPI_Write(CONFIG_REG, &config, CMDWRITESIZE);
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	2201      	movs	r2, #1
 800170c:	4619      	mov	r1, r3
 800170e:	20f5      	movs	r0, #245	@ 0xf5
 8001710:	f7ff fed0 	bl	80014b4 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001714:	2064      	movs	r0, #100	@ 0x64
 8001716:	f000 fe37 	bl	8002388 <HAL_Delay>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <BME280_compensate_T_int32>:

static BME280_S32_t t_fine;

// Temperature compensation formula taken from datasheet (please check page 25/60 for reference).
static BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    BME280_S32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((BME280_S32_t)dig_T1 << 1))) * ((BME280_S32_t)dig_T2)) >> 11;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	10da      	asrs	r2, r3, #3
 8001730:	4b19      	ldr	r3, [pc, #100]	@ (8001798 <BME280_compensate_T_int32+0x74>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a18      	ldr	r2, [pc, #96]	@ (800179c <BME280_compensate_T_int32+0x78>)
 800173a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800173e:	fb02 f303 	mul.w	r3, r2, r3
 8001742:	12db      	asrs	r3, r3, #11
 8001744:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((BME280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BME280_S32_t)dig_T1))) >> 12) * ((BME280_S32_t)dig_T3)) >> 14;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	111b      	asrs	r3, r3, #4
 800174a:	4a13      	ldr	r2, [pc, #76]	@ (8001798 <BME280_compensate_T_int32+0x74>)
 800174c:	8812      	ldrh	r2, [r2, #0]
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	1112      	asrs	r2, r2, #4
 8001754:	4910      	ldr	r1, [pc, #64]	@ (8001798 <BME280_compensate_T_int32+0x74>)
 8001756:	8809      	ldrh	r1, [r1, #0]
 8001758:	1a52      	subs	r2, r2, r1
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	131b      	asrs	r3, r3, #12
 8001760:	4a0f      	ldr	r2, [pc, #60]	@ (80017a0 <BME280_compensate_T_int32+0x7c>)
 8001762:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001766:	fb02 f303 	mul.w	r3, r2, r3
 800176a:	139b      	asrs	r3, r3, #14
 800176c:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4413      	add	r3, r2
 8001774:	4a0b      	ldr	r2, [pc, #44]	@ (80017a4 <BME280_compensate_T_int32+0x80>)
 8001776:	6013      	str	r3, [r2, #0]
    T = (t_fine * 5 + 128) >> 8;
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <BME280_compensate_T_int32+0x80>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3380      	adds	r3, #128	@ 0x80
 8001784:	121b      	asrs	r3, r3, #8
 8001786:	60fb      	str	r3, [r7, #12]
    return T;
 8001788:	68fb      	ldr	r3, [r7, #12]
}
 800178a:	4618      	mov	r0, r3
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000108 	.word	0x20000108
 800179c:	2000010a 	.word	0x2000010a
 80017a0:	2000010c 	.word	0x2000010c
 80017a4:	20000124 	.word	0x20000124

080017a8 <bme280_compensate_H_int32>:

// Humidity compensation formula taken from datasheet (please check page 25/60 for reference).
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH.
static BME280_U32_t bme280_compensate_H_int32(BME280_S32_t adc_H)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
    BME280_S32_t v_x1_u32r;
    v_x1_u32r = (t_fine - ((BME280_S32_t)76800));
 80017b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001864 <bme280_compensate_H_int32+0xbc>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 80017b8:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) * v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) * ((BME280_S32_t)dig_H2) + 8192) >> 14));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	039a      	lsls	r2, r3, #14
 80017be:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <bme280_compensate_H_int32+0xc0>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	051b      	lsls	r3, r3, #20
 80017c6:	1ad2      	subs	r2, r2, r3
 80017c8:	4b28      	ldr	r3, [pc, #160]	@ (800186c <bme280_compensate_H_int32+0xc4>)
 80017ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ce:	4619      	mov	r1, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	fb01 f303 	mul.w	r3, r1, r3
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 80017dc:	13db      	asrs	r3, r3, #15
 80017de:	4a24      	ldr	r2, [pc, #144]	@ (8001870 <bme280_compensate_H_int32+0xc8>)
 80017e0:	f992 2000 	ldrsb.w	r2, [r2]
 80017e4:	4611      	mov	r1, r2
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	fb01 f202 	mul.w	r2, r1, r2
 80017ec:	1292      	asrs	r2, r2, #10
 80017ee:	4921      	ldr	r1, [pc, #132]	@ (8001874 <bme280_compensate_H_int32+0xcc>)
 80017f0:	7809      	ldrb	r1, [r1, #0]
 80017f2:	4608      	mov	r0, r1
 80017f4:	68f9      	ldr	r1, [r7, #12]
 80017f6:	fb00 f101 	mul.w	r1, r0, r1
 80017fa:	12c9      	asrs	r1, r1, #11
 80017fc:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001800:	fb01 f202 	mul.w	r2, r1, r2
 8001804:	1292      	asrs	r2, r2, #10
 8001806:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800180a:	491b      	ldr	r1, [pc, #108]	@ (8001878 <bme280_compensate_H_int32+0xd0>)
 800180c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001810:	fb01 f202 	mul.w	r2, r1, r2
 8001814:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001818:	1392      	asrs	r2, r2, #14
 800181a:	fb02 f303 	mul.w	r3, r2, r3
 800181e:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((BME280_S32_t)dig_H1)) >> 4));
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	13db      	asrs	r3, r3, #15
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	13d2      	asrs	r2, r2, #15
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	11db      	asrs	r3, r3, #7
 800182e:	4a13      	ldr	r2, [pc, #76]	@ (800187c <bme280_compensate_H_int32+0xd4>)
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	111b      	asrs	r3, r3, #4
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001844:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 800184c:	bfa8      	it	ge
 800184e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001852:	60fb      	str	r3, [r7, #12]
    return (BME280_U32_t)(v_x1_u32r >> 12);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	131b      	asrs	r3, r3, #12
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	20000124 	.word	0x20000124
 8001868:	20000114 	.word	0x20000114
 800186c:	20000116 	.word	0x20000116
 8001870:	20000118 	.word	0x20000118
 8001874:	20000112 	.word	0x20000112
 8001878:	20000110 	.word	0x20000110
 800187c:	2000010e 	.word	0x2000010e

08001880 <BME280_read>:

uint8_t BME280_read(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
    uint8_t sensorData[8];
    uint8_t chipID;

    SPI_Read(CHIPIDREG, &chipID, MEMADDRESSSIZE);
 8001886:	1cfb      	adds	r3, r7, #3
 8001888:	2201      	movs	r2, #1
 800188a:	4619      	mov	r1, r3
 800188c:	20d0      	movs	r0, #208	@ 0xd0
 800188e:	f7ff fe3f 	bl	8001510 <SPI_Read>

    if (chipID == 0x60)
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	2b60      	cmp	r3, #96	@ 0x60
 8001896:	d14e      	bne.n	8001936 <BME280_read+0xb6>
        {
            BSP_LED_Toggle(LED2); // blink indicates sensor ID rx is OK
            HAL_Delay(100);
        }
#endif
        SPI_Read(RAWDATAREG1, sensorData, RAWDATASIZE);
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2208      	movs	r2, #8
 800189c:	4619      	mov	r1, r3
 800189e:	20f7      	movs	r0, #247	@ 0xf7
 80018a0:	f7ff fe36 	bl	8001510 <SPI_Read>

        /* Data readout is done by starting a burst read from 0xF7 to 0xFC (temperature and pressure) or from 0xF7 to 0xFE
         * (temperature, pressure and humidity). The data are read out in an unsigned 20-bit format both for pressure and
         * for temperature and in an unsigned 16-bit format for humidity since the IIR filter is OFF. */

        tADC = (sensorData[3] << 12) | (sensorData[4] << 4) | (sensorData[5] >> 4); // WE CAN RETURN THIS WITH * & in the function signature
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	031a      	lsls	r2, r3, #12
 80018a8:	7a3b      	ldrb	r3, [r7, #8]
 80018aa:	011b      	lsls	r3, r3, #4
 80018ac:	4313      	orrs	r3, r2
 80018ae:	7a7a      	ldrb	r2, [r7, #9]
 80018b0:	0912      	lsrs	r2, r2, #4
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	4313      	orrs	r3, r2
 80018b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001960 <BME280_read+0xe0>)
 80018b8:	6013      	str	r3, [r2, #0]
        hADC = (sensorData[6] << 8) | sensorData[7];
 80018ba:	7abb      	ldrb	r3, [r7, #10]
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	7afa      	ldrb	r2, [r7, #11]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <BME280_read+0xe4>)
 80018c4:	6013      	str	r3, [r2, #0]

        temp = ((float)BME280_compensate_T_int32(tADC)) / 100.0;
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <BME280_read+0xe0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ff2a 	bl	8001724 <BME280_compensate_T_int32>
 80018d0:	ee07 0a90 	vmov	s15, r0
 80018d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018d8:	ee17 0a90 	vmov	r0, s15
 80018dc:	f7fe fdf2 	bl	80004c4 <__aeabi_f2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <BME280_read+0xe8>)
 80018e6:	f7fe ff6f 	bl	80007c8 <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	f7ff f851 	bl	8000998 <__aeabi_d2f>
 80018f6:	4603      	mov	r3, r0
 80018f8:	4a1c      	ldr	r2, [pc, #112]	@ (800196c <BME280_read+0xec>)
 80018fa:	6013      	str	r3, [r2, #0]
        hum = ((float)bme280_compensate_H_int32(hADC)) / 1024.0;
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <BME280_read+0xe4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ff51 	bl	80017a8 <bme280_compensate_H_int32>
 8001906:	ee07 0a90 	vmov	s15, r0
 800190a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190e:	ee17 0a90 	vmov	r0, s15
 8001912:	f7fe fdd7 	bl	80004c4 <__aeabi_f2d>
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <BME280_read+0xf0>)
 800191c:	f7fe ff54 	bl	80007c8 <__aeabi_ddiv>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f836 	bl	8000998 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <BME280_read+0xf4>)
 8001930:	6013      	str	r3, [r2, #0]

        return 0; // check state of the function return and pass the data with pointer * & for the return of tADC hADC
 8001932:	2300      	movs	r3, #0
 8001934:	e00f      	b.n	8001956 <BME280_read+0xd6>
    }
    else
    {
        for (int i = 0; i <= 2; i++)
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	e008      	b.n	800194e <BME280_read+0xce>
        {
            BSP_LED_Toggle(LED3); // sensor ID ERROR
 800193c:	2002      	movs	r0, #2
 800193e:	f000 fc97 	bl	8002270 <BSP_LED_Toggle>
            HAL_Delay(100);
 8001942:	2064      	movs	r0, #100	@ 0x64
 8001944:	f000 fd20 	bl	8002388 <HAL_Delay>
        for (int i = 0; i <= 2; i++)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b02      	cmp	r3, #2
 8001952:	ddf3      	ble.n	800193c <BME280_read+0xbc>
        }

        return 1;
 8001954:	2301      	movs	r3, #1
    }
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000011c 	.word	0x2000011c
 8001964:	20000120 	.word	0x20000120
 8001968:	40590000 	.word	0x40590000
 800196c:	20000100 	.word	0x20000100
 8001970:	40900000 	.word	0x40900000
 8001974:	20000104 	.word	0x20000104

08001978 <RTC_Error_Handler>:

RTC_TimeTypeDef sTime = {0}; // key user variables for RTC date
RTC_DateTypeDef sDate = {0};

void RTC_Error_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <RTC_Error_Handler+0x4>

08001980 <clock_init_code>:
    }
    /* USER CODE END Error_Handler_Debug */
}

void clock_init_code(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
    sTime.Hours = 0x01;
 8001984:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <clock_init_code+0x68>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0x20;
 800198a:	4b17      	ldr	r3, [pc, #92]	@ (80019e8 <clock_init_code+0x68>)
 800198c:	2220      	movs	r2, #32
 800198e:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0x00;
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <clock_init_code+0x68>)
 8001992:	2200      	movs	r2, #0
 8001994:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001996:	4b14      	ldr	r3, [pc, #80]	@ (80019e8 <clock_init_code+0x68>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800199c:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <clock_init_code+0x68>)
 800199e:	2200      	movs	r2, #0
 80019a0:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80019a2:	2201      	movs	r2, #1
 80019a4:	4910      	ldr	r1, [pc, #64]	@ (80019e8 <clock_init_code+0x68>)
 80019a6:	4811      	ldr	r0, [pc, #68]	@ (80019ec <clock_init_code+0x6c>)
 80019a8:	f002 fbcb 	bl	8004142 <HAL_RTC_SetTime>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <clock_init_code+0x36>
    {
    	RTC_Error_Handler();
 80019b2:	f7ff ffe1 	bl	8001978 <RTC_Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <clock_init_code+0x70>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_AUGUST;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	@ (80019f0 <clock_init_code+0x70>)
 80019be:	2208      	movs	r2, #8
 80019c0:	705a      	strb	r2, [r3, #1]
    sDate.Date = 0x05;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <clock_init_code+0x70>)
 80019c4:	2205      	movs	r2, #5
 80019c6:	709a      	strb	r2, [r3, #2]
    sDate.Year = 0x24;
 80019c8:	4b09      	ldr	r3, [pc, #36]	@ (80019f0 <clock_init_code+0x70>)
 80019ca:	2224      	movs	r2, #36	@ 0x24
 80019cc:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80019ce:	2201      	movs	r2, #1
 80019d0:	4907      	ldr	r1, [pc, #28]	@ (80019f0 <clock_init_code+0x70>)
 80019d2:	4806      	ldr	r0, [pc, #24]	@ (80019ec <clock_init_code+0x6c>)
 80019d4:	f002 fcad 	bl	8004332 <HAL_RTC_SetDate>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <clock_init_code+0x62>
    {
    	RTC_Error_Handler();
 80019de:	f7ff ffcb 	bl	8001978 <RTC_Error_Handler>
    }
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000128 	.word	0x20000128
 80019ec:	200000e0 	.word	0x200000e0
 80019f0:	2000013c 	.word	0x2000013c

080019f4 <update_lcd_clock>:

void update_lcd_clock(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80019f8:	2201      	movs	r2, #1
 80019fa:	4905      	ldr	r1, [pc, #20]	@ (8001a10 <update_lcd_clock+0x1c>)
 80019fc:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <update_lcd_clock+0x20>)
 80019fe:	f002 fc3a 	bl	8004276 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8001a02:	2201      	movs	r2, #1
 8001a04:	4904      	ldr	r1, [pc, #16]	@ (8001a18 <update_lcd_clock+0x24>)
 8001a06:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <update_lcd_clock+0x20>)
 8001a08:	f002 fd17 	bl	800443a <HAL_RTC_GetDate>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000128 	.word	0x20000128
 8001a14:	200000e0 	.word	0x200000e0
 8001a18:	2000013c 	.word	0x2000013c

08001a1c <tempFSM_init>:
#include "API_fsm.h"

static tempState_t currentTempState;

void tempFSM_init()
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
    currentTempState = TEMP_NORMAL;
 8001a20:	4b03      	ldr	r3, [pc, #12]	@ (8001a30 <tempFSM_init+0x14>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000140 	.word	0x20000140

08001a34 <eval_data>:

void FSM_update(void);

void eval_data()
{
 8001a34:	b5b0      	push	{r4, r5, r7, lr}
 8001a36:	b08e      	sub	sp, #56	@ 0x38
 8001a38:	af00      	add	r7, sp, #0
    uint8_t message[50];
    if (temp > THRESHOLD_TEMP)
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa4 <eval_data+0x70>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	dd14      	ble.n	8001a78 <eval_data+0x44>
    {
        currentTempState = TEMP_ALARM;
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <eval_data+0x74>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]
        strcpy((char *)message, "Temperature Alarm State.\r\n");
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	4a15      	ldr	r2, [pc, #84]	@ (8001aac <eval_data+0x78>)
 8001a58:	461c      	mov	r4, r3
 8001a5a:	4615      	mov	r5, r2
 8001a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a64:	c403      	stmia	r4!, {r0, r1}
 8001a66:	8022      	strh	r2, [r4, #0]
 8001a68:	3402      	adds	r4, #2
 8001a6a:	0c13      	lsrs	r3, r2, #16
 8001a6c:	7023      	strb	r3, [r4, #0]
        uartSendString(message);
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 fb81 	bl	8002178 <uartSendString>
    {
        currentTempState = TEMP_NORMAL;
        strcpy((char *)message, "Temperature Normal State.\r\n");
        uartSendString(message);
    }
}
 8001a76:	e010      	b.n	8001a9a <eval_data+0x66>
        currentTempState = TEMP_NORMAL;
 8001a78:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <eval_data+0x74>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
        strcpy((char *)message, "Temperature Normal State.\r\n");
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4a0b      	ldr	r2, [pc, #44]	@ (8001ab0 <eval_data+0x7c>)
 8001a82:	461c      	mov	r4, r3
 8001a84:	4615      	mov	r5, r2
 8001a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uartSendString(message);
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fb6f 	bl	8002178 <uartSendString>
}
 8001a9a:	bf00      	nop
 8001a9c:	3738      	adds	r7, #56	@ 0x38
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000100 	.word	0x20000100
 8001aa8:	20000140 	.word	0x20000140
 8001aac:	08005b60 	.word	0x08005b60
 8001ab0:	08005b7c 	.word	0x08005b7c

08001ab4 <prepare_sensor_data_for_uart>:

char tempStr[20];
char humStr[20];

void prepare_sensor_data_for_uart(uint8_t *message_1, uint8_t *message_2)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
    int intPart = (int)temp;
 8001abe:	4b51      	ldr	r3, [pc, #324]	@ (8001c04 <prepare_sensor_data_for_uart+0x150>)
 8001ac0:	edd3 7a00 	vldr	s15, [r3]
 8001ac4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac8:	ee17 3a90 	vmov	r3, s15
 8001acc:	60fb      	str	r3, [r7, #12]
    int fracPart = (int)((temp - intPart) * 100);
 8001ace:	4b4d      	ldr	r3, [pc, #308]	@ (8001c04 <prepare_sensor_data_for_uart+0x150>)
 8001ad0:	ed93 7a00 	vldr	s14, [r3]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001c08 <prepare_sensor_data_for_uart+0x154>
 8001ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aee:	ee17 3a90 	vmov	r3, s15
 8001af2:	60bb      	str	r3, [r7, #8]
    strcpy((char *)message_1, "Temperature: ");
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a45      	ldr	r2, [pc, #276]	@ (8001c0c <prepare_sensor_data_for_uart+0x158>)
 8001af8:	461c      	mov	r4, r3
 8001afa:	4613      	mov	r3, r2
 8001afc:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001afe:	6020      	str	r0, [r4, #0]
 8001b00:	6061      	str	r1, [r4, #4]
 8001b02:	60a2      	str	r2, [r4, #8]
 8001b04:	881b      	ldrh	r3, [r3, #0]
 8001b06:	81a3      	strh	r3, [r4, #12]
    itoa(intPart, tempStr, 10);
 8001b08:	220a      	movs	r2, #10
 8001b0a:	4941      	ldr	r1, [pc, #260]	@ (8001c10 <prepare_sensor_data_for_uart+0x15c>)
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f003 ff9b 	bl	8005a48 <itoa>
    strcat((char *)message_1, tempStr);
 8001b12:	493f      	ldr	r1, [pc, #252]	@ (8001c10 <prepare_sensor_data_for_uart+0x15c>)
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f003 ffe3 	bl	8005ae0 <strcat>
    strcat((char *)message_1, ".");
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7fe fb66 	bl	80001ec <strlen>
 8001b20:	4603      	mov	r3, r0
 8001b22:	461a      	mov	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	493a      	ldr	r1, [pc, #232]	@ (8001c14 <prepare_sensor_data_for_uart+0x160>)
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	8013      	strh	r3, [r2, #0]
    itoa(fracPart, tempStr, 10);
 8001b32:	220a      	movs	r2, #10
 8001b34:	4936      	ldr	r1, [pc, #216]	@ (8001c10 <prepare_sensor_data_for_uart+0x15c>)
 8001b36:	68b8      	ldr	r0, [r7, #8]
 8001b38:	f003 ff86 	bl	8005a48 <itoa>
    strcat((char *)message_1, tempStr);
 8001b3c:	4934      	ldr	r1, [pc, #208]	@ (8001c10 <prepare_sensor_data_for_uart+0x15c>)
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f003 ffce 	bl	8005ae0 <strcat>
    strcat((char *)message_1, " C\r\n");
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7fe fb51 	bl	80001ec <strlen>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	4a31      	ldr	r2, [pc, #196]	@ (8001c18 <prepare_sensor_data_for_uart+0x164>)
 8001b54:	6810      	ldr	r0, [r2, #0]
 8001b56:	6018      	str	r0, [r3, #0]
 8001b58:	7912      	ldrb	r2, [r2, #4]
 8001b5a:	711a      	strb	r2, [r3, #4]

    strcpy((char *)message_2, "Humidity: ");
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	492f      	ldr	r1, [pc, #188]	@ (8001c1c <prepare_sensor_data_for_uart+0x168>)
 8001b60:	461a      	mov	r2, r3
 8001b62:	460b      	mov	r3, r1
 8001b64:	cb03      	ldmia	r3!, {r0, r1}
 8001b66:	6010      	str	r0, [r2, #0]
 8001b68:	6051      	str	r1, [r2, #4]
 8001b6a:	8819      	ldrh	r1, [r3, #0]
 8001b6c:	789b      	ldrb	r3, [r3, #2]
 8001b6e:	8111      	strh	r1, [r2, #8]
 8001b70:	7293      	strb	r3, [r2, #10]
    intPart = (int)hum;
 8001b72:	4b2b      	ldr	r3, [pc, #172]	@ (8001c20 <prepare_sensor_data_for_uart+0x16c>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7c:	ee17 3a90 	vmov	r3, s15
 8001b80:	60fb      	str	r3, [r7, #12]
    fracPart = (int)((hum - intPart) * 100);
 8001b82:	4b27      	ldr	r3, [pc, #156]	@ (8001c20 <prepare_sensor_data_for_uart+0x16c>)
 8001b84:	ed93 7a00 	vldr	s14, [r3]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b96:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001c08 <prepare_sensor_data_for_uart+0x154>
 8001b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba2:	ee17 3a90 	vmov	r3, s15
 8001ba6:	60bb      	str	r3, [r7, #8]
    itoa(intPart, humStr, 10);
 8001ba8:	220a      	movs	r2, #10
 8001baa:	491e      	ldr	r1, [pc, #120]	@ (8001c24 <prepare_sensor_data_for_uart+0x170>)
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f003 ff4b 	bl	8005a48 <itoa>
    strcat((char *)message_2, humStr);
 8001bb2:	491c      	ldr	r1, [pc, #112]	@ (8001c24 <prepare_sensor_data_for_uart+0x170>)
 8001bb4:	6838      	ldr	r0, [r7, #0]
 8001bb6:	f003 ff93 	bl	8005ae0 <strcat>
    strcat((char *)message_2, ".");
 8001bba:	6838      	ldr	r0, [r7, #0]
 8001bbc:	f7fe fb16 	bl	80001ec <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4912      	ldr	r1, [pc, #72]	@ (8001c14 <prepare_sensor_data_for_uart+0x160>)
 8001bca:	461a      	mov	r2, r3
 8001bcc:	460b      	mov	r3, r1
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	8013      	strh	r3, [r2, #0]
    itoa(fracPart, humStr, 10);
 8001bd2:	220a      	movs	r2, #10
 8001bd4:	4913      	ldr	r1, [pc, #76]	@ (8001c24 <prepare_sensor_data_for_uart+0x170>)
 8001bd6:	68b8      	ldr	r0, [r7, #8]
 8001bd8:	f003 ff36 	bl	8005a48 <itoa>
    strcat((char *)message_2, humStr);
 8001bdc:	4911      	ldr	r1, [pc, #68]	@ (8001c24 <prepare_sensor_data_for_uart+0x170>)
 8001bde:	6838      	ldr	r0, [r7, #0]
 8001be0:	f003 ff7e 	bl	8005ae0 <strcat>
    strcat((char *)message_2, " %\r\n");
 8001be4:	6838      	ldr	r0, [r7, #0]
 8001be6:	f7fe fb01 	bl	80001ec <strlen>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <prepare_sensor_data_for_uart+0x174>)
 8001bf4:	6810      	ldr	r0, [r2, #0]
 8001bf6:	6018      	str	r0, [r3, #0]
 8001bf8:	7912      	ldrb	r2, [r2, #4]
 8001bfa:	711a      	strb	r2, [r3, #4]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd90      	pop	{r4, r7, pc}
 8001c04:	20000100 	.word	0x20000100
 8001c08:	42c80000 	.word	0x42c80000
 8001c0c:	08005b98 	.word	0x08005b98
 8001c10:	20000144 	.word	0x20000144
 8001c14:	08005ba8 	.word	0x08005ba8
 8001c18:	08005bac 	.word	0x08005bac
 8001c1c:	08005bb4 	.word	0x08005bb4
 8001c20:	20000104 	.word	0x20000104
 8001c24:	20000158 	.word	0x20000158
 8001c28:	08005bc0 	.word	0x08005bc0

08001c2c <uart_display_data>:

void uart_display_data(uint8_t *message_1, uint8_t *message_2)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
    uartSendString(message_1);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fa9e 	bl	8002178 <uartSendString>
    uartSendString(message_2);
 8001c3c:	6838      	ldr	r0, [r7, #0]
 8001c3e:	f000 fa9b 	bl	8002178 <uartSendString>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <prepare_sensor_data_for_lcd>:

char lcdTempStr[20];
char lcdHumStr[20];

void prepare_sensor_data_for_lcd(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	ed2d 8b02 	vpush	{d8}
 8001c52:	af00      	add	r7, sp, #0
    // Prepare temperature string for LCD
    itoa((int)temp, lcdTempStr, 10);
 8001c54:	4b37      	ldr	r3, [pc, #220]	@ (8001d34 <prepare_sensor_data_for_lcd+0xe8>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c5e:	220a      	movs	r2, #10
 8001c60:	4935      	ldr	r1, [pc, #212]	@ (8001d38 <prepare_sensor_data_for_lcd+0xec>)
 8001c62:	ee17 0a90 	vmov	r0, s15
 8001c66:	f003 feef 	bl	8005a48 <itoa>
    strcat(lcdTempStr, ".");
 8001c6a:	4833      	ldr	r0, [pc, #204]	@ (8001d38 <prepare_sensor_data_for_lcd+0xec>)
 8001c6c:	f7fe fabe 	bl	80001ec <strlen>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <prepare_sensor_data_for_lcd+0xec>)
 8001c76:	4413      	add	r3, r2
 8001c78:	4930      	ldr	r1, [pc, #192]	@ (8001d3c <prepare_sensor_data_for_lcd+0xf0>)
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	8013      	strh	r3, [r2, #0]
    itoa((int)((temp - (int)temp) * 100), lcdTempStr + strlen(lcdTempStr), 10);
 8001c82:	4b2c      	ldr	r3, [pc, #176]	@ (8001d34 <prepare_sensor_data_for_lcd+0xe8>)
 8001c84:	ed93 7a00 	vldr	s14, [r3]
 8001c88:	4b2a      	ldr	r3, [pc, #168]	@ (8001d34 <prepare_sensor_data_for_lcd+0xe8>)
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001d40 <prepare_sensor_data_for_lcd+0xf4>
 8001c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca2:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001ca6:	4824      	ldr	r0, [pc, #144]	@ (8001d38 <prepare_sensor_data_for_lcd+0xec>)
 8001ca8:	f7fe faa0 	bl	80001ec <strlen>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <prepare_sensor_data_for_lcd+0xec>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	220a      	movs	r2, #10
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	ee18 0a10 	vmov	r0, s16
 8001cba:	f003 fec5 	bl	8005a48 <itoa>

    // Prepare humidity string for LCD
    itoa((int)hum, lcdHumStr, 10);
 8001cbe:	4b21      	ldr	r3, [pc, #132]	@ (8001d44 <prepare_sensor_data_for_lcd+0xf8>)
 8001cc0:	edd3 7a00 	vldr	s15, [r3]
 8001cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc8:	220a      	movs	r2, #10
 8001cca:	491f      	ldr	r1, [pc, #124]	@ (8001d48 <prepare_sensor_data_for_lcd+0xfc>)
 8001ccc:	ee17 0a90 	vmov	r0, s15
 8001cd0:	f003 feba 	bl	8005a48 <itoa>
    strcat(lcdHumStr, ".");
 8001cd4:	481c      	ldr	r0, [pc, #112]	@ (8001d48 <prepare_sensor_data_for_lcd+0xfc>)
 8001cd6:	f7fe fa89 	bl	80001ec <strlen>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4b1a      	ldr	r3, [pc, #104]	@ (8001d48 <prepare_sensor_data_for_lcd+0xfc>)
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4916      	ldr	r1, [pc, #88]	@ (8001d3c <prepare_sensor_data_for_lcd+0xf0>)
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	881b      	ldrh	r3, [r3, #0]
 8001cea:	8013      	strh	r3, [r2, #0]
    itoa((int)((hum - (int)hum) * 100), lcdHumStr + strlen(lcdHumStr), 10);
 8001cec:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <prepare_sensor_data_for_lcd+0xf8>)
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <prepare_sensor_data_for_lcd+0xf8>)
 8001cf4:	edd3 7a00 	vldr	s15, [r3]
 8001cf8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d04:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001d40 <prepare_sensor_data_for_lcd+0xf4>
 8001d08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001d10:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <prepare_sensor_data_for_lcd+0xfc>)
 8001d12:	f7fe fa6b 	bl	80001ec <strlen>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a0b      	ldr	r2, [pc, #44]	@ (8001d48 <prepare_sensor_data_for_lcd+0xfc>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	220a      	movs	r2, #10
 8001d1e:	4619      	mov	r1, r3
 8001d20:	ee18 0a10 	vmov	r0, s16
 8001d24:	f003 fe90 	bl	8005a48 <itoa>
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	ecbd 8b02 	vpop	{d8}
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000100 	.word	0x20000100
 8001d38:	2000016c 	.word	0x2000016c
 8001d3c:	08005ba8 	.word	0x08005ba8
 8001d40:	42c80000 	.word	0x42c80000
 8001d44:	20000104 	.word	0x20000104
 8001d48:	20000180 	.word	0x20000180

08001d4c <lcd_display_sensor_data>:

void lcd_display_sensor_data(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
    // Display temperature on the LCD
    PosCaracLLcd(9); // Assuming position 0 on the upper line
 8001d50:	2009      	movs	r0, #9
 8001d52:	f000 f9b6 	bl	80020c2 <PosCaracLLcd>
    SacaTextoLcd((uint8_t *)"T:");
 8001d56:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <lcd_display_sensor_data+0x2c>)
 8001d58:	f000 f98e 	bl	8002078 <SacaTextoLcd>
    SacaTextoLcd((uint8_t *)lcdTempStr);
 8001d5c:	4807      	ldr	r0, [pc, #28]	@ (8001d7c <lcd_display_sensor_data+0x30>)
 8001d5e:	f000 f98b 	bl	8002078 <SacaTextoLcd>

    // Display humidity on the LCD
    PosCaracHLcd(9); // Assuming position 0 on the lower line
 8001d62:	2009      	movs	r0, #9
 8001d64:	f000 f99d 	bl	80020a2 <PosCaracHLcd>
    SacaTextoLcd((uint8_t *)"H:");
 8001d68:	4805      	ldr	r0, [pc, #20]	@ (8001d80 <lcd_display_sensor_data+0x34>)
 8001d6a:	f000 f985 	bl	8002078 <SacaTextoLcd>
    SacaTextoLcd((uint8_t *)lcdHumStr);
 8001d6e:	4805      	ldr	r0, [pc, #20]	@ (8001d84 <lcd_display_sensor_data+0x38>)
 8001d70:	f000 f982 	bl	8002078 <SacaTextoLcd>
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	08005bc8 	.word	0x08005bc8
 8001d7c:	2000016c 	.word	0x2000016c
 8001d80:	08005bcc 	.word	0x08005bcc
 8001d84:	20000180 	.word	0x20000180

08001d88 <lcd_alarm>:

void lcd_alarm()
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
    PosCaracLLcd(0);
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f000 f998 	bl	80020c2 <PosCaracLLcd>
    SacaTextoLcd((uint8_t *)"ALARMA! ");
 8001d92:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <lcd_alarm+0x14>)
 8001d94:	f000 f970 	bl	8002078 <SacaTextoLcd>
}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	08005bd0 	.word	0x08005bd0

08001da0 <lcd_display_clock>:

void lcd_display_clock()
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
    PosCaracHLcd(0);
 8001da4:	2000      	movs	r0, #0
 8001da6:	f000 f97c 	bl	80020a2 <PosCaracHLcd>
    DatoBCD(sTime.Hours);
 8001daa:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <lcd_display_clock+0x38>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 f90b 	bl	8001fca <DatoBCD>
    DatoLcd(':');
 8001db4:	203a      	movs	r0, #58	@ 0x3a
 8001db6:	f000 f8ea 	bl	8001f8e <DatoLcd>
    DatoBCD(sTime.Minutes);
 8001dba:	4b07      	ldr	r3, [pc, #28]	@ (8001dd8 <lcd_display_clock+0x38>)
 8001dbc:	785b      	ldrb	r3, [r3, #1]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 f903 	bl	8001fca <DatoBCD>
    DatoLcd(':');
 8001dc4:	203a      	movs	r0, #58	@ 0x3a
 8001dc6:	f000 f8e2 	bl	8001f8e <DatoLcd>
    DatoBCD(sTime.Seconds);
 8001dca:	4b03      	ldr	r3, [pc, #12]	@ (8001dd8 <lcd_display_clock+0x38>)
 8001dcc:	789b      	ldrb	r3, [r3, #2]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f8fb 	bl	8001fca <DatoBCD>
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000128 	.word	0x20000128

08001ddc <lcd_display_date>:

void lcd_display_date()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
    PosCaracLLcd(0);
 8001de0:	2000      	movs	r0, #0
 8001de2:	f000 f96e 	bl	80020c2 <PosCaracLLcd>
    DatoBCD(sDate.Date);
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <lcd_display_date+0x38>)
 8001de8:	789b      	ldrb	r3, [r3, #2]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f8ed 	bl	8001fca <DatoBCD>
    DatoLcd('/');
 8001df0:	202f      	movs	r0, #47	@ 0x2f
 8001df2:	f000 f8cc 	bl	8001f8e <DatoLcd>
    DatoBCD(sDate.Month);
 8001df6:	4b07      	ldr	r3, [pc, #28]	@ (8001e14 <lcd_display_date+0x38>)
 8001df8:	785b      	ldrb	r3, [r3, #1]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f8e5 	bl	8001fca <DatoBCD>
    DatoLcd('/');
 8001e00:	202f      	movs	r0, #47	@ 0x2f
 8001e02:	f000 f8c4 	bl	8001f8e <DatoLcd>
    DatoBCD(sDate.Year);
 8001e06:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <lcd_display_date+0x38>)
 8001e08:	78db      	ldrb	r3, [r3, #3]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 f8dd 	bl	8001fca <DatoBCD>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000013c 	.word	0x2000013c

08001e18 <FSM_update>:

void FSM_update()
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
    eval_data();
 8001e1c:	f7ff fe0a 	bl	8001a34 <eval_data>

    switch (currentTempState)
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <FSM_update+0x28>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <FSM_update+0x1a>
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <FSM_update+0x20>
    {
    case TEMP_ALARM:
        lcd_alarm();
 8001e2c:	f7ff ffac 	bl	8001d88 <lcd_alarm>
        break;
 8001e30:	e003      	b.n	8001e3a <FSM_update+0x22>
    case TEMP_NORMAL:
        lcd_display_date();
 8001e32:	f7ff ffd3 	bl	8001ddc <lcd_display_date>
        break;
 8001e36:	e000      	b.n	8001e3a <FSM_update+0x22>
    default:
        break;
 8001e38:	bf00      	nop
    }
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000140 	.word	0x20000140

08001e44 <APP_init>:

void APP_init()
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	clock_init_code();
 8001e48:	f7ff fd9a 	bl	8001980 <clock_init_code>
	tempFSM_init();
 8001e4c:	f7ff fde6 	bl	8001a1c <tempFSM_init>
    uartInit();
 8001e50:	f000 f962 	bl	8002118 <uartInit>
    BME280_init();
 8001e54:	f7ff fc30 	bl	80016b8 <BME280_init>
    Init_Lcd();
 8001e58:	f000 f83c 	bl	8001ed4 <Init_Lcd>
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <APP_updateLCD>:

void APP_updateLCD(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    update_lcd_clock();
 8001e64:	f7ff fdc6 	bl	80019f4 <update_lcd_clock>
    lcd_display_clock();
 8001e68:	f7ff ff9a 	bl	8001da0 <lcd_display_clock>
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <APP_updateSensorData>:

void APP_updateSensorData(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    BME280_read();
 8001e74:	f7ff fd04 	bl	8001880 <BME280_read>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <APP_prepareAndDisplaySensorData>:

void APP_prepareAndDisplaySensorData(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
    prepare_sensor_data_for_lcd();
 8001e80:	f7ff fee4 	bl	8001c4c <prepare_sensor_data_for_lcd>
    lcd_display_sensor_data();
 8001e84:	f7ff ff62 	bl	8001d4c <lcd_display_sensor_data>
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <APP_prepareAndSendUARTData>:

void APP_prepareAndSendUARTData(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b09a      	sub	sp, #104	@ 0x68
 8001e90:	af00      	add	r7, sp, #0
    uint8_t message_tem[50];
    uint8_t message_hum[50];
    prepare_sensor_data_for_uart(message_tem, message_hum);
 8001e92:	463a      	mov	r2, r7
 8001e94:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e98:	4611      	mov	r1, r2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fe0a 	bl	8001ab4 <prepare_sensor_data_for_uart>
    uart_display_data(message_tem, message_hum);
 8001ea0:	463a      	mov	r2, r7
 8001ea2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff febf 	bl	8001c2c <uart_display_data>
}
 8001eae:	bf00      	nop
 8001eb0:	3768      	adds	r7, #104	@ 0x68
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <APP_update>:

void APP_update()
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	af00      	add	r7, sp, #0
	APP_updateSensorData();
 8001eba:	f7ff ffd9 	bl	8001e70 <APP_updateSensorData>
    APP_updateLCD();
 8001ebe:	f7ff ffcf 	bl	8001e60 <APP_updateLCD>
    APP_prepareAndDisplaySensorData();
 8001ec2:	f7ff ffdb 	bl	8001e7c <APP_prepareAndDisplaySensorData>
    APP_prepareAndSendUARTData();
 8001ec6:	f7ff ffe1 	bl	8001e8c <APP_prepareAndSendUARTData>
    FSM_update();
 8001eca:	f7ff ffa5 	bl	8001e18 <FSM_update>
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <Init_Lcd>:

static const uint8_t LCD_INIT_CMD[]={
		_4BIT_MODE,DISPLAY_CONTROL,RETURN_HOME,ENTRY_MODE+AUTOINCREMENT,DISPLAY_CONTROL+DISPLAY_ON,CLR_LCD
};

_Bool Init_Lcd(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
   SleepLcdBlocking(millisecond*20);
 8001eda:	2014      	movs	r0, #20
 8001edc:	f000 f83e 	bl	8001f5c <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	2030      	movs	r0, #48	@ 0x30
 8001ee4:	f000 f8a4 	bl	8002030 <Envia4bitsLcd>
   SleepLcdBlocking(millisecond*10);
 8001ee8:	200a      	movs	r0, #10
 8001eea:	f000 f837 	bl	8001f5c <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	2030      	movs	r0, #48	@ 0x30
 8001ef2:	f000 f89d 	bl	8002030 <Envia4bitsLcd>
   SleepLcdBlocking(millisecond*1);
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f000 f830 	bl	8001f5c <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8001efc:	2100      	movs	r1, #0
 8001efe:	2030      	movs	r0, #48	@ 0x30
 8001f00:	f000 f896 	bl	8002030 <Envia4bitsLcd>
   Envia4bitsLcd(COMANDO_INI2,CONTROL);
 8001f04:	2100      	movs	r1, #0
 8001f06:	2020      	movs	r0, #32
 8001f08:	f000 f892 	bl	8002030 <Envia4bitsLcd>
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	e008      	b.n	8001f24 <Init_Lcd+0x50>
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <Init_Lcd+0x84>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f000 f82a 	bl	8001f72 <ControlLcd>
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	3301      	adds	r3, #1
 8001f22:	71fb      	strb	r3, [r7, #7]
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	2b05      	cmp	r3, #5
 8001f28:	d9f3      	bls.n	8001f12 <Init_Lcd+0x3e>
   SleepLcdBlocking(millisecond*2);
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f000 f816 	bl	8001f5c <SleepLcdBlocking>

   for (int i = 0; i <= 4; i++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	e008      	b.n	8001f48 <Init_Lcd+0x74>
    {
 	   BSP_LED_Toggle(LED1); // init LCD OK
 8001f36:	2000      	movs	r0, #0
 8001f38:	f000 f99a 	bl	8002270 <BSP_LED_Toggle>
 	   SleepLcdBlocking(millisecond*1);
 8001f3c:	2001      	movs	r0, #1
 8001f3e:	f000 f80d 	bl	8001f5c <SleepLcdBlocking>
   for (int i = 0; i <= 4; i++)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	3301      	adds	r3, #1
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	ddf3      	ble.n	8001f36 <Init_Lcd+0x62>
    }
   return 0;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	08005c44 	.word	0x08005c44

08001f5c <SleepLcdBlocking>:

static void SleepLcdBlocking(uint32_t demora){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	  HAL_Delay(demora);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 fa0f 	bl	8002388 <HAL_Delay>
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <ControlLcd>:

static void ControlLcd(uint8_t valor){
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(valor,CONTROL);
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f838 	bl	8001ff6 <Envia8bitsLcd>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <DatoLcd>:

void DatoLcd (uint8_t dato){
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato,DATOS);
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f82a 	bl	8001ff6 <Envia8bitsLcd>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <DatoAsciiLcd>:

void DatoAsciiLcd (uint8_t dato){
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato+ '0',DATOS);
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	3330      	adds	r3, #48	@ 0x30
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2101      	movs	r1, #1
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 f81a 	bl	8001ff6 <Envia8bitsLcd>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <DatoBCD>:

void DatoBCD (uint8_t dato){
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
	  DatoAsciiLcd((((dato)&0xf0)>>4));
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	091b      	lsrs	r3, r3, #4
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff ffe5 	bl	8001faa <DatoAsciiLcd>
	  DatoAsciiLcd(((dato)&0x0f));
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ffde 	bl	8001faa <DatoAsciiLcd>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <Envia8bitsLcd>:

void Envia8bitsLcd (uint8_t valor,_Bool tipo){
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	460a      	mov	r2, r1
 8002000:	71fb      	strb	r3, [r7, #7]
 8002002:	4613      	mov	r3, r2
 8002004:	71bb      	strb	r3, [r7, #6]
	Envia4bitsLcd(valor&HIGH_NIBBLE,tipo);
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f023 030f 	bic.w	r3, r3, #15
 800200c:	b2db      	uxtb	r3, r3
 800200e:	79ba      	ldrb	r2, [r7, #6]
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f80c 	bl	8002030 <Envia4bitsLcd>
	Envia4bitsLcd(valor<<LOW_NIBBLE,tipo);
 8002018:	79fb      	ldrb	r3, [r7, #7]
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	b2db      	uxtb	r3, r3
 800201e:	79ba      	ldrb	r2, [r7, #6]
 8002020:	4611      	mov	r1, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f804 	bl	8002030 <Envia4bitsLcd>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <Envia4bitsLcd>:

static void Envia4bitsLcd (uint8_t valor,_Bool tipo){
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	460a      	mov	r2, r1
 800203a:	71fb      	strb	r3, [r7, #7]
 800203c:	4613      	mov	r3, r2
 800203e:	71bb      	strb	r3, [r7, #6]
	LCD_HAL_I2C_Write(valor+tipo+EN+BL);
 8002040:	79ba      	ldrb	r2, [r7, #6]
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	4413      	add	r3, r2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	330c      	adds	r3, #12
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	f000 f849 	bl	80020e4 <LCD_HAL_I2C_Write>
	SleepLcdBlocking(millisecond);
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff ff82 	bl	8001f5c <SleepLcdBlocking>
	LCD_HAL_I2C_Write(valor+tipo+BL);
 8002058:	79ba      	ldrb	r2, [r7, #6]
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	4413      	add	r3, r2
 800205e:	b2db      	uxtb	r3, r3
 8002060:	3308      	adds	r3, #8
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f83d 	bl	80020e4 <LCD_HAL_I2C_Write>
	SleepLcdBlocking(millisecond);
 800206a:	2001      	movs	r0, #1
 800206c:	f7ff ff76 	bl	8001f5c <SleepLcdBlocking>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <SacaTextoLcd>:

void SacaTextoLcd (uint8_t *texto){
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	while(*texto)DatoLcd(*texto++);
 8002080:	e006      	b.n	8002090 <SacaTextoLcd+0x18>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	607a      	str	r2, [r7, #4]
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff7f 	bl	8001f8e <DatoLcd>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f4      	bne.n	8002082 <SacaTextoLcd+0xa>
}
 8002098:	bf00      	nop
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <PosCaracHLcd>:
void ClrLcd(void){
   ControlLcd(CLR_LCD);
   SleepLcdBlocking(millisecond*2);
}

void PosCaracHLcd(uint8_t posH){
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posH | LINEA1);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff ff5c 	bl	8001f72 <ControlLcd>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <PosCaracLLcd>:

void PosCaracLLcd(uint8_t posL){
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posL | LINEA2);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff4c 	bl	8001f72 <ControlLcd>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
	...

080020e4 <LCD_HAL_I2C_Write>:
#include"API_lcd_port.h"

extern I2C_HandleTypeDef hi2c1;

void LCD_HAL_I2C_Write(uint8_t valor){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af02      	add	r7, sp, #8
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit (&hi2c1,LCD_DIR<<1,&valor, sizeof(valor),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 80020ee:	1dfa      	adds	r2, r7, #7
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2301      	movs	r3, #1
 80020f8:	214e      	movs	r1, #78	@ 0x4e
 80020fa:	4806      	ldr	r0, [pc, #24]	@ (8002114 <LCD_HAL_I2C_Write+0x30>)
 80020fc:	f000 fd72 	bl	8002be4 <HAL_I2C_Master_Transmit>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <LCD_HAL_I2C_Write+0x26>
 8002106:	f7ff f819 	bl	800113c <Error_Handler>

}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000034 	.word	0x20000034

08002118 <uartInit>:
  * @param  None
  * @retval bool_t: returns true if initialization is successful, otherwise false
  */

bool_t uartInit(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  UartHandle.Instance        = USARTx;
 800211c:	4b13      	ldr	r3, [pc, #76]	@ (800216c <uartInit+0x54>)
 800211e:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <uartInit+0x58>)
 8002120:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 9600;
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <uartInit+0x54>)
 8002124:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002128:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b10      	ldr	r3, [pc, #64]	@ (800216c <uartInit+0x54>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <uartInit+0x54>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <uartInit+0x54>)
 8002138:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800213c:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 800213e:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <uartInit+0x54>)
 8002140:	2200      	movs	r2, #0
 8002142:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <uartInit+0x54>)
 8002146:	220c      	movs	r2, #12
 8002148:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800214a:	4b08      	ldr	r3, [pc, #32]	@ (800216c <uartInit+0x54>)
 800214c:	2200      	movs	r2, #0
 800214e:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 8002150:	4806      	ldr	r0, [pc, #24]	@ (800216c <uartInit+0x54>)
 8002152:	f003 f855 	bl	8005200 <HAL_UART_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <uartInit+0x48>
  {
    /* Initialization Error */
   return false;
 800215c:	2300      	movs	r3, #0
 800215e:	e003      	b.n	8002168 <uartInit+0x50>
  }

  uartSendString((uint8_t*)"UART init OK -> baud rate configured = 9600 | stopbits = 1 | parity = odd.\r\n");
 8002160:	4804      	ldr	r0, [pc, #16]	@ (8002174 <uartInit+0x5c>)
 8002162:	f000 f809 	bl	8002178 <uartSendString>

  return true;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000194 	.word	0x20000194
 8002170:	40004800 	.word	0x40004800
 8002174:	08005bdc 	.word	0x08005bdc

08002178 <uartSendString>:
  * @brief  Send a null-terminated string via UART
  * @param  uint8_t * pstring: pointer to the null-terminated string
  * @retval None
  */
void uartSendString(uint8_t * pstring)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(NULL != pstring && MAXbUFFER > strlen((char*)pstring))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d016      	beq.n	80021b4 <uartSendString+0x3c>
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe f830 	bl	80001ec <strlen>
 800218c:	4603      	mov	r3, r0
 800218e:	2bff      	cmp	r3, #255	@ 0xff
 8002190:	d810      	bhi.n	80021b4 <uartSendString+0x3c>
  {
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7fe f82a 	bl	80001ec <strlen>
 8002198:	4603      	mov	r3, r0
 800219a:	b29a      	uxth	r2, r3
 800219c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4808      	ldr	r0, [pc, #32]	@ (80021c4 <uartSendString+0x4c>)
 80021a4:	f003 f87c 	bl	80052a0 <HAL_UART_Transmit>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <uartSendString+0x42>
      Error_Handler();
 80021ae:	f000 f80b 	bl	80021c8 <Error_Handler>
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 80021b2:	e002      	b.n	80021ba <uartSendString+0x42>
  }
  else
    Error_Handler();
 80021b4:	f000 f808 	bl	80021c8 <Error_Handler>
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000194 	.word	0x20000194

080021c8 <Error_Handler>:
  * @brief  Handles errors by entering an infinite loop
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  while (1)
 80021cc:	bf00      	nop
 80021ce:	e7fd      	b.n	80021cc <Error_Handler+0x4>

080021d0 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	@ 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10e      	bne.n	80021fe <BSP_LED_Init+0x2e>
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <BSP_LED_Init+0x94>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	4a1e      	ldr	r2, [pc, #120]	@ (8002264 <BSP_LED_Init+0x94>)
 80021ea:	f043 0302 	orr.w	r3, r3, #2
 80021ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002264 <BSP_LED_Init+0x94>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	e00d      	b.n	800221a <BSP_LED_Init+0x4a>
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <BSP_LED_Init+0x94>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <BSP_LED_Init+0x94>)
 8002208:	f043 0302 	orr.w	r3, r3, #2
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <BSP_LED_Init+0x94>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	4a12      	ldr	r2, [pc, #72]	@ (8002268 <BSP_LED_Init+0x98>)
 800221e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002224:	2301      	movs	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800222c:	2302      	movs	r3, #2
 800222e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	4a0e      	ldr	r2, [pc, #56]	@ (800226c <BSP_LED_Init+0x9c>)
 8002234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002238:	f107 0214 	add.w	r2, r7, #20
 800223c:	4611      	mov	r1, r2
 800223e:	4618      	mov	r0, r3
 8002240:	f000 f9ac 	bl	800259c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	4a09      	ldr	r2, [pc, #36]	@ (800226c <BSP_LED_Init+0x9c>)
 8002248:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800224c:	79fb      	ldrb	r3, [r7, #7]
 800224e:	4a06      	ldr	r2, [pc, #24]	@ (8002268 <BSP_LED_Init+0x98>)
 8002250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002254:	2200      	movs	r2, #0
 8002256:	4619      	mov	r1, r3
 8002258:	f000 fb4c 	bl	80028f4 <HAL_GPIO_WritePin>
}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40023800 	.word	0x40023800
 8002268:	08005c4c 	.word	0x08005c4c
 800226c:	20000004 	.word	0x20000004

08002270 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	4a07      	ldr	r2, [pc, #28]	@ (800229c <BSP_LED_Toggle+0x2c>)
 800227e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <BSP_LED_Toggle+0x30>)
 8002286:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800228a:	4619      	mov	r1, r3
 800228c:	4610      	mov	r0, r2
 800228e:	f000 fb4a 	bl	8002926 <HAL_GPIO_TogglePin>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000004 	.word	0x20000004
 80022a0:	08005c4c 	.word	0x08005c4c

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_Init+0x40>)
 80022ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b4:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_Init+0x40>)
 80022ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <HAL_Init+0x40>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 f931 	bl	8002534 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f808 	bl	80022e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d8:	f7fe ff36 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_InitTick+0x54>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_InitTick+0x58>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f93b 	bl	8002582 <HAL_SYSTICK_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00e      	b.n	8002334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d80a      	bhi.n	8002332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231c:	2200      	movs	r2, #0
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002324:	f000 f911 	bl	800254a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002328:	4a06      	ldr	r2, [pc, #24]	@ (8002344 <HAL_InitTick+0x5c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000000 	.word	0x20000000
 8002340:	20000014 	.word	0x20000014
 8002344:	20000010 	.word	0x20000010

08002348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_IncTick+0x20>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_IncTick+0x24>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a04      	ldr	r2, [pc, #16]	@ (800236c <HAL_IncTick+0x24>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000014 	.word	0x20000014
 800236c:	200001dc 	.word	0x200001dc

08002370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_GetTick+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	200001dc 	.word	0x200001dc

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff ffee 	bl	8002370 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ae:	bf00      	nop
 80023b0:	f7ff ffde 	bl	8002370 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000014 	.word	0x20000014

080023d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <__NVIC_SetPriorityGrouping+0x44>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023ec:	4013      	ands	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002402:	4a04      	ldr	r2, [pc, #16]	@ (8002414 <__NVIC_SetPriorityGrouping+0x44>)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	60d3      	str	r3, [r2, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800241c:	4b04      	ldr	r3, [pc, #16]	@ (8002430 <__NVIC_GetPriorityGrouping+0x18>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	0a1b      	lsrs	r3, r3, #8
 8002422:	f003 0307 	and.w	r3, r3, #7
}
 8002426:	4618      	mov	r0, r3
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	@ (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	@ (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	@ 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	@ 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002500:	d301      	bcc.n	8002506 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002502:	2301      	movs	r3, #1
 8002504:	e00f      	b.n	8002526 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002506:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <SysTick_Config+0x40>)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3b01      	subs	r3, #1
 800250c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250e:	210f      	movs	r1, #15
 8002510:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002514:	f7ff ff8e 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002518:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <SysTick_Config+0x40>)
 800251a:	2200      	movs	r2, #0
 800251c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251e:	4b04      	ldr	r3, [pc, #16]	@ (8002530 <SysTick_Config+0x40>)
 8002520:	2207      	movs	r2, #7
 8002522:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	e000e010 	.word	0xe000e010

08002534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff47 	bl	80023d0 <__NVIC_SetPriorityGrouping>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	60b9      	str	r1, [r7, #8]
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002558:	2300      	movs	r3, #0
 800255a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255c:	f7ff ff5c 	bl	8002418 <__NVIC_GetPriorityGrouping>
 8002560:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	68b9      	ldr	r1, [r7, #8]
 8002566:	6978      	ldr	r0, [r7, #20]
 8002568:	f7ff ff8e 	bl	8002488 <NVIC_EncodePriority>
 800256c:	4602      	mov	r2, r0
 800256e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff5d 	bl	8002434 <__NVIC_SetPriority>
}
 800257a:	bf00      	nop
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffb0 	bl	80024f0 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b480      	push	{r7}
 800259e:	b089      	sub	sp, #36	@ 0x24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e177      	b.n	80028a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025b8:	2201      	movs	r2, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	f040 8166 	bne.w	80028a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f003 0303 	and.w	r3, r3, #3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d005      	beq.n	80025ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d130      	bne.n	8002650 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 0201 	and.w	r2, r3, #1
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	fa02 f303 	lsl.w	r3, r2, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0303 	and.w	r3, r3, #3
 8002658:	2b03      	cmp	r3, #3
 800265a:	d017      	beq.n	800268c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d123      	bne.n	80026e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	08da      	lsrs	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3208      	adds	r2, #8
 80026a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	220f      	movs	r2, #15
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	08da      	lsrs	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3208      	adds	r2, #8
 80026da:	69b9      	ldr	r1, [r7, #24]
 80026dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	2203      	movs	r2, #3
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0203 	and.w	r2, r3, #3
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 80c0 	beq.w	80028a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	4b66      	ldr	r3, [pc, #408]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	4a65      	ldr	r2, [pc, #404]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 800272c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002730:	6453      	str	r3, [r2, #68]	@ 0x44
 8002732:	4b63      	ldr	r3, [pc, #396]	@ (80028c0 <HAL_GPIO_Init+0x324>)
 8002734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800273e:	4a61      	ldr	r2, [pc, #388]	@ (80028c4 <HAL_GPIO_Init+0x328>)
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	089b      	lsrs	r3, r3, #2
 8002744:	3302      	adds	r3, #2
 8002746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a58      	ldr	r2, [pc, #352]	@ (80028c8 <HAL_GPIO_Init+0x32c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d037      	beq.n	80027da <HAL_GPIO_Init+0x23e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a57      	ldr	r2, [pc, #348]	@ (80028cc <HAL_GPIO_Init+0x330>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d031      	beq.n	80027d6 <HAL_GPIO_Init+0x23a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a56      	ldr	r2, [pc, #344]	@ (80028d0 <HAL_GPIO_Init+0x334>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02b      	beq.n	80027d2 <HAL_GPIO_Init+0x236>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a55      	ldr	r2, [pc, #340]	@ (80028d4 <HAL_GPIO_Init+0x338>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d025      	beq.n	80027ce <HAL_GPIO_Init+0x232>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a54      	ldr	r2, [pc, #336]	@ (80028d8 <HAL_GPIO_Init+0x33c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d01f      	beq.n	80027ca <HAL_GPIO_Init+0x22e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a53      	ldr	r2, [pc, #332]	@ (80028dc <HAL_GPIO_Init+0x340>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d019      	beq.n	80027c6 <HAL_GPIO_Init+0x22a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a52      	ldr	r2, [pc, #328]	@ (80028e0 <HAL_GPIO_Init+0x344>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d013      	beq.n	80027c2 <HAL_GPIO_Init+0x226>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a51      	ldr	r2, [pc, #324]	@ (80028e4 <HAL_GPIO_Init+0x348>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00d      	beq.n	80027be <HAL_GPIO_Init+0x222>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a50      	ldr	r2, [pc, #320]	@ (80028e8 <HAL_GPIO_Init+0x34c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <HAL_GPIO_Init+0x21e>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a4f      	ldr	r2, [pc, #316]	@ (80028ec <HAL_GPIO_Init+0x350>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d101      	bne.n	80027b6 <HAL_GPIO_Init+0x21a>
 80027b2:	2309      	movs	r3, #9
 80027b4:	e012      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027b6:	230a      	movs	r3, #10
 80027b8:	e010      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027ba:	2308      	movs	r3, #8
 80027bc:	e00e      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027be:	2307      	movs	r3, #7
 80027c0:	e00c      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027c2:	2306      	movs	r3, #6
 80027c4:	e00a      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027c6:	2305      	movs	r3, #5
 80027c8:	e008      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027ca:	2304      	movs	r3, #4
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e004      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e002      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x240>
 80027da:	2300      	movs	r3, #0
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f002 0203 	and.w	r2, r2, #3
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4093      	lsls	r3, r2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ec:	4935      	ldr	r1, [pc, #212]	@ (80028c4 <HAL_GPIO_Init+0x328>)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fa:	4b3d      	ldr	r3, [pc, #244]	@ (80028f0 <HAL_GPIO_Init+0x354>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800281e:	4a34      	ldr	r2, [pc, #208]	@ (80028f0 <HAL_GPIO_Init+0x354>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002824:	4b32      	ldr	r3, [pc, #200]	@ (80028f0 <HAL_GPIO_Init+0x354>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002848:	4a29      	ldr	r2, [pc, #164]	@ (80028f0 <HAL_GPIO_Init+0x354>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800284e:	4b28      	ldr	r3, [pc, #160]	@ (80028f0 <HAL_GPIO_Init+0x354>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002872:	4a1f      	ldr	r2, [pc, #124]	@ (80028f0 <HAL_GPIO_Init+0x354>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002878:	4b1d      	ldr	r3, [pc, #116]	@ (80028f0 <HAL_GPIO_Init+0x354>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289c:	4a14      	ldr	r2, [pc, #80]	@ (80028f0 <HAL_GPIO_Init+0x354>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	f67f ae84 	bls.w	80025b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	3724      	adds	r7, #36	@ 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40013800 	.word	0x40013800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40021400 	.word	0x40021400
 80028e0:	40021800 	.word	0x40021800
 80028e4:	40021c00 	.word	0x40021c00
 80028e8:	40022000 	.word	0x40022000
 80028ec:	40022400 	.word	0x40022400
 80028f0:	40013c00 	.word	0x40013c00

080028f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	460b      	mov	r3, r1
 80028fe:	807b      	strh	r3, [r7, #2]
 8002900:	4613      	mov	r3, r2
 8002902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002904:	787b      	ldrb	r3, [r7, #1]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290a:	887a      	ldrh	r2, [r7, #2]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002910:	e003      	b.n	800291a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002912:	887b      	ldrh	r3, [r7, #2]
 8002914:	041a      	lsls	r2, r3, #16
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	619a      	str	r2, [r3, #24]
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	460b      	mov	r3, r1
 8002930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002938:	887a      	ldrh	r2, [r7, #2]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4013      	ands	r3, r2
 800293e:	041a      	lsls	r2, r3, #16
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	43d9      	mvns	r1, r3
 8002944:	887b      	ldrh	r3, [r7, #2]
 8002946:	400b      	ands	r3, r1
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	619a      	str	r2, [r3, #24]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e12b      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe fc08 	bl	8001198 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	@ 0x24
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c0:	f001 f954 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80029c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a81      	ldr	r2, [pc, #516]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d807      	bhi.n	80029e0 <HAL_I2C_Init+0x84>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a80      	ldr	r2, [pc, #512]	@ (8002bd4 <HAL_I2C_Init+0x278>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	bf94      	ite	ls
 80029d8:	2301      	movls	r3, #1
 80029da:	2300      	movhi	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e006      	b.n	80029ee <HAL_I2C_Init+0x92>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a7d      	ldr	r2, [pc, #500]	@ (8002bd8 <HAL_I2C_Init+0x27c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0e7      	b.n	8002bc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a78      	ldr	r2, [pc, #480]	@ (8002bdc <HAL_I2C_Init+0x280>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a6a      	ldr	r2, [pc, #424]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d802      	bhi.n	8002a30 <HAL_I2C_Init+0xd4>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	e009      	b.n	8002a44 <HAL_I2C_Init+0xe8>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a69      	ldr	r2, [pc, #420]	@ (8002be0 <HAL_I2C_Init+0x284>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a56:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	495c      	ldr	r1, [pc, #368]	@ (8002bd0 <HAL_I2C_Init+0x274>)
 8002a60:	428b      	cmp	r3, r1
 8002a62:	d819      	bhi.n	8002a98 <HAL_I2C_Init+0x13c>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a78:	400b      	ands	r3, r1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_I2C_Init+0x138>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1e59      	subs	r1, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a92:	e051      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a94:	2304      	movs	r3, #4
 8002a96:	e04f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d111      	bne.n	8002ac4 <HAL_I2C_Init+0x168>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	440b      	add	r3, r1
 8002aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	bf0c      	ite	eq
 8002abc:	2301      	moveq	r3, #1
 8002abe:	2300      	movne	r3, #0
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	e012      	b.n	8002aea <HAL_I2C_Init+0x18e>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1e58      	subs	r0, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	0099      	lsls	r1, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ada:	3301      	adds	r3, #1
 8002adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	bf0c      	ite	eq
 8002ae4:	2301      	moveq	r3, #1
 8002ae6:	2300      	movne	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_Init+0x196>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e022      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10e      	bne.n	8002b18 <HAL_I2C_Init+0x1bc>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e58      	subs	r0, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6859      	ldr	r1, [r3, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	440b      	add	r3, r1
 8002b08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b16:	e00f      	b.n	8002b38 <HAL_I2C_Init+0x1dc>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	0099      	lsls	r1, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	6809      	ldr	r1, [r1, #0]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69da      	ldr	r2, [r3, #28]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b66:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6911      	ldr	r1, [r2, #16]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	000186a0 	.word	0x000186a0
 8002bd4:	001e847f 	.word	0x001e847f
 8002bd8:	003d08ff 	.word	0x003d08ff
 8002bdc:	431bde83 	.word	0x431bde83
 8002be0:	10624dd3 	.word	0x10624dd3

08002be4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	461a      	mov	r2, r3
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	817b      	strh	r3, [r7, #10]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf8:	f7ff fbba 	bl	8002370 <HAL_GetTick>
 8002bfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	f040 80e0 	bne.w	8002dcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2319      	movs	r3, #25
 8002c12:	2201      	movs	r2, #1
 8002c14:	4970      	ldr	r1, [pc, #448]	@ (8002dd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f964 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
 8002c24:	e0d3      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2C_Master_Transmit+0x50>
 8002c30:	2302      	movs	r3, #2
 8002c32:	e0cc      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d007      	beq.n	8002c5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0201 	orr.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2221      	movs	r2, #33	@ 0x21
 8002c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2210      	movs	r2, #16
 8002c76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	893a      	ldrh	r2, [r7, #8]
 8002c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a50      	ldr	r2, [pc, #320]	@ (8002ddc <HAL_I2C_Master_Transmit+0x1f8>)
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c9c:	8979      	ldrh	r1, [r7, #10]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	6a3a      	ldr	r2, [r7, #32]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f89c 	bl	8002de0 <I2C_MasterRequestWrite>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e08d      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cc8:	e066      	b.n	8002d98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	6a39      	ldr	r1, [r7, #32]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fa22 	bl	8003118 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00d      	beq.n	8002cf6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d107      	bne.n	8002cf2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06b      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d11b      	bne.n	8002d6c <HAL_I2C_Master_Transmit+0x188>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d017      	beq.n	8002d6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d40:	781a      	ldrb	r2, [r3, #0]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	6a39      	ldr	r1, [r7, #32]
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fa19 	bl	80031a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00d      	beq.n	8002d98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d107      	bne.n	8002d94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e01a      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d194      	bne.n	8002cca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	00100002 	.word	0x00100002
 8002ddc:	ffff0000 	.word	0xffff0000

08002de0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	460b      	mov	r3, r1
 8002dee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d006      	beq.n	8002e0a <I2C_MasterRequestWrite+0x2a>
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d003      	beq.n	8002e0a <I2C_MasterRequestWrite+0x2a>
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e08:	d108      	bne.n	8002e1c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	e00b      	b.n	8002e34 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e20:	2b12      	cmp	r3, #18
 8002e22:	d107      	bne.n	8002e34 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	9300      	str	r3, [sp, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f000 f84f 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00d      	beq.n	8002e68 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e5a:	d103      	bne.n	8002e64 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e035      	b.n	8002ed4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e70:	d108      	bne.n	8002e84 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e80:	611a      	str	r2, [r3, #16]
 8002e82:	e01b      	b.n	8002ebc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e84:	897b      	ldrh	r3, [r7, #10]
 8002e86:	11db      	asrs	r3, r3, #7
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	f003 0306 	and.w	r3, r3, #6
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f063 030f 	orn	r3, r3, #15
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	490e      	ldr	r1, [pc, #56]	@ (8002edc <I2C_MasterRequestWrite+0xfc>)
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f898 	bl	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e010      	b.n	8002ed4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eb2:	897b      	ldrh	r3, [r7, #10]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4907      	ldr	r1, [pc, #28]	@ (8002ee0 <I2C_MasterRequestWrite+0x100>)
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f888 	bl	8002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	00010008 	.word	0x00010008
 8002ee0:	00010002 	.word	0x00010002

08002ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef4:	e048      	b.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002efc:	d044      	beq.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7ff fa37 	bl	8002370 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d139      	bne.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	0c1b      	lsrs	r3, r3, #16
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10d      	bne.n	8002f3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	e00c      	b.n	8002f54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	43da      	mvns	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	4013      	ands	r3, r2
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bf0c      	ite	eq
 8002f4c:	2301      	moveq	r3, #1
 8002f4e:	2300      	movne	r3, #0
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	461a      	mov	r2, r3
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d116      	bne.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	f043 0220 	orr.w	r2, r3, #32
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e023      	b.n	8002fd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	0c1b      	lsrs	r3, r3, #16
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d10d      	bne.n	8002fae <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf0c      	ite	eq
 8002fa4:	2301      	moveq	r3, #1
 8002fa6:	2300      	movne	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	e00c      	b.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	43da      	mvns	r2, r3
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2301      	moveq	r3, #1
 8002fc2:	2300      	movne	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d093      	beq.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe6:	e071      	b.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff6:	d123      	bne.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003006:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003010:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	f043 0204 	orr.w	r2, r3, #4
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e067      	b.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003046:	d041      	beq.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7ff f992 	bl	8002370 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d136      	bne.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	0c1b      	lsrs	r3, r3, #16
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d10c      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	43da      	mvns	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	4013      	ands	r3, r2
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	bf14      	ite	ne
 800307a:	2301      	movne	r3, #1
 800307c:	2300      	moveq	r3, #0
 800307e:	b2db      	uxtb	r3, r3
 8003080:	e00b      	b.n	800309a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	43da      	mvns	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	4013      	ands	r3, r2
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	bf14      	ite	ne
 8003094:	2301      	movne	r3, #1
 8003096:	2300      	moveq	r3, #0
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e021      	b.n	8003110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	0c1b      	lsrs	r3, r3, #16
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10c      	bne.n	80030f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	43da      	mvns	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	e00b      	b.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	43da      	mvns	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4013      	ands	r3, r2
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	bf14      	ite	ne
 8003102:	2301      	movne	r3, #1
 8003104:	2300      	moveq	r3, #0
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	f47f af6d 	bne.w	8002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b084      	sub	sp, #16
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003124:	e034      	b.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f886 	bl	8003238 <I2C_IsAcknowledgeFailed>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e034      	b.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800313c:	d028      	beq.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313e:	f7ff f917 	bl	8002370 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	d302      	bcc.n	8003154 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d11d      	bne.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315e:	2b80      	cmp	r3, #128	@ 0x80
 8003160:	d016      	beq.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	f043 0220 	orr.w	r2, r3, #32
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e007      	b.n	80031a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b80      	cmp	r3, #128	@ 0x80
 800319c:	d1c3      	bne.n	8003126 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b4:	e034      	b.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f83e 	bl	8003238 <I2C_IsAcknowledgeFailed>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e034      	b.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031cc:	d028      	beq.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	f7ff f8cf 	bl	8002370 <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d302      	bcc.n	80031e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11d      	bne.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0304 	and.w	r3, r3, #4
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d016      	beq.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320c:	f043 0220 	orr.w	r2, r3, #32
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e007      	b.n	8003230 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d1c3      	bne.n	80031b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800324a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324e:	d11b      	bne.n	8003288 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003258:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	f043 0204 	orr.w	r2, r3, #4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d129      	bne.n	8003300 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	@ 0x24
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0201 	bic.w	r2, r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0210 	bic.w	r2, r2, #16
 80032d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2220      	movs	r2, #32
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003318:	2300      	movs	r3, #0
 800331a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	d12a      	bne.n	800337e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2224      	movs	r2, #36	@ 0x24
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003348:	89fb      	ldrh	r3, [r7, #14]
 800334a:	f023 030f 	bic.w	r3, r3, #15
 800334e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b29a      	uxth	r2, r3
 8003354:	89fb      	ldrh	r3, [r7, #14]
 8003356:	4313      	orrs	r3, r2
 8003358:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	89fa      	ldrh	r2, [r7, #14]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e000      	b.n	8003380 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
  }
}
 8003380:	4618      	mov	r0, r3
 8003382:	3714      	adds	r7, #20
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e267      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d075      	beq.n	8003496 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033aa:	4b88      	ldr	r3, [pc, #544]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 030c 	and.w	r3, r3, #12
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d00c      	beq.n	80033d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b6:	4b85      	ldr	r3, [pc, #532]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033be:	2b08      	cmp	r3, #8
 80033c0:	d112      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c2:	4b82      	ldr	r3, [pc, #520]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ce:	d10b      	bne.n	80033e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	4b7e      	ldr	r3, [pc, #504]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d05b      	beq.n	8003494 <HAL_RCC_OscConfig+0x108>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d157      	bne.n	8003494 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e242      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f0:	d106      	bne.n	8003400 <HAL_RCC_OscConfig+0x74>
 80033f2:	4b76      	ldr	r3, [pc, #472]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a75      	ldr	r2, [pc, #468]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	e01d      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x98>
 800340a:	4b70      	ldr	r3, [pc, #448]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6f      	ldr	r2, [pc, #444]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003410:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	4b6d      	ldr	r3, [pc, #436]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a6c      	ldr	r2, [pc, #432]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800341c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0xb0>
 8003424:	4b69      	ldr	r3, [pc, #420]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a68      	ldr	r2, [pc, #416]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800342a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800342e:	6013      	str	r3, [r2, #0]
 8003430:	4b66      	ldr	r3, [pc, #408]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a65      	ldr	r2, [pc, #404]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003436:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800343a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d013      	beq.n	800346c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe ff94 	bl	8002370 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe ff90 	bl	8002370 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e207      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b5b      	ldr	r3, [pc, #364]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0xc0>
 800346a:	e014      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7fe ff80 	bl	8002370 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe ff7c 	bl	8002370 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	@ 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e1f3      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003486:	4b51      	ldr	r3, [pc, #324]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1f0      	bne.n	8003474 <HAL_RCC_OscConfig+0xe8>
 8003492:	e000      	b.n	8003496 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003494:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d063      	beq.n	800356a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a2:	4b4a      	ldr	r3, [pc, #296]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ae:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d11c      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ba:	4b44      	ldr	r3, [pc, #272]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d116      	bne.n	80034f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1c7      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034de:	4b3b      	ldr	r3, [pc, #236]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	4937      	ldr	r1, [pc, #220]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f2:	e03a      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d020      	beq.n	800353e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034fc:	4b34      	ldr	r3, [pc, #208]	@ (80035d0 <HAL_RCC_OscConfig+0x244>)
 80034fe:	2201      	movs	r2, #1
 8003500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003502:	f7fe ff35 	bl	8002370 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	e008      	b.n	800351c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800350a:	f7fe ff31 	bl	8002370 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d901      	bls.n	800351c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e1a8      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800351c:	4b2b      	ldr	r3, [pc, #172]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d0f0      	beq.n	800350a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003528:	4b28      	ldr	r3, [pc, #160]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4925      	ldr	r1, [pc, #148]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003538:	4313      	orrs	r3, r2
 800353a:	600b      	str	r3, [r1, #0]
 800353c:	e015      	b.n	800356a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <HAL_RCC_OscConfig+0x244>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe ff14 	bl	8002370 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	e008      	b.n	800355e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354c:	f7fe ff10 	bl	8002370 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d901      	bls.n	800355e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e187      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355e:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d1f0      	bne.n	800354c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d036      	beq.n	80035e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d016      	beq.n	80035ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <HAL_RCC_OscConfig+0x248>)
 8003580:	2201      	movs	r2, #1
 8003582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fef4 	bl	8002370 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800358c:	f7fe fef0 	bl	8002370 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e167      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359e:	4b0b      	ldr	r3, [pc, #44]	@ (80035cc <HAL_RCC_OscConfig+0x240>)
 80035a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d0f0      	beq.n	800358c <HAL_RCC_OscConfig+0x200>
 80035aa:	e01b      	b.n	80035e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ac:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <HAL_RCC_OscConfig+0x248>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fedd 	bl	8002370 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	e00e      	b.n	80035d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ba:	f7fe fed9 	bl	8002370 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d907      	bls.n	80035d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e150      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80035cc:	40023800 	.word	0x40023800
 80035d0:	42470000 	.word	0x42470000
 80035d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b88      	ldr	r3, [pc, #544]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1ea      	bne.n	80035ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8097 	beq.w	8003720 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f2:	2300      	movs	r3, #0
 80035f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f6:	4b81      	ldr	r3, [pc, #516]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
 8003606:	4b7d      	ldr	r3, [pc, #500]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	4a7c      	ldr	r2, [pc, #496]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003610:	6413      	str	r3, [r2, #64]	@ 0x40
 8003612:	4b7a      	ldr	r3, [pc, #488]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	4b77      	ldr	r3, [pc, #476]	@ (8003800 <HAL_RCC_OscConfig+0x474>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362a:	2b00      	cmp	r3, #0
 800362c:	d118      	bne.n	8003660 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362e:	4b74      	ldr	r3, [pc, #464]	@ (8003800 <HAL_RCC_OscConfig+0x474>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a73      	ldr	r2, [pc, #460]	@ (8003800 <HAL_RCC_OscConfig+0x474>)
 8003634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363a:	f7fe fe99 	bl	8002370 <HAL_GetTick>
 800363e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	e008      	b.n	8003654 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003642:	f7fe fe95 	bl	8002370 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e10c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <HAL_RCC_OscConfig+0x474>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d106      	bne.n	8003676 <HAL_RCC_OscConfig+0x2ea>
 8003668:	4b64      	ldr	r3, [pc, #400]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	4a63      	ldr	r2, [pc, #396]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800366e:	f043 0301 	orr.w	r3, r3, #1
 8003672:	6713      	str	r3, [r2, #112]	@ 0x70
 8003674:	e01c      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d10c      	bne.n	8003698 <HAL_RCC_OscConfig+0x30c>
 800367e:	4b5f      	ldr	r3, [pc, #380]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003682:	4a5e      	ldr	r2, [pc, #376]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 0304 	orr.w	r3, r3, #4
 8003688:	6713      	str	r3, [r2, #112]	@ 0x70
 800368a:	4b5c      	ldr	r3, [pc, #368]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800368e:	4a5b      	ldr	r2, [pc, #364]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	@ 0x70
 8003696:	e00b      	b.n	80036b0 <HAL_RCC_OscConfig+0x324>
 8003698:	4b58      	ldr	r3, [pc, #352]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369c:	4a57      	ldr	r2, [pc, #348]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a4:	4b55      	ldr	r3, [pc, #340]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a8:	4a54      	ldr	r2, [pc, #336]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80036aa:	f023 0304 	bic.w	r3, r3, #4
 80036ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe fe5a 	bl	8002370 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fe fe56 	bl	8002370 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e0cb      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d6:	4b49      	ldr	r3, [pc, #292]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80036d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ee      	beq.n	80036c0 <HAL_RCC_OscConfig+0x334>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e4:	f7fe fe44 	bl	8002370 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fe fe40 	bl	8002370 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e0b5      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003702:	4b3e      	ldr	r3, [pc, #248]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1ee      	bne.n	80036ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370e:	7dfb      	ldrb	r3, [r7, #23]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b39      	ldr	r3, [pc, #228]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	4a38      	ldr	r2, [pc, #224]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800371a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 80a1 	beq.w	800386c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372a:	4b34      	ldr	r3, [pc, #208]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	2b08      	cmp	r3, #8
 8003734:	d05c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b02      	cmp	r3, #2
 800373c:	d141      	bne.n	80037c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b31      	ldr	r3, [pc, #196]	@ (8003804 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fe14 	bl	8002370 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fe10 	bl	8002370 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e087      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b27      	ldr	r3, [pc, #156]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	431a      	orrs	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003778:	019b      	lsls	r3, r3, #6
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003780:	085b      	lsrs	r3, r3, #1
 8003782:	3b01      	subs	r3, #1
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	431a      	orrs	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	061b      	lsls	r3, r3, #24
 800378e:	491b      	ldr	r1, [pc, #108]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 8003790:	4313      	orrs	r3, r2
 8003792:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003794:	4b1b      	ldr	r3, [pc, #108]	@ (8003804 <HAL_RCC_OscConfig+0x478>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379a:	f7fe fde9 	bl	8002370 <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a2:	f7fe fde5 	bl	8002370 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e05c      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b4:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x416>
 80037c0:	e054      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c2:	4b10      	ldr	r3, [pc, #64]	@ (8003804 <HAL_RCC_OscConfig+0x478>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fdd2 	bl	8002370 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d0:	f7fe fdce 	bl	8002370 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e045      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <HAL_RCC_OscConfig+0x470>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0x444>
 80037ee:	e03d      	b.n	800386c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d107      	bne.n	8003808 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e038      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000
 8003804:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003808:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_RCC_OscConfig+0x4ec>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d028      	beq.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d121      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d11a      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003838:	4013      	ands	r3, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800383e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003840:	4293      	cmp	r3, r2
 8003842:	d111      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	3b01      	subs	r3, #1
 8003852:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d107      	bne.n	8003868 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e000      	b.n	800386e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0cc      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003890:	4b68      	ldr	r3, [pc, #416]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d90c      	bls.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389e:	4b65      	ldr	r3, [pc, #404]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a6:	4b63      	ldr	r3, [pc, #396]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d001      	beq.n	80038b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e0b8      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d020      	beq.n	8003906 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d0:	4b59      	ldr	r3, [pc, #356]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a58      	ldr	r2, [pc, #352]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e8:	4b53      	ldr	r3, [pc, #332]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	4a52      	ldr	r2, [pc, #328]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f4:	4b50      	ldr	r3, [pc, #320]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	494d      	ldr	r1, [pc, #308]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b00      	cmp	r3, #0
 8003910:	d044      	beq.n	800399c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d107      	bne.n	800392a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	4b47      	ldr	r3, [pc, #284]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d119      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e07f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b02      	cmp	r3, #2
 8003930:	d003      	beq.n	800393a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d109      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e067      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395a:	4b37      	ldr	r3, [pc, #220]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f023 0203 	bic.w	r2, r3, #3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4934      	ldr	r1, [pc, #208]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	4313      	orrs	r3, r2
 800396a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800396c:	f7fe fd00 	bl	8002370 <HAL_GetTick>
 8003970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	e00a      	b.n	800398a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003974:	f7fe fcfc 	bl	8002370 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e04f      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 020c 	and.w	r2, r3, #12
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	429a      	cmp	r2, r3
 800399a:	d1eb      	bne.n	8003974 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b25      	ldr	r3, [pc, #148]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d20c      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b22      	ldr	r3, [pc, #136]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b2:	4b20      	ldr	r3, [pc, #128]	@ (8003a34 <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	683a      	ldr	r2, [r7, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d001      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e032      	b.n	8003a2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d008      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d0:	4b19      	ldr	r3, [pc, #100]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	4916      	ldr	r1, [pc, #88]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d009      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ee:	4b12      	ldr	r3, [pc, #72]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	490e      	ldr	r1, [pc, #56]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a02:	f000 f821 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	490a      	ldr	r1, [pc, #40]	@ (8003a3c <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	5ccb      	ldrb	r3, [r1, r3]
 8003a16:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1a:	4a09      	ldr	r2, [pc, #36]	@ (8003a40 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1e:	4b09      	ldr	r3, [pc, #36]	@ (8003a44 <HAL_RCC_ClockConfig+0x1c8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fe fc60 	bl	80022e8 <HAL_InitTick>

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	40023c00 	.word	0x40023c00
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	08005c2c 	.word	0x08005c2c
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000010 	.word	0x20000010

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a4c:	b094      	sub	sp, #80	@ 0x50
 8003a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a54:	2300      	movs	r3, #0
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a58:	2300      	movs	r3, #0
 8003a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a60:	4b79      	ldr	r3, [pc, #484]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 030c 	and.w	r3, r3, #12
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d00d      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x40>
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	f200 80e1 	bhi.w	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0x34>
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7a:	e0db      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b73      	ldr	r3, [pc, #460]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003a80:	e0db      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a82:	4b73      	ldr	r3, [pc, #460]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a86:	e0d8      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a88:	4b6f      	ldr	r3, [pc, #444]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a90:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a92:	4b6d      	ldr	r3, [pc, #436]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d063      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	099b      	lsrs	r3, r3, #6
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aba:	4622      	mov	r2, r4
 8003abc:	462b      	mov	r3, r5
 8003abe:	f04f 0000 	mov.w	r0, #0
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	0159      	lsls	r1, r3, #5
 8003ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003acc:	0150      	lsls	r0, r2, #5
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4621      	mov	r1, r4
 8003ad4:	1a51      	subs	r1, r2, r1
 8003ad6:	6139      	str	r1, [r7, #16]
 8003ad8:	4629      	mov	r1, r5
 8003ada:	eb63 0301 	sbc.w	r3, r3, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aec:	4659      	mov	r1, fp
 8003aee:	018b      	lsls	r3, r1, #6
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003af6:	4651      	mov	r1, sl
 8003af8:	018a      	lsls	r2, r1, #6
 8003afa:	4651      	mov	r1, sl
 8003afc:	ebb2 0801 	subs.w	r8, r2, r1
 8003b00:	4659      	mov	r1, fp
 8003b02:	eb63 0901 	sbc.w	r9, r3, r1
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	f04f 0300 	mov.w	r3, #0
 8003b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b1a:	4690      	mov	r8, r2
 8003b1c:	4699      	mov	r9, r3
 8003b1e:	4623      	mov	r3, r4
 8003b20:	eb18 0303 	adds.w	r3, r8, r3
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	462b      	mov	r3, r5
 8003b28:	eb49 0303 	adc.w	r3, r9, r3
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	024b      	lsls	r3, r1, #9
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b44:	4621      	mov	r1, r4
 8003b46:	024a      	lsls	r2, r1, #9
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b4e:	2200      	movs	r2, #0
 8003b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b58:	f7fc ff6e 	bl	8000a38 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b64:	e058      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b66:	4b38      	ldr	r3, [pc, #224]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	099b      	lsrs	r3, r3, #6
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4618      	mov	r0, r3
 8003b70:	4611      	mov	r1, r2
 8003b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b76:	623b      	str	r3, [r7, #32]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b80:	4642      	mov	r2, r8
 8003b82:	464b      	mov	r3, r9
 8003b84:	f04f 0000 	mov.w	r0, #0
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	0159      	lsls	r1, r3, #5
 8003b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b92:	0150      	lsls	r0, r2, #5
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4641      	mov	r1, r8
 8003b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8003bc0:	f04f 0200 	mov.w	r2, #0
 8003bc4:	f04f 0300 	mov.w	r3, #0
 8003bc8:	00eb      	lsls	r3, r5, #3
 8003bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bce:	00e2      	lsls	r2, r4, #3
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	461d      	mov	r5, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	18e3      	adds	r3, r4, r3
 8003bd8:	603b      	str	r3, [r7, #0]
 8003bda:	464b      	mov	r3, r9
 8003bdc:	eb45 0303 	adc.w	r3, r5, r3
 8003be0:	607b      	str	r3, [r7, #4]
 8003be2:	f04f 0200 	mov.w	r2, #0
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bee:	4629      	mov	r1, r5
 8003bf0:	028b      	lsls	r3, r1, #10
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	028a      	lsls	r2, r1, #10
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c02:	2200      	movs	r2, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	61fa      	str	r2, [r7, #28]
 8003c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c0c:	f7fc ff14 	bl	8000a38 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4613      	mov	r3, r2
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	0c1b      	lsrs	r3, r3, #16
 8003c1e:	f003 0303 	and.w	r3, r3, #3
 8003c22:	3301      	adds	r3, #1
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c32:	e002      	b.n	8003c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8003c36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3750      	adds	r7, #80	@ 0x50
 8003c40:	46bd      	mov	sp, r7
 8003c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	007a1200 	.word	0x007a1200

08003c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b03      	ldr	r3, [pc, #12]	@ (8003c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000000 	.word	0x20000000

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b05      	ldr	r3, [pc, #20]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0a9b      	lsrs	r3, r3, #10
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4903      	ldr	r1, [pc, #12]	@ (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	08005c3c 	.word	0x08005c3c

08003c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c98:	f7ff ffdc 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	0b5b      	lsrs	r3, r3, #13
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	4903      	ldr	r1, [pc, #12]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003caa:	5ccb      	ldrb	r3, [r1, r3]
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	08005c3c 	.word	0x08005c3c

08003cbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d075      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cf0:	4b91      	ldr	r3, [pc, #580]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cf6:	f7fe fb3b 	bl	8002370 <HAL_GetTick>
 8003cfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cfe:	f7fe fb37 	bl	8002370 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e189      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d10:	4b8a      	ldr	r3, [pc, #552]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f0      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d009      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	019a      	lsls	r2, r3, #6
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	071b      	lsls	r3, r3, #28
 8003d34:	4981      	ldr	r1, [pc, #516]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01f      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d48:	4b7c      	ldr	r3, [pc, #496]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d4e:	0f1b      	lsrs	r3, r3, #28
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	019a      	lsls	r2, r3, #6
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	431a      	orrs	r2, r3
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	071b      	lsls	r3, r3, #28
 8003d68:	4974      	ldr	r1, [pc, #464]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d70:	4b72      	ldr	r3, [pc, #456]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d76:	f023 021f 	bic.w	r2, r3, #31
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	496e      	ldr	r1, [pc, #440]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	019a      	lsls	r2, r3, #6
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	061b      	lsls	r3, r3, #24
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	071b      	lsls	r3, r3, #28
 8003da8:	4964      	ldr	r1, [pc, #400]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003db0:	4b61      	ldr	r3, [pc, #388]	@ (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003db6:	f7fe fadb 	bl	8002370 <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003dbe:	f7fe fad7 	bl	8002370 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e129      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003dd0:	4b5a      	ldr	r3, [pc, #360]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d079      	beq.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003df4:	4b52      	ldr	r3, [pc, #328]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dfa:	f7fe fab9 	bl	8002370 <HAL_GetTick>
 8003dfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e02:	f7fe fab5 	bl	8002370 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e107      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e14:	4b49      	ldr	r3, [pc, #292]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e20:	d0ef      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0304 	and.w	r3, r3, #4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d020      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e2e:	4b43      	ldr	r3, [pc, #268]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e34:	0f1b      	lsrs	r3, r3, #28
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	019a      	lsls	r2, r3, #6
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	071b      	lsls	r3, r3, #28
 8003e4e:	493b      	ldr	r1, [pc, #236]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e5c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	4934      	ldr	r1, [pc, #208]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d01e      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	0e1b      	lsrs	r3, r3, #24
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	019a      	lsls	r2, r3, #6
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	061b      	lsls	r3, r3, #24
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	071b      	lsls	r3, r3, #28
 8003e9c:	4927      	ldr	r1, [pc, #156]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ea4:	4b25      	ldr	r3, [pc, #148]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eaa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	4922      	ldr	r1, [pc, #136]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003eba:	4b21      	ldr	r3, [pc, #132]	@ (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ec0:	f7fe fa56 	bl	8002370 <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003ec8:	f7fe fa52 	bl	8002370 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0a4      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eda:	4b18      	ldr	r3, [pc, #96]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ee2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee6:	d1ef      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 808b 	beq.w	800400c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b10      	ldr	r3, [pc, #64]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	4a0f      	ldr	r2, [pc, #60]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f06:	4b0d      	ldr	r3, [pc, #52]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a0b      	ldr	r2, [pc, #44]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f1e:	f7fe fa27 	bl	8002370 <HAL_GetTick>
 8003f22:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f24:	e010      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f26:	f7fe fa23 	bl	8002370 <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d909      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	e075      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003f38:	42470068 	.word	0x42470068
 8003f3c:	40023800 	.word	0x40023800
 8003f40:	42470070 	.word	0x42470070
 8003f44:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f48:	4b38      	ldr	r3, [pc, #224]	@ (800402c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0e8      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f54:	4b36      	ldr	r3, [pc, #216]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02f      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d028      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f72:	4b2f      	ldr	r3, [pc, #188]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f7a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f82:	4b2c      	ldr	r3, [pc, #176]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f88:	4a29      	ldr	r2, [pc, #164]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f8e:	4b28      	ldr	r3, [pc, #160]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d114      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fe f9e9 	bl	8002370 <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fe f9e5 	bl	8002370 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e035      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0ee      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fcc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fd0:	d10d      	bne.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003fd2:	4b17      	ldr	r3, [pc, #92]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe6:	4912      	ldr	r1, [pc, #72]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]
 8003fec:	e005      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003fee:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ff8:	6093      	str	r3, [r2, #8]
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ffc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004002:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004006:	490a      	ldr	r1, [pc, #40]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004008:	4313      	orrs	r3, r2
 800400a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800401e:	4b06      	ldr	r3, [pc, #24]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004020:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3718      	adds	r7, #24
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40007000 	.word	0x40007000
 8004030:	40023800 	.word	0x40023800
 8004034:	42470e40 	.word	0x42470e40
 8004038:	424711e0 	.word	0x424711e0

0800403c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e073      	b.n	800413a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	7f5b      	ldrb	r3, [r3, #29]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d105      	bne.n	8004068 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fd f8e0 	bl	8001228 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2202      	movs	r2, #2
 800406c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d055      	beq.n	8004128 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	22ca      	movs	r2, #202	@ 0xca
 8004082:	625a      	str	r2, [r3, #36]	@ 0x24
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2253      	movs	r2, #83	@ 0x53
 800408a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fa49 	bl	8004524 <RTC_EnterInitMode>
 8004092:	4603      	mov	r3, r0
 8004094:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d12c      	bne.n	80040f6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80040aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040ae:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6899      	ldr	r1, [r3, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6919      	ldr	r1, [r3, #16]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	041a      	lsls	r2, r3, #16
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fa50 	bl	8004592 <RTC_ExitInitMode>
 80040f2:	4603      	mov	r3, r0
 80040f4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d110      	bne.n	800411e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800410a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	699a      	ldr	r2, [r3, #24]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	22ff      	movs	r2, #255	@ 0xff
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24
 8004126:	e001      	b.n	800412c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004142:	b590      	push	{r4, r7, lr}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	7f1b      	ldrb	r3, [r3, #28]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_RTC_SetTime+0x1c>
 800415a:	2302      	movs	r3, #2
 800415c:	e087      	b.n	800426e <HAL_RTC_SetTime+0x12c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2202      	movs	r2, #2
 8004168:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d126      	bne.n	80041be <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2200      	movs	r2, #0
 8004182:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fa27 	bl	80045dc <RTC_ByteToBcd2>
 800418e:	4603      	mov	r3, r0
 8004190:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	785b      	ldrb	r3, [r3, #1]
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fa20 	bl	80045dc <RTC_ByteToBcd2>
 800419c:	4603      	mov	r3, r0
 800419e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041a0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	789b      	ldrb	r3, [r3, #2]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fa18 	bl	80045dc <RTC_ByteToBcd2>
 80041ac:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041ae:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	78db      	ldrb	r3, [r3, #3]
 80041b6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	e018      	b.n	80041f0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2200      	movs	r2, #0
 80041d0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	785b      	ldrb	r3, [r3, #1]
 80041dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041de:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041e4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	78db      	ldrb	r3, [r3, #3]
 80041ea:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	22ca      	movs	r2, #202	@ 0xca
 80041f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2253      	movs	r2, #83	@ 0x53
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f98f 	bl	8004524 <RTC_EnterInitMode>
 8004206:	4603      	mov	r3, r0
 8004208:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d120      	bne.n	8004252 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800421a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800421e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800422e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f9a2 	bl	8004592 <RTC_ExitInitMode>
 800424e:	4603      	mov	r3, r0
 8004250:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004252:	7cfb      	ldrb	r3, [r7, #19]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d102      	bne.n	800425e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	22ff      	movs	r2, #255	@ 0xff
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]

  return status;
 800426c:	7cfb      	ldrb	r3, [r7, #19]
}
 800426e:	4618      	mov	r0, r3
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	bd90      	pop	{r4, r7, pc}

08004276 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b086      	sub	sp, #24
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80042a8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80042ac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	0c1b      	lsrs	r3, r3, #16
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	0d9b      	lsrs	r3, r3, #22
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11a      	bne.n	8004328 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f98e 	bl	8004618 <RTC_Bcd2ToByte>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	785b      	ldrb	r3, [r3, #1]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f985 	bl	8004618 <RTC_Bcd2ToByte>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	789b      	ldrb	r3, [r3, #2]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 f97c 	bl	8004618 <RTC_Bcd2ToByte>
 8004320:	4603      	mov	r3, r0
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004332:	b590      	push	{r4, r7, lr}
 8004334:	b087      	sub	sp, #28
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	7f1b      	ldrb	r3, [r3, #28]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d101      	bne.n	800434e <HAL_RTC_SetDate+0x1c>
 800434a:	2302      	movs	r3, #2
 800434c:	e071      	b.n	8004432 <HAL_RTC_SetDate+0x100>
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2202      	movs	r2, #2
 8004358:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10e      	bne.n	800437e <HAL_RTC_SetDate+0x4c>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	785b      	ldrb	r3, [r3, #1]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	f023 0310 	bic.w	r3, r3, #16
 8004374:	b2db      	uxtb	r3, r3
 8004376:	330a      	adds	r3, #10
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d11c      	bne.n	80043be <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	78db      	ldrb	r3, [r3, #3]
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f927 	bl	80045dc <RTC_ByteToBcd2>
 800438e:	4603      	mov	r3, r0
 8004390:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	785b      	ldrb	r3, [r3, #1]
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f920 	bl	80045dc <RTC_ByteToBcd2>
 800439c:	4603      	mov	r3, r0
 800439e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043a0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	789b      	ldrb	r3, [r3, #2]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f918 	bl	80045dc <RTC_ByteToBcd2>
 80043ac:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043ae:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e00e      	b.n	80043dc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	78db      	ldrb	r3, [r3, #3]
 80043c2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043ca:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043d0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043d8:	4313      	orrs	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	22ca      	movs	r2, #202	@ 0xca
 80043e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2253      	movs	r2, #83	@ 0x53
 80043ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f899 	bl	8004524 <RTC_EnterInitMode>
 80043f2:	4603      	mov	r3, r0
 80043f4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10c      	bne.n	8004416 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004406:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800440a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f8c0 	bl	8004592 <RTC_ExitInitMode>
 8004412:	4603      	mov	r3, r0
 8004414:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004416:	7cfb      	ldrb	r3, [r7, #19]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	22ff      	movs	r2, #255	@ 0xff
 8004428:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	771a      	strb	r2, [r3, #28]

  return status;
 8004430:	7cfb      	ldrb	r3, [r7, #19]
}
 8004432:	4618      	mov	r0, r3
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	bd90      	pop	{r4, r7, pc}

0800443a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004454:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004458:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	0c1b      	lsrs	r3, r3, #16
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	b2da      	uxtb	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	0b5b      	lsrs	r3, r3, #13
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11a      	bne.n	80044ce <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	78db      	ldrb	r3, [r3, #3]
 800449c:	4618      	mov	r0, r3
 800449e:	f000 f8bb 	bl	8004618 <RTC_Bcd2ToByte>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461a      	mov	r2, r3
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	785b      	ldrb	r3, [r3, #1]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 f8b2 	bl	8004618 <RTC_Bcd2ToByte>
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	789b      	ldrb	r3, [r3, #2]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 f8a9 	bl	8004618 <RTC_Bcd2ToByte>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004520 <HAL_RTC_WaitForSynchro+0x48>)
 80044ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044ec:	f7fd ff40 	bl	8002370 <HAL_GetTick>
 80044f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044f2:	e009      	b.n	8004508 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044f4:	f7fd ff3c 	bl	8002370 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004502:	d901      	bls.n	8004508 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e007      	b.n	8004518 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ee      	beq.n	80044f4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	00017f5f 	.word	0x00017f5f

08004524 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800452c:	2300      	movs	r3, #0
 800452e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800453e:	2b00      	cmp	r3, #0
 8004540:	d122      	bne.n	8004588 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004550:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004552:	f7fd ff0d 	bl	8002370 <HAL_GetTick>
 8004556:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004558:	e00c      	b.n	8004574 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800455a:	f7fd ff09 	bl	8002370 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004568:	d904      	bls.n	8004574 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2204      	movs	r2, #4
 800456e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <RTC_EnterInitMode+0x64>
 8004582:	7bfb      	ldrb	r3, [r7, #15]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d1e8      	bne.n	800455a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004588:	7bfb      	ldrb	r3, [r7, #15]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff8b 	bl	80044d8 <HAL_RTC_WaitForSynchro>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d004      	beq.n	80045d2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2204      	movs	r2, #4
 80045cc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80045ea:	e005      	b.n	80045f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3301      	adds	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	3b0a      	subs	r3, #10
 80045f6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	2b09      	cmp	r3, #9
 80045fc:	d8f6      	bhi.n	80045ec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	011b      	lsls	r3, r3, #4
 8004604:	b2da      	uxtb	r2, r3
 8004606:	79fb      	ldrb	r3, [r7, #7]
 8004608:	4313      	orrs	r3, r2
 800460a:	b2db      	uxtb	r3, r3
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	091b      	lsrs	r3, r3, #4
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	4613      	mov	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4413      	add	r3, r2
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	b2db      	uxtb	r3, r3
 8004644:	4413      	add	r3, r2
 8004646:	b2db      	uxtb	r3, r3
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e07b      	b.n	800475e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d108      	bne.n	8004680 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004676:	d009      	beq.n	800468c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	61da      	str	r2, [r3, #28]
 800467e:	e005      	b.n	800468c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fc fde8 	bl	800127c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69db      	ldr	r3, [r3, #28]
 8004702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004710:	ea42 0103 	orr.w	r1, r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004718:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	0c1b      	lsrs	r3, r3, #16
 800472a:	f003 0104 	and.w	r1, r3, #4
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	f003 0210 	and.w	r2, r3, #16
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	430a      	orrs	r2, r1
 800473c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69da      	ldr	r2, [r3, #28]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800474c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b088      	sub	sp, #32
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004780:	2b01      	cmp	r3, #1
 8004782:	d101      	bne.n	8004788 <HAL_SPI_Transmit+0x22>
 8004784:	2302      	movs	r3, #2
 8004786:	e12d      	b.n	80049e4 <HAL_SPI_Transmit+0x27e>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004790:	f7fd fdee 	bl	8002370 <HAL_GetTick>
 8004794:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d002      	beq.n	80047ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047a6:	2302      	movs	r3, #2
 80047a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047aa:	e116      	b.n	80049da <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_SPI_Transmit+0x52>
 80047b2:	88fb      	ldrh	r3, [r7, #6]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d102      	bne.n	80047be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047bc:	e10d      	b.n	80049da <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2203      	movs	r2, #3
 80047c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	88fa      	ldrh	r2, [r7, #6]
 80047d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004804:	d10f      	bne.n	8004826 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004814:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004824:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004830:	2b40      	cmp	r3, #64	@ 0x40
 8004832:	d007      	beq.n	8004844 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800484c:	d14f      	bne.n	80048ee <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_SPI_Transmit+0xf6>
 8004856:	8afb      	ldrh	r3, [r7, #22]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d142      	bne.n	80048e2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486c:	1c9a      	adds	r2, r3, #2
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004880:	e02f      	b.n	80048e2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b02      	cmp	r3, #2
 800488e:	d112      	bne.n	80048b6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004894:	881a      	ldrh	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b29a      	uxth	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048b4:	e015      	b.n	80048e2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b6:	f7fd fd5b 	bl	8002370 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d803      	bhi.n	80048ce <HAL_SPI_Transmit+0x168>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048cc:	d102      	bne.n	80048d4 <HAL_SPI_Transmit+0x16e>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80048e0:	e07b      	b.n	80049da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1ca      	bne.n	8004882 <HAL_SPI_Transmit+0x11c>
 80048ec:	e050      	b.n	8004990 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_SPI_Transmit+0x196>
 80048f6:	8afb      	ldrh	r3, [r7, #22]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d144      	bne.n	8004986 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	330c      	adds	r3, #12
 8004906:	7812      	ldrb	r2, [r2, #0]
 8004908:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004922:	e030      	b.n	8004986 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b02      	cmp	r3, #2
 8004930:	d113      	bne.n	800495a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	7812      	ldrb	r2, [r2, #0]
 800493e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004958:	e015      	b.n	8004986 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800495a:	f7fd fd09 	bl	8002370 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d803      	bhi.n	8004972 <HAL_SPI_Transmit+0x20c>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004970:	d102      	bne.n	8004978 <HAL_SPI_Transmit+0x212>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d106      	bne.n	8004986 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004984:	e029      	b.n	80049da <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800498a:	b29b      	uxth	r3, r3
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1c9      	bne.n	8004924 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	6839      	ldr	r1, [r7, #0]
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fbdf 	bl	8005158 <SPI_EndRxTxTransaction>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10a      	bne.n	80049c4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049ae:	2300      	movs	r3, #0
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e003      	b.n	80049da <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2201      	movs	r2, #1
 80049d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	603b      	str	r3, [r7, #0]
 80049f8:	4613      	mov	r3, r2
 80049fa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a10:	e0fb      	b.n	8004c0a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1a:	d112      	bne.n	8004a42 <HAL_SPI_Receive+0x56>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10e      	bne.n	8004a42 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2204      	movs	r2, #4
 8004a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a2c:	88fa      	ldrh	r2, [r7, #6]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	68b9      	ldr	r1, [r7, #8]
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 f8ef 	bl	8004c1c <HAL_SPI_TransmitReceive>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	e0e8      	b.n	8004c14 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_SPI_Receive+0x64>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e0e1      	b.n	8004c14 <HAL_SPI_Receive+0x228>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a58:	f7fd fc8a 	bl	8002370 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_SPI_Receive+0x7e>
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d102      	bne.n	8004a70 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a6e:	e0cc      	b.n	8004c0a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2204      	movs	r2, #4
 8004a74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	88fa      	ldrh	r2, [r7, #6]
 8004a88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	88fa      	ldrh	r2, [r7, #6]
 8004a8e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ad6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b40      	cmp	r3, #64	@ 0x40
 8004ae4:	d007      	beq.n	8004af6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004af4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d16a      	bne.n	8004bd4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004afe:	e032      	b.n	8004b66 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d115      	bne.n	8004b3a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f103 020c 	add.w	r2, r3, #12
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1a:	7812      	ldrb	r2, [r2, #0]
 8004b1c:	b2d2      	uxtb	r2, r2
 8004b1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	3b01      	subs	r3, #1
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b38:	e015      	b.n	8004b66 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b3a:	f7fd fc19 	bl	8002370 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d803      	bhi.n	8004b52 <HAL_SPI_Receive+0x166>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b50:	d102      	bne.n	8004b58 <HAL_SPI_Receive+0x16c>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d106      	bne.n	8004b66 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004b64:	e051      	b.n	8004c0a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1c7      	bne.n	8004b00 <HAL_SPI_Receive+0x114>
 8004b70:	e035      	b.n	8004bde <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d113      	bne.n	8004ba8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	b292      	uxth	r2, r2
 8004b8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b92:	1c9a      	adds	r2, r3, #2
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	b29a      	uxth	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ba6:	e015      	b.n	8004bd4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba8:	f7fd fbe2 	bl	8002370 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d803      	bhi.n	8004bc0 <HAL_SPI_Receive+0x1d4>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bbe:	d102      	bne.n	8004bc6 <HAL_SPI_Receive+0x1da>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d106      	bne.n	8004bd4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004bd2:	e01a      	b.n	8004c0a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1c9      	bne.n	8004b72 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa52 	bl	800508c <SPI_EndRxTransaction>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
 8004c00:	e003      	b.n	8004c0a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	@ 0x30
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_TransmitReceive+0x26>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e198      	b.n	8004f74 <HAL_SPI_TransmitReceive+0x358>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c4a:	f7fd fb91 	bl	8002370 <HAL_GetTick>
 8004c4e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c60:	887b      	ldrh	r3, [r7, #2]
 8004c62:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d00f      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x70>
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c72:	d107      	bne.n	8004c84 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d103      	bne.n	8004c84 <HAL_SPI_TransmitReceive+0x68>
 8004c7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d003      	beq.n	8004c8c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c8a:	e16d      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0x82>
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d103      	bne.n	8004ca6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ca4:	e160      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d003      	beq.n	8004cba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2205      	movs	r2, #5
 8004cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	887a      	ldrh	r2, [r7, #2]
 8004cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	887a      	ldrh	r2, [r7, #2]
 8004cd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	887a      	ldrh	r2, [r7, #2]
 8004cdc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	887a      	ldrh	r2, [r7, #2]
 8004ce2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cfa:	2b40      	cmp	r3, #64	@ 0x40
 8004cfc:	d007      	beq.n	8004d0e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d16:	d17c      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_TransmitReceive+0x10a>
 8004d20:	8b7b      	ldrh	r3, [r7, #26]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d16a      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2a:	881a      	ldrh	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d36:	1c9a      	adds	r2, r3, #2
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d4a:	e057      	b.n	8004dfc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d11b      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x176>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d016      	beq.n	8004d92 <HAL_SPI_TransmitReceive+0x176>
 8004d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d113      	bne.n	8004d92 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d119      	bne.n	8004dd4 <HAL_SPI_TransmitReceive+0x1b8>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d014      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db4:	b292      	uxth	r2, r2
 8004db6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	1c9a      	adds	r2, r3, #2
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dd4:	f7fd facc 	bl	8002370 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d80b      	bhi.n	8004dfc <HAL_SPI_TransmitReceive+0x1e0>
 8004de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dea:	d007      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004dfa:	e0b5      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1a2      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x130>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d19d      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x130>
 8004e10:	e080      	b.n	8004f14 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_TransmitReceive+0x204>
 8004e1a:	8b7b      	ldrh	r3, [r7, #26]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d16f      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	7812      	ldrb	r2, [r2, #0]
 8004e2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e46:	e05b      	b.n	8004f00 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d11c      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x274>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d017      	beq.n	8004e90 <HAL_SPI_TransmitReceive+0x274>
 8004e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d114      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	330c      	adds	r3, #12
 8004e70:	7812      	ldrb	r2, [r2, #0]
 8004e72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3b01      	subs	r3, #1
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d119      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x2b6>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d014      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ed2:	f7fd fa4d 	bl	8002370 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d803      	bhi.n	8004eea <HAL_SPI_TransmitReceive+0x2ce>
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ee8:	d102      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x2d4>
 8004eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004efe:	e033      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d19e      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x22c>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d199      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f91d 	bl	8005158 <SPI_EndRxTxTransaction>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004f30:	e01a      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f5e:	e003      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3730      	adds	r7, #48	@ 0x30
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	603b      	str	r3, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f8c:	f7fd f9f0 	bl	8002370 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f94:	1a9b      	subs	r3, r3, r2
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	4413      	add	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f9c:	f7fd f9e8 	bl	8002370 <HAL_GetTick>
 8004fa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fa2:	4b39      	ldr	r3, [pc, #228]	@ (8005088 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	015b      	lsls	r3, r3, #5
 8004fa8:	0d1b      	lsrs	r3, r3, #20
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	fb02 f303 	mul.w	r3, r2, r3
 8004fb0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fb2:	e054      	b.n	800505e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fba:	d050      	beq.n	800505e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fbc:	f7fd f9d8 	bl	8002370 <HAL_GetTick>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d902      	bls.n	8004fd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d13d      	bne.n	800504e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fe0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fea:	d111      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff4:	d004      	beq.n	8005000 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffe:	d107      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800500e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005018:	d10f      	bne.n	800503a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005038:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e017      	b.n	800507e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3b01      	subs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4013      	ands	r3, r2
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	429a      	cmp	r2, r3
 800506c:	bf0c      	ite	eq
 800506e:	2301      	moveq	r3, #1
 8005070:	2300      	movne	r3, #0
 8005072:	b2db      	uxtb	r3, r3
 8005074:	461a      	mov	r2, r3
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	429a      	cmp	r2, r3
 800507a:	d19b      	bne.n	8004fb4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000000 	.word	0x20000000

0800508c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050a0:	d111      	bne.n	80050c6 <SPI_EndRxTransaction+0x3a>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050aa:	d004      	beq.n	80050b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b4:	d107      	bne.n	80050c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050ce:	d12a      	bne.n	8005126 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d8:	d012      	beq.n	8005100 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2180      	movs	r1, #128	@ 0x80
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff ff49 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d02d      	beq.n	800514c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e026      	b.n	800514e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	2101      	movs	r1, #1
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff ff36 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01a      	beq.n	800514c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e013      	b.n	800514e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	2101      	movs	r1, #1
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f7ff ff23 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e000      	b.n	800514e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b088      	sub	sp, #32
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2201      	movs	r2, #1
 800516c:	2102      	movs	r1, #2
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7ff ff04 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517e:	f043 0220 	orr.w	r2, r3, #32
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e032      	b.n	80051f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800518a:	4b1b      	ldr	r3, [pc, #108]	@ (80051f8 <SPI_EndRxTxTransaction+0xa0>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1b      	ldr	r2, [pc, #108]	@ (80051fc <SPI_EndRxTxTransaction+0xa4>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	0d5b      	lsrs	r3, r3, #21
 8005196:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800519a:	fb02 f303 	mul.w	r3, r2, r3
 800519e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051a8:	d112      	bne.n	80051d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2200      	movs	r2, #0
 80051b2:	2180      	movs	r1, #128	@ 0x80
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff fee1 	bl	8004f7c <SPI_WaitFlagStateUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d016      	beq.n	80051ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e00f      	b.n	80051f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	3b01      	subs	r3, #1
 80051da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e6:	2b80      	cmp	r3, #128	@ 0x80
 80051e8:	d0f2      	beq.n	80051d0 <SPI_EndRxTxTransaction+0x78>
 80051ea:	e000      	b.n	80051ee <SPI_EndRxTxTransaction+0x96>
        break;
 80051ec:	bf00      	nop
  }

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000000 	.word	0x20000000
 80051fc:	165e9f81 	.word	0x165e9f81

08005200 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e042      	b.n	8005298 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005218:	b2db      	uxtb	r3, r3
 800521a:	2b00      	cmp	r3, #0
 800521c:	d106      	bne.n	800522c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f7fc f890 	bl	800134c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2224      	movs	r2, #36	@ 0x24
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005242:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f973 	bl	8005530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005258:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695a      	ldr	r2, [r3, #20]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005268:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005278:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	@ 0x28
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d175      	bne.n	80053ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Transmit+0x2c>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e06e      	b.n	80053ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2221      	movs	r2, #33	@ 0x21
 80052da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052de:	f7fd f847 	bl	8002370 <HAL_GetTick>
 80052e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	88fa      	ldrh	r2, [r7, #6]
 80052e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	88fa      	ldrh	r2, [r7, #6]
 80052ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052f8:	d108      	bne.n	800530c <HAL_UART_Transmit+0x6c>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d104      	bne.n	800530c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	61bb      	str	r3, [r7, #24]
 800530a:	e003      	b.n	8005314 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005310:	2300      	movs	r3, #0
 8005312:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005314:	e02e      	b.n	8005374 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	2180      	movs	r1, #128	@ 0x80
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f848 	bl	80053b6 <UART_WaitOnFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e03a      	b.n	80053ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10b      	bne.n	8005356 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800534c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	3302      	adds	r3, #2
 8005352:	61bb      	str	r3, [r7, #24]
 8005354:	e007      	b.n	8005366 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	3301      	adds	r3, #1
 8005364:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800536a:	b29b      	uxth	r3, r3
 800536c:	3b01      	subs	r3, #1
 800536e:	b29a      	uxth	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1cb      	bne.n	8005316 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2200      	movs	r2, #0
 8005386:	2140      	movs	r1, #64	@ 0x40
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f814 	bl	80053b6 <UART_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e006      	b.n	80053ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	e000      	b.n	80053ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053ac:	2302      	movs	r3, #2
  }
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b086      	sub	sp, #24
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	60f8      	str	r0, [r7, #12]
 80053be:	60b9      	str	r1, [r7, #8]
 80053c0:	603b      	str	r3, [r7, #0]
 80053c2:	4613      	mov	r3, r2
 80053c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c6:	e03b      	b.n	8005440 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ce:	d037      	beq.n	8005440 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d0:	f7fc ffce 	bl	8002370 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	6a3a      	ldr	r2, [r7, #32]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e03a      	b.n	8005460 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f003 0304 	and.w	r3, r3, #4
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d023      	beq.n	8005440 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b80      	cmp	r3, #128	@ 0x80
 80053fc:	d020      	beq.n	8005440 <UART_WaitOnFlagUntilTimeout+0x8a>
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b40      	cmp	r3, #64	@ 0x40
 8005402:	d01d      	beq.n	8005440 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b08      	cmp	r3, #8
 8005410:	d116      	bne.n	8005440 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	617b      	str	r3, [r7, #20]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f81d 	bl	8005468 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2208      	movs	r2, #8
 8005432:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e00f      	b.n	8005460 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	4013      	ands	r3, r2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	bf0c      	ite	eq
 8005450:	2301      	moveq	r3, #1
 8005452:	2300      	movne	r3, #0
 8005454:	b2db      	uxtb	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	429a      	cmp	r2, r3
 800545c:	d0b4      	beq.n	80053c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005468:	b480      	push	{r7}
 800546a:	b095      	sub	sp, #84	@ 0x54
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547a:	e853 3f00 	ldrex	r3, [r3]
 800547e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005482:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005490:	643a      	str	r2, [r7, #64]	@ 0x40
 8005492:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005496:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800549e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e5      	bne.n	8005470 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f023 0301 	bic.w	r3, r3, #1
 80054ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3314      	adds	r3, #20
 80054c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80054c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e5      	bne.n	80054a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d119      	bne.n	8005514 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	330c      	adds	r3, #12
 80054e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	e853 3f00 	ldrex	r3, [r3]
 80054ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f023 0310 	bic.w	r3, r3, #16
 80054f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005500:	61ba      	str	r2, [r7, #24]
 8005502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005504:	6979      	ldr	r1, [r7, #20]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	e841 2300 	strex	r3, r2, [r1]
 800550c:	613b      	str	r3, [r7, #16]
   return(result);
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1e5      	bne.n	80054e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005522:	bf00      	nop
 8005524:	3754      	adds	r7, #84	@ 0x54
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005534:	b0c0      	sub	sp, #256	@ 0x100
 8005536:	af00      	add	r7, sp, #0
 8005538:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	68d9      	ldr	r1, [r3, #12]
 800554e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	ea40 0301 	orr.w	r3, r0, r1
 8005558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	431a      	orrs	r2, r3
 8005568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	431a      	orrs	r2, r3
 8005570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800557c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005588:	f021 010c 	bic.w	r1, r1, #12
 800558c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005596:	430b      	orrs	r3, r1
 8005598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800559a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055aa:	6999      	ldr	r1, [r3, #24]
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	ea40 0301 	orr.w	r3, r0, r1
 80055b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4b8f      	ldr	r3, [pc, #572]	@ (80057fc <UART_SetConfig+0x2cc>)
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d005      	beq.n	80055d0 <UART_SetConfig+0xa0>
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005800 <UART_SetConfig+0x2d0>)
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d104      	bne.n	80055da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055d0:	f7fe fb60 	bl	8003c94 <HAL_RCC_GetPCLK2Freq>
 80055d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80055d8:	e003      	b.n	80055e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055da:	f7fe fb47 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80055de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e6:	69db      	ldr	r3, [r3, #28]
 80055e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ec:	f040 810c 	bne.w	8005808 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	1891      	adds	r1, r2, r2
 8005608:	65b9      	str	r1, [r7, #88]	@ 0x58
 800560a:	415b      	adcs	r3, r3
 800560c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800560e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005612:	4621      	mov	r1, r4
 8005614:	eb12 0801 	adds.w	r8, r2, r1
 8005618:	4629      	mov	r1, r5
 800561a:	eb43 0901 	adc.w	r9, r3, r1
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800562a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800562e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005632:	4690      	mov	r8, r2
 8005634:	4699      	mov	r9, r3
 8005636:	4623      	mov	r3, r4
 8005638:	eb18 0303 	adds.w	r3, r8, r3
 800563c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005640:	462b      	mov	r3, r5
 8005642:	eb49 0303 	adc.w	r3, r9, r3
 8005646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005656:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800565a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800565e:	460b      	mov	r3, r1
 8005660:	18db      	adds	r3, r3, r3
 8005662:	653b      	str	r3, [r7, #80]	@ 0x50
 8005664:	4613      	mov	r3, r2
 8005666:	eb42 0303 	adc.w	r3, r2, r3
 800566a:	657b      	str	r3, [r7, #84]	@ 0x54
 800566c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005670:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005674:	f7fb f9e0 	bl	8000a38 <__aeabi_uldivmod>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	4b61      	ldr	r3, [pc, #388]	@ (8005804 <UART_SetConfig+0x2d4>)
 800567e:	fba3 2302 	umull	r2, r3, r3, r2
 8005682:	095b      	lsrs	r3, r3, #5
 8005684:	011c      	lsls	r4, r3, #4
 8005686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800568a:	2200      	movs	r2, #0
 800568c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005690:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005694:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005698:	4642      	mov	r2, r8
 800569a:	464b      	mov	r3, r9
 800569c:	1891      	adds	r1, r2, r2
 800569e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056a0:	415b      	adcs	r3, r3
 80056a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056a8:	4641      	mov	r1, r8
 80056aa:	eb12 0a01 	adds.w	sl, r2, r1
 80056ae:	4649      	mov	r1, r9
 80056b0:	eb43 0b01 	adc.w	fp, r3, r1
 80056b4:	f04f 0200 	mov.w	r2, #0
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056c8:	4692      	mov	sl, r2
 80056ca:	469b      	mov	fp, r3
 80056cc:	4643      	mov	r3, r8
 80056ce:	eb1a 0303 	adds.w	r3, sl, r3
 80056d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056d6:	464b      	mov	r3, r9
 80056d8:	eb4b 0303 	adc.w	r3, fp, r3
 80056dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056f4:	460b      	mov	r3, r1
 80056f6:	18db      	adds	r3, r3, r3
 80056f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056fa:	4613      	mov	r3, r2
 80056fc:	eb42 0303 	adc.w	r3, r2, r3
 8005700:	647b      	str	r3, [r7, #68]	@ 0x44
 8005702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005706:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800570a:	f7fb f995 	bl	8000a38 <__aeabi_uldivmod>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4611      	mov	r1, r2
 8005714:	4b3b      	ldr	r3, [pc, #236]	@ (8005804 <UART_SetConfig+0x2d4>)
 8005716:	fba3 2301 	umull	r2, r3, r3, r1
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	2264      	movs	r2, #100	@ 0x64
 800571e:	fb02 f303 	mul.w	r3, r2, r3
 8005722:	1acb      	subs	r3, r1, r3
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800572a:	4b36      	ldr	r3, [pc, #216]	@ (8005804 <UART_SetConfig+0x2d4>)
 800572c:	fba3 2302 	umull	r2, r3, r3, r2
 8005730:	095b      	lsrs	r3, r3, #5
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005738:	441c      	add	r4, r3
 800573a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800573e:	2200      	movs	r2, #0
 8005740:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005744:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005748:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800574c:	4642      	mov	r2, r8
 800574e:	464b      	mov	r3, r9
 8005750:	1891      	adds	r1, r2, r2
 8005752:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005754:	415b      	adcs	r3, r3
 8005756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800575c:	4641      	mov	r1, r8
 800575e:	1851      	adds	r1, r2, r1
 8005760:	6339      	str	r1, [r7, #48]	@ 0x30
 8005762:	4649      	mov	r1, r9
 8005764:	414b      	adcs	r3, r1
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005774:	4659      	mov	r1, fp
 8005776:	00cb      	lsls	r3, r1, #3
 8005778:	4651      	mov	r1, sl
 800577a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800577e:	4651      	mov	r1, sl
 8005780:	00ca      	lsls	r2, r1, #3
 8005782:	4610      	mov	r0, r2
 8005784:	4619      	mov	r1, r3
 8005786:	4603      	mov	r3, r0
 8005788:	4642      	mov	r2, r8
 800578a:	189b      	adds	r3, r3, r2
 800578c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005790:	464b      	mov	r3, r9
 8005792:	460a      	mov	r2, r1
 8005794:	eb42 0303 	adc.w	r3, r2, r3
 8005798:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80057ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80057b0:	460b      	mov	r3, r1
 80057b2:	18db      	adds	r3, r3, r3
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057b6:	4613      	mov	r3, r2
 80057b8:	eb42 0303 	adc.w	r3, r2, r3
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80057c6:	f7fb f937 	bl	8000a38 <__aeabi_uldivmod>
 80057ca:	4602      	mov	r2, r0
 80057cc:	460b      	mov	r3, r1
 80057ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005804 <UART_SetConfig+0x2d4>)
 80057d0:	fba3 1302 	umull	r1, r3, r3, r2
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	2164      	movs	r1, #100	@ 0x64
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	3332      	adds	r3, #50	@ 0x32
 80057e2:	4a08      	ldr	r2, [pc, #32]	@ (8005804 <UART_SetConfig+0x2d4>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	f003 0207 	and.w	r2, r3, #7
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4422      	add	r2, r4
 80057f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057f8:	e106      	b.n	8005a08 <UART_SetConfig+0x4d8>
 80057fa:	bf00      	nop
 80057fc:	40011000 	.word	0x40011000
 8005800:	40011400 	.word	0x40011400
 8005804:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580c:	2200      	movs	r2, #0
 800580e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005812:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800581a:	4642      	mov	r2, r8
 800581c:	464b      	mov	r3, r9
 800581e:	1891      	adds	r1, r2, r2
 8005820:	6239      	str	r1, [r7, #32]
 8005822:	415b      	adcs	r3, r3
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
 8005826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800582a:	4641      	mov	r1, r8
 800582c:	1854      	adds	r4, r2, r1
 800582e:	4649      	mov	r1, r9
 8005830:	eb43 0501 	adc.w	r5, r3, r1
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	00eb      	lsls	r3, r5, #3
 800583e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005842:	00e2      	lsls	r2, r4, #3
 8005844:	4614      	mov	r4, r2
 8005846:	461d      	mov	r5, r3
 8005848:	4643      	mov	r3, r8
 800584a:	18e3      	adds	r3, r4, r3
 800584c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005850:	464b      	mov	r3, r9
 8005852:	eb45 0303 	adc.w	r3, r5, r3
 8005856:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800585a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005866:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005876:	4629      	mov	r1, r5
 8005878:	008b      	lsls	r3, r1, #2
 800587a:	4621      	mov	r1, r4
 800587c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005880:	4621      	mov	r1, r4
 8005882:	008a      	lsls	r2, r1, #2
 8005884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005888:	f7fb f8d6 	bl	8000a38 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4b60      	ldr	r3, [pc, #384]	@ (8005a14 <UART_SetConfig+0x4e4>)
 8005892:	fba3 2302 	umull	r2, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	011c      	lsls	r4, r3, #4
 800589a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800589e:	2200      	movs	r2, #0
 80058a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80058ac:	4642      	mov	r2, r8
 80058ae:	464b      	mov	r3, r9
 80058b0:	1891      	adds	r1, r2, r2
 80058b2:	61b9      	str	r1, [r7, #24]
 80058b4:	415b      	adcs	r3, r3
 80058b6:	61fb      	str	r3, [r7, #28]
 80058b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058bc:	4641      	mov	r1, r8
 80058be:	1851      	adds	r1, r2, r1
 80058c0:	6139      	str	r1, [r7, #16]
 80058c2:	4649      	mov	r1, r9
 80058c4:	414b      	adcs	r3, r1
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058d4:	4659      	mov	r1, fp
 80058d6:	00cb      	lsls	r3, r1, #3
 80058d8:	4651      	mov	r1, sl
 80058da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058de:	4651      	mov	r1, sl
 80058e0:	00ca      	lsls	r2, r1, #3
 80058e2:	4610      	mov	r0, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	4603      	mov	r3, r0
 80058e8:	4642      	mov	r2, r8
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058f0:	464b      	mov	r3, r9
 80058f2:	460a      	mov	r2, r1
 80058f4:	eb42 0303 	adc.w	r3, r2, r3
 80058f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005906:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005914:	4649      	mov	r1, r9
 8005916:	008b      	lsls	r3, r1, #2
 8005918:	4641      	mov	r1, r8
 800591a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800591e:	4641      	mov	r1, r8
 8005920:	008a      	lsls	r2, r1, #2
 8005922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005926:	f7fb f887 	bl	8000a38 <__aeabi_uldivmod>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4611      	mov	r1, r2
 8005930:	4b38      	ldr	r3, [pc, #224]	@ (8005a14 <UART_SetConfig+0x4e4>)
 8005932:	fba3 2301 	umull	r2, r3, r3, r1
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	2264      	movs	r2, #100	@ 0x64
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	1acb      	subs	r3, r1, r3
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	3332      	adds	r3, #50	@ 0x32
 8005944:	4a33      	ldr	r2, [pc, #204]	@ (8005a14 <UART_SetConfig+0x4e4>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005950:	441c      	add	r4, r3
 8005952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005956:	2200      	movs	r2, #0
 8005958:	673b      	str	r3, [r7, #112]	@ 0x70
 800595a:	677a      	str	r2, [r7, #116]	@ 0x74
 800595c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005960:	4642      	mov	r2, r8
 8005962:	464b      	mov	r3, r9
 8005964:	1891      	adds	r1, r2, r2
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	415b      	adcs	r3, r3
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005970:	4641      	mov	r1, r8
 8005972:	1851      	adds	r1, r2, r1
 8005974:	6039      	str	r1, [r7, #0]
 8005976:	4649      	mov	r1, r9
 8005978:	414b      	adcs	r3, r1
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f04f 0300 	mov.w	r3, #0
 8005984:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005988:	4659      	mov	r1, fp
 800598a:	00cb      	lsls	r3, r1, #3
 800598c:	4651      	mov	r1, sl
 800598e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005992:	4651      	mov	r1, sl
 8005994:	00ca      	lsls	r2, r1, #3
 8005996:	4610      	mov	r0, r2
 8005998:	4619      	mov	r1, r3
 800599a:	4603      	mov	r3, r0
 800599c:	4642      	mov	r2, r8
 800599e:	189b      	adds	r3, r3, r2
 80059a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059a2:	464b      	mov	r3, r9
 80059a4:	460a      	mov	r2, r1
 80059a6:	eb42 0303 	adc.w	r3, r2, r3
 80059aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80059ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80059b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80059c4:	4649      	mov	r1, r9
 80059c6:	008b      	lsls	r3, r1, #2
 80059c8:	4641      	mov	r1, r8
 80059ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059ce:	4641      	mov	r1, r8
 80059d0:	008a      	lsls	r2, r1, #2
 80059d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80059d6:	f7fb f82f 	bl	8000a38 <__aeabi_uldivmod>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4b0d      	ldr	r3, [pc, #52]	@ (8005a14 <UART_SetConfig+0x4e4>)
 80059e0:	fba3 1302 	umull	r1, r3, r3, r2
 80059e4:	095b      	lsrs	r3, r3, #5
 80059e6:	2164      	movs	r1, #100	@ 0x64
 80059e8:	fb01 f303 	mul.w	r3, r1, r3
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	3332      	adds	r3, #50	@ 0x32
 80059f2:	4a08      	ldr	r2, [pc, #32]	@ (8005a14 <UART_SetConfig+0x4e4>)
 80059f4:	fba2 2303 	umull	r2, r3, r2, r3
 80059f8:	095b      	lsrs	r3, r3, #5
 80059fa:	f003 020f 	and.w	r2, r3, #15
 80059fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4422      	add	r2, r4
 8005a06:	609a      	str	r2, [r3, #8]
}
 8005a08:	bf00      	nop
 8005a0a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a14:	51eb851f 	.word	0x51eb851f

08005a18 <__itoa>:
 8005a18:	1e93      	subs	r3, r2, #2
 8005a1a:	2b22      	cmp	r3, #34	@ 0x22
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	460c      	mov	r4, r1
 8005a20:	d904      	bls.n	8005a2c <__itoa+0x14>
 8005a22:	2300      	movs	r3, #0
 8005a24:	700b      	strb	r3, [r1, #0]
 8005a26:	461c      	mov	r4, r3
 8005a28:	4620      	mov	r0, r4
 8005a2a:	bd10      	pop	{r4, pc}
 8005a2c:	2a0a      	cmp	r2, #10
 8005a2e:	d109      	bne.n	8005a44 <__itoa+0x2c>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	da07      	bge.n	8005a44 <__itoa+0x2c>
 8005a34:	232d      	movs	r3, #45	@ 0x2d
 8005a36:	700b      	strb	r3, [r1, #0]
 8005a38:	4240      	negs	r0, r0
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4421      	add	r1, r4
 8005a3e:	f000 f805 	bl	8005a4c <__utoa>
 8005a42:	e7f1      	b.n	8005a28 <__itoa+0x10>
 8005a44:	2100      	movs	r1, #0
 8005a46:	e7f9      	b.n	8005a3c <__itoa+0x24>

08005a48 <itoa>:
 8005a48:	f7ff bfe6 	b.w	8005a18 <__itoa>

08005a4c <__utoa>:
 8005a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4e:	4c1f      	ldr	r4, [pc, #124]	@ (8005acc <__utoa+0x80>)
 8005a50:	b08b      	sub	sp, #44	@ 0x2c
 8005a52:	4605      	mov	r5, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	466e      	mov	r6, sp
 8005a58:	f104 0c20 	add.w	ip, r4, #32
 8005a5c:	6820      	ldr	r0, [r4, #0]
 8005a5e:	6861      	ldr	r1, [r4, #4]
 8005a60:	4637      	mov	r7, r6
 8005a62:	c703      	stmia	r7!, {r0, r1}
 8005a64:	3408      	adds	r4, #8
 8005a66:	4564      	cmp	r4, ip
 8005a68:	463e      	mov	r6, r7
 8005a6a:	d1f7      	bne.n	8005a5c <__utoa+0x10>
 8005a6c:	7921      	ldrb	r1, [r4, #4]
 8005a6e:	7139      	strb	r1, [r7, #4]
 8005a70:	1e91      	subs	r1, r2, #2
 8005a72:	6820      	ldr	r0, [r4, #0]
 8005a74:	6038      	str	r0, [r7, #0]
 8005a76:	2922      	cmp	r1, #34	@ 0x22
 8005a78:	f04f 0100 	mov.w	r1, #0
 8005a7c:	d904      	bls.n	8005a88 <__utoa+0x3c>
 8005a7e:	7019      	strb	r1, [r3, #0]
 8005a80:	460b      	mov	r3, r1
 8005a82:	4618      	mov	r0, r3
 8005a84:	b00b      	add	sp, #44	@ 0x2c
 8005a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a88:	1e58      	subs	r0, r3, #1
 8005a8a:	4684      	mov	ip, r0
 8005a8c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005a90:	fb02 5617 	mls	r6, r2, r7, r5
 8005a94:	3628      	adds	r6, #40	@ 0x28
 8005a96:	446e      	add	r6, sp
 8005a98:	460c      	mov	r4, r1
 8005a9a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005a9e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005aa2:	462e      	mov	r6, r5
 8005aa4:	42b2      	cmp	r2, r6
 8005aa6:	f101 0101 	add.w	r1, r1, #1
 8005aaa:	463d      	mov	r5, r7
 8005aac:	d9ee      	bls.n	8005a8c <__utoa+0x40>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	545a      	strb	r2, [r3, r1]
 8005ab2:	1919      	adds	r1, r3, r4
 8005ab4:	1aa5      	subs	r5, r4, r2
 8005ab6:	42aa      	cmp	r2, r5
 8005ab8:	dae3      	bge.n	8005a82 <__utoa+0x36>
 8005aba:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005abe:	780e      	ldrb	r6, [r1, #0]
 8005ac0:	7006      	strb	r6, [r0, #0]
 8005ac2:	3201      	adds	r2, #1
 8005ac4:	f801 5901 	strb.w	r5, [r1], #-1
 8005ac8:	e7f4      	b.n	8005ab4 <__utoa+0x68>
 8005aca:	bf00      	nop
 8005acc:	08005c52 	.word	0x08005c52

08005ad0 <memset>:
 8005ad0:	4402      	add	r2, r0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d100      	bne.n	8005ada <memset+0xa>
 8005ad8:	4770      	bx	lr
 8005ada:	f803 1b01 	strb.w	r1, [r3], #1
 8005ade:	e7f9      	b.n	8005ad4 <memset+0x4>

08005ae0 <strcat>:
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	7814      	ldrb	r4, [r2, #0]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	3201      	adds	r2, #1
 8005aea:	2c00      	cmp	r4, #0
 8005aec:	d1fa      	bne.n	8005ae4 <strcat+0x4>
 8005aee:	3b01      	subs	r3, #1
 8005af0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005af4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005af8:	2a00      	cmp	r2, #0
 8005afa:	d1f9      	bne.n	8005af0 <strcat+0x10>
 8005afc:	bd10      	pop	{r4, pc}
	...

08005b00 <__libc_init_array>:
 8005b00:	b570      	push	{r4, r5, r6, lr}
 8005b02:	4d0d      	ldr	r5, [pc, #52]	@ (8005b38 <__libc_init_array+0x38>)
 8005b04:	4c0d      	ldr	r4, [pc, #52]	@ (8005b3c <__libc_init_array+0x3c>)
 8005b06:	1b64      	subs	r4, r4, r5
 8005b08:	10a4      	asrs	r4, r4, #2
 8005b0a:	2600      	movs	r6, #0
 8005b0c:	42a6      	cmp	r6, r4
 8005b0e:	d109      	bne.n	8005b24 <__libc_init_array+0x24>
 8005b10:	4d0b      	ldr	r5, [pc, #44]	@ (8005b40 <__libc_init_array+0x40>)
 8005b12:	4c0c      	ldr	r4, [pc, #48]	@ (8005b44 <__libc_init_array+0x44>)
 8005b14:	f000 f818 	bl	8005b48 <_init>
 8005b18:	1b64      	subs	r4, r4, r5
 8005b1a:	10a4      	asrs	r4, r4, #2
 8005b1c:	2600      	movs	r6, #0
 8005b1e:	42a6      	cmp	r6, r4
 8005b20:	d105      	bne.n	8005b2e <__libc_init_array+0x2e>
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b28:	4798      	blx	r3
 8005b2a:	3601      	adds	r6, #1
 8005b2c:	e7ee      	b.n	8005b0c <__libc_init_array+0xc>
 8005b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b32:	4798      	blx	r3
 8005b34:	3601      	adds	r6, #1
 8005b36:	e7f2      	b.n	8005b1e <__libc_init_array+0x1e>
 8005b38:	08005c80 	.word	0x08005c80
 8005b3c:	08005c80 	.word	0x08005c80
 8005b40:	08005c80 	.word	0x08005c80
 8005b44:	08005c84 	.word	0x08005c84

08005b48 <_init>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr

08005b54 <_fini>:
 8005b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b56:	bf00      	nop
 8005b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b5a:	bc08      	pop	{r3}
 8005b5c:	469e      	mov	lr, r3
 8005b5e:	4770      	bx	lr
