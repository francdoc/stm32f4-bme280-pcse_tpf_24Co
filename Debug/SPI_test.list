
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006578  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08006724  08006724  00007724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d4  080068d4  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  080068d4  080068d4  000078d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068dc  080068dc  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068dc  080068dc  000078dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068e0  080068e0  000078e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080068e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008018  2**0
                  CONTENTS
 10 .bss          0000066c  20000018  20000018  00008018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000684  20000684  00008018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014e0d  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e40  00000000  00000000  0001ce55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  0001fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db5  00000000  00000000  00020e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002747b  00000000  00000000  00021bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016cbe  00000000  00000000  00049070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5c98  00000000  00000000  0005fd2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001459c6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bdc  00000000  00000000  00145a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0014a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800670c 	.word	0x0800670c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	0800670c 	.word	0x0800670c

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	@ 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_uldivmod>:
 8000a38:	b953      	cbnz	r3, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3a:	b94a      	cbnz	r2, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	bf08      	it	eq
 8000a40:	2800      	cmpeq	r0, #0
 8000a42:	bf1c      	itt	ne
 8000a44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a4c:	f000 b96a 	b.w	8000d24 <__aeabi_idiv0>
 8000a50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a58:	f000 f806 	bl	8000a68 <__udivmoddi4>
 8000a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a64:	b004      	add	sp, #16
 8000a66:	4770      	bx	lr

08000a68 <__udivmoddi4>:
 8000a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a6c:	9d08      	ldr	r5, [sp, #32]
 8000a6e:	460c      	mov	r4, r1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d14e      	bne.n	8000b12 <__udivmoddi4+0xaa>
 8000a74:	4694      	mov	ip, r2
 8000a76:	458c      	cmp	ip, r1
 8000a78:	4686      	mov	lr, r0
 8000a7a:	fab2 f282 	clz	r2, r2
 8000a7e:	d962      	bls.n	8000b46 <__udivmoddi4+0xde>
 8000a80:	b14a      	cbz	r2, 8000a96 <__udivmoddi4+0x2e>
 8000a82:	f1c2 0320 	rsb	r3, r2, #32
 8000a86:	4091      	lsls	r1, r2
 8000a88:	fa20 f303 	lsr.w	r3, r0, r3
 8000a8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a90:	4319      	orrs	r1, r3
 8000a92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9a:	fa1f f68c 	uxth.w	r6, ip
 8000a9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aa2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aa6:	fb07 1114 	mls	r1, r7, r4, r1
 8000aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aae:	fb04 f106 	mul.w	r1, r4, r6
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x64>
 8000ab6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000abe:	f080 8112 	bcs.w	8000ce6 <__udivmoddi4+0x27e>
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	f240 810f 	bls.w	8000ce6 <__udivmoddi4+0x27e>
 8000ac8:	3c02      	subs	r4, #2
 8000aca:	4463      	add	r3, ip
 8000acc:	1a59      	subs	r1, r3, r1
 8000ace:	fa1f f38e 	uxth.w	r3, lr
 8000ad2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad6:	fb07 1110 	mls	r1, r7, r0, r1
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f606 	mul.w	r6, r0, r6
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	d90a      	bls.n	8000afc <__udivmoddi4+0x94>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aee:	f080 80fc 	bcs.w	8000cea <__udivmoddi4+0x282>
 8000af2:	429e      	cmp	r6, r3
 8000af4:	f240 80f9 	bls.w	8000cea <__udivmoddi4+0x282>
 8000af8:	4463      	add	r3, ip
 8000afa:	3802      	subs	r0, #2
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b02:	2100      	movs	r1, #0
 8000b04:	b11d      	cbz	r5, 8000b0e <__udivmoddi4+0xa6>
 8000b06:	40d3      	lsrs	r3, r2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d905      	bls.n	8000b22 <__udivmoddi4+0xba>
 8000b16:	b10d      	cbz	r5, 8000b1c <__udivmoddi4+0xb4>
 8000b18:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4608      	mov	r0, r1
 8000b20:	e7f5      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000b22:	fab3 f183 	clz	r1, r3
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d146      	bne.n	8000bb8 <__udivmoddi4+0x150>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d302      	bcc.n	8000b34 <__udivmoddi4+0xcc>
 8000b2e:	4290      	cmp	r0, r2
 8000b30:	f0c0 80f0 	bcc.w	8000d14 <__udivmoddi4+0x2ac>
 8000b34:	1a86      	subs	r6, r0, r2
 8000b36:	eb64 0303 	sbc.w	r3, r4, r3
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d0e6      	beq.n	8000b0e <__udivmoddi4+0xa6>
 8000b40:	e9c5 6300 	strd	r6, r3, [r5]
 8000b44:	e7e3      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x204>
 8000b4c:	eba1 040c 	sub.w	r4, r1, ip
 8000b50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b54:	fa1f f78c 	uxth.w	r7, ip
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b62:	fb08 4416 	mls	r4, r8, r6, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb07 f006 	mul.w	r0, r7, r6
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x11c>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x11a>
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	f200 80cd 	bhi.w	8000d1c <__udivmoddi4+0x2b4>
 8000b82:	4626      	mov	r6, r4
 8000b84:	1a1c      	subs	r4, r3, r0
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b96:	fb00 f707 	mul.w	r7, r0, r7
 8000b9a:	429f      	cmp	r7, r3
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x148>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x146>
 8000ba8:	429f      	cmp	r7, r3
 8000baa:	f200 80b0 	bhi.w	8000d0e <__udivmoddi4+0x2a6>
 8000bae:	4620      	mov	r0, r4
 8000bb0:	1bdb      	subs	r3, r3, r7
 8000bb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb6:	e7a5      	b.n	8000b04 <__udivmoddi4+0x9c>
 8000bb8:	f1c1 0620 	rsb	r6, r1, #32
 8000bbc:	408b      	lsls	r3, r1
 8000bbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000bc2:	431f      	orrs	r7, r3
 8000bc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000bcc:	ea43 030c 	orr.w	r3, r3, ip
 8000bd0:	40f4      	lsrs	r4, r6
 8000bd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000bd6:	0c38      	lsrs	r0, r7, #16
 8000bd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bdc:	fbb4 fef0 	udiv	lr, r4, r0
 8000be0:	fa1f fc87 	uxth.w	ip, r7
 8000be4:	fb00 441e 	mls	r4, r0, lr, r4
 8000be8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bec:	fb0e f90c 	mul.w	r9, lr, ip
 8000bf0:	45a1      	cmp	r9, r4
 8000bf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x1a6>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bfe:	f080 8084 	bcs.w	8000d0a <__udivmoddi4+0x2a2>
 8000c02:	45a1      	cmp	r9, r4
 8000c04:	f240 8081 	bls.w	8000d0a <__udivmoddi4+0x2a2>
 8000c08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	eba4 0409 	sub.w	r4, r4, r9
 8000c12:	fa1f f983 	uxth.w	r9, r3
 8000c16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x1d2>
 8000c2a:	193c      	adds	r4, r7, r4
 8000c2c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c30:	d267      	bcs.n	8000d02 <__udivmoddi4+0x29a>
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d965      	bls.n	8000d02 <__udivmoddi4+0x29a>
 8000c36:	3b02      	subs	r3, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c42:	eba4 040c 	sub.w	r4, r4, ip
 8000c46:	429c      	cmp	r4, r3
 8000c48:	46ce      	mov	lr, r9
 8000c4a:	469c      	mov	ip, r3
 8000c4c:	d351      	bcc.n	8000cf2 <__udivmoddi4+0x28a>
 8000c4e:	d04e      	beq.n	8000cee <__udivmoddi4+0x286>
 8000c50:	b155      	cbz	r5, 8000c68 <__udivmoddi4+0x200>
 8000c52:	ebb8 030e 	subs.w	r3, r8, lr
 8000c56:	eb64 040c 	sbc.w	r4, r4, ip
 8000c5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431e      	orrs	r6, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	e9c5 6400 	strd	r6, r4, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e750      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f103 	lsr.w	r1, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	fa24 f303 	lsr.w	r3, r4, r3
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	430c      	orrs	r4, r1
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3110 	mls	r1, r8, r0, r3
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f107 	mul.w	r1, r0, r7
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x24c>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000caa:	d22c      	bcs.n	8000d06 <__udivmoddi4+0x29e>
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d92a      	bls.n	8000d06 <__udivmoddi4+0x29e>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cbc:	fb08 3311 	mls	r3, r8, r1, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb01 f307 	mul.w	r3, r1, r7
 8000cc8:	42a3      	cmp	r3, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x276>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cd4:	d213      	bcs.n	8000cfe <__udivmoddi4+0x296>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d911      	bls.n	8000cfe <__udivmoddi4+0x296>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4464      	add	r4, ip
 8000cde:	1ae4      	subs	r4, r4, r3
 8000ce0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ce4:	e739      	b.n	8000b5a <__udivmoddi4+0xf2>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	e6f0      	b.n	8000acc <__udivmoddi4+0x64>
 8000cea:	4608      	mov	r0, r1
 8000cec:	e706      	b.n	8000afc <__udivmoddi4+0x94>
 8000cee:	45c8      	cmp	r8, r9
 8000cf0:	d2ae      	bcs.n	8000c50 <__udivmoddi4+0x1e8>
 8000cf2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cf6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7a8      	b.n	8000c50 <__udivmoddi4+0x1e8>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	e7ed      	b.n	8000cde <__udivmoddi4+0x276>
 8000d02:	4603      	mov	r3, r0
 8000d04:	e799      	b.n	8000c3a <__udivmoddi4+0x1d2>
 8000d06:	4630      	mov	r0, r6
 8000d08:	e7d4      	b.n	8000cb4 <__udivmoddi4+0x24c>
 8000d0a:	46d6      	mov	lr, sl
 8000d0c:	e77f      	b.n	8000c0e <__udivmoddi4+0x1a6>
 8000d0e:	4463      	add	r3, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e74d      	b.n	8000bb0 <__udivmoddi4+0x148>
 8000d14:	4606      	mov	r6, r0
 8000d16:	4623      	mov	r3, r4
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e70f      	b.n	8000b3c <__udivmoddi4+0xd4>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	e730      	b.n	8000b84 <__udivmoddi4+0x11c>
 8000d22:	bf00      	nop

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:

#define MAX_BUFFER 50 // Example buffer size
uint8_t uartBuffer[MAX_BUFFER];

int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f001 fc8b 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f877 	bl	8000e24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_USB_OTG_FS_PCD_Init();
 8000d36:	f000 fa91 	bl	800125c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000d3a:	f000 f8df 	bl	8000efc <MX_I2C1_Init>
  MX_RTC_Init();
 8000d3e:	f000 fa35 	bl	80011ac <MX_RTC_Init>

  uartInit();
 8000d42:	f001 fba1 	bl	8002488 <uartInit>

  // Init GPIO & SPI
  MX_GPIO_Init();
 8000d46:	f000 f983 	bl	8001050 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d4a:	f000 f94b 	bl	8000fe4 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
 8000d4e:	2000      	movs	r0, #0
 8000d50:	f001 fbf6 	bl	8002540 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f001 fbf3 	bl	8002540 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f001 fbf0 	bl	8002540 <BSP_LED_Init>

#ifdef BME280
  BME280_init();
 8000d60:	f000 fe04 	bl	800196c <BME280_init>
#endif

  // First SPI try before main loop
  TEST_SPI();
 8000d64:	f001 fa26 	bl	80021b4 <TEST_SPI>

#ifdef LCD
  Init_Lcd();
 8000d68:	f001 fa6c 	bl	8002244 <Init_Lcd>
#endif

  for (int i = 0; i <= 3; i++)
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	e008      	b.n	8000d84 <main+0x5c>
  {
    BSP_LED_Toggle(LED1); // Init LCD OK
 8000d72:	2000      	movs	r0, #0
 8000d74:	f001 fc4e 	bl	8002614 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000d78:	2064      	movs	r0, #100	@ 0x64
 8000d7a:	f001 fcd7 	bl	800272c <HAL_Delay>
  for (int i = 0; i <= 3; i++)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3301      	adds	r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b03      	cmp	r3, #3
 8000d88:	ddf3      	ble.n	8000d72 <main+0x4a>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    TEST_SPI();
 8000d8a:	f001 fa13 	bl	80021b4 <TEST_SPI>

#ifdef LCD
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4920      	ldr	r1, [pc, #128]	@ (8000e14 <main+0xec>)
 8000d92:	4821      	ldr	r0, [pc, #132]	@ (8000e18 <main+0xf0>)
 8000d94:	f003 fd51 	bl	800483a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4920      	ldr	r1, [pc, #128]	@ (8000e1c <main+0xf4>)
 8000d9c:	481e      	ldr	r0, [pc, #120]	@ (8000e18 <main+0xf0>)
 8000d9e:	f003 fe2e 	bl	80049fe <HAL_RTC_GetDate>

    PosCaracHLcd(0);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f001 fb35 	bl	8002412 <PosCaracHLcd>
    SacaTextoLcd((uint8_t *)"TIME:");
 8000da8:	481d      	ldr	r0, [pc, #116]	@ (8000e20 <main+0xf8>)
 8000daa:	f001 fb1d 	bl	80023e8 <SacaTextoLcd>
    DatoBCD(sTime.Hours);
 8000dae:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <main+0xec>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fac1 	bl	800233a <DatoBCD>
    DatoLcd(':');
 8000db8:	203a      	movs	r0, #58	@ 0x3a
 8000dba:	f001 faa0 	bl	80022fe <DatoLcd>
    DatoBCD(sTime.Minutes);
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <main+0xec>)
 8000dc0:	785b      	ldrb	r3, [r3, #1]
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fab9 	bl	800233a <DatoBCD>
    DatoLcd(':');
 8000dc8:	203a      	movs	r0, #58	@ 0x3a
 8000dca:	f001 fa98 	bl	80022fe <DatoLcd>
    DatoBCD(sTime.Seconds);
 8000dce:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <main+0xec>)
 8000dd0:	789b      	ldrb	r3, [r3, #2]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f001 fab1 	bl	800233a <DatoBCD>

    PosCaracLLcd(0);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f001 fb2a 	bl	8002432 <PosCaracLLcd>
    DatoBCD(sDate.Date);
 8000dde:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <main+0xf4>)
 8000de0:	789b      	ldrb	r3, [r3, #2]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 faa9 	bl	800233a <DatoBCD>
    DatoLcd('/');
 8000de8:	202f      	movs	r0, #47	@ 0x2f
 8000dea:	f001 fa88 	bl	80022fe <DatoLcd>
    DatoBCD(sDate.Month);
 8000dee:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <main+0xf4>)
 8000df0:	785b      	ldrb	r3, [r3, #1]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f001 faa1 	bl	800233a <DatoBCD>
    DatoLcd('/');
 8000df8:	202f      	movs	r0, #47	@ 0x2f
 8000dfa:	f001 fa80 	bl	80022fe <DatoLcd>
    DatoBCD(sDate.Year);
 8000dfe:	4b07      	ldr	r3, [pc, #28]	@ (8000e1c <main+0xf4>)
 8000e00:	78db      	ldrb	r3, [r3, #3]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fa99 	bl	800233a <DatoBCD>

    BSP_LED_Toggle(LED1); // Looping signal
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f001 fc03 	bl	8002614 <BSP_LED_Toggle>
    TEST_SPI();
 8000e0e:	bf00      	nop
 8000e10:	e7bb      	b.n	8000d8a <main+0x62>
 8000e12:	bf00      	nop
 8000e14:	20000034 	.word	0x20000034
 8000e18:	200000f8 	.word	0x200000f8
 8000e1c:	20000048 	.word	0x20000048
 8000e20:	08006724 	.word	0x08006724

08000e24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b094      	sub	sp, #80	@ 0x50
 8000e28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	2230      	movs	r2, #48	@ 0x30
 8000e30:	2100      	movs	r1, #0
 8000e32:	4618      	mov	r0, r3
 8000e34:	f005 fc2e 	bl	8006694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <SystemClock_Config+0xd0>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <SystemClock_Config+0xd0>)
 8000e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e58:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <SystemClock_Config+0xd0>)
 8000e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e64:	2300      	movs	r3, #0
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <SystemClock_Config+0xd4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a22      	ldr	r2, [pc, #136]	@ (8000ef8 <SystemClock_Config+0xd4>)
 8000e6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <SystemClock_Config+0xd4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000e80:	2309      	movs	r3, #9
 8000e82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e84:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e92:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e98:	2304      	movs	r3, #4
 8000e9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e9c:	23a8      	movs	r3, #168	@ 0xa8
 8000e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ea8:	f107 0320 	add.w	r3, r7, #32
 8000eac:	4618      	mov	r0, r3
 8000eae:	f002 fd4f 	bl	8003950 <HAL_RCC_OscConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000eb8:	f000 f9fe 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ec8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ecc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ed2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2105      	movs	r1, #5
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 ffb0 	bl	8003e40 <HAL_RCC_ClockConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ee6:	f000 f9e7 	bl	80012b8 <Error_Handler>
  }
}
 8000eea:	bf00      	nop
 8000eec:	3750      	adds	r7, #80	@ 0x50
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40007000 	.word	0x40007000

08000efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f02:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f04:	4a33      	ldr	r2, [pc, #204]	@ (8000fd4 <MX_I2C1_Init+0xd8>)
 8000f06:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f08:	4b31      	ldr	r3, [pc, #196]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f0a:	4a33      	ldr	r2, [pc, #204]	@ (8000fd8 <MX_I2C1_Init+0xdc>)
 8000f0c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f0e:	4b30      	ldr	r3, [pc, #192]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f14:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f1c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f28:	4b29      	ldr	r3, [pc, #164]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	4b28      	ldr	r3, [pc, #160]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]

  // I2C init code
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <MX_I2C1_Init+0xe0>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a26      	ldr	r2, [pc, #152]	@ (8000fdc <MX_I2C1_Init+0xe0>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <MX_I2C1_Init+0xe0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5c:	2312      	movs	r3, #18
 8000f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	4619      	mov	r1, r3
 8000f72:	481b      	ldr	r0, [pc, #108]	@ (8000fe0 <MX_I2C1_Init+0xe4>)
 8000f74:	f001 fce4 	bl	8002940 <HAL_GPIO_Init>

	 /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <MX_I2C1_Init+0xe0>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	4a16      	ldr	r2, [pc, #88]	@ (8000fdc <MX_I2C1_Init+0xe0>)
 8000f82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <MX_I2C1_Init+0xe0>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f94:	480e      	ldr	r0, [pc, #56]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000f96:	f001 feb3 	bl	8002d00 <HAL_I2C_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C1_Init+0xa8>
  {
    Error_Handler();
 8000fa0:	f000 f98a 	bl	80012b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	480a      	ldr	r0, [pc, #40]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000fa8:	f002 fb47 	bl	800363a <HAL_I2CEx_ConfigAnalogFilter>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C1_Init+0xba>
  {
    Error_Handler();
 8000fb2:	f000 f981 	bl	80012b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_I2C1_Init+0xd4>)
 8000fba:	f002 fb7a 	bl	80036b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C1_Init+0xcc>
  {
    Error_Handler();
 8000fc4:	f000 f978 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2000004c 	.word	0x2000004c
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	000186a0 	.word	0x000186a0
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020400 	.word	0x40020400

08000fe4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_SPI1_Init+0x64>)
 8000fea:	4a18      	ldr	r2, [pc, #96]	@ (800104c <MX_SPI1_Init+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_SPI1_Init+0x64>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001014:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001018:	2238      	movs	r2, #56	@ 0x38
 800101a:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001030:	220a      	movs	r2, #10
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001036:	f003 fdef 	bl	8004c18 <HAL_SPI_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_SPI1_Init+0x60>
    {
        BME280_Error_Handler();
 8001040:	f000 fb4f 	bl	80016e2 <BME280_Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	200000a0 	.word	0x200000a0
 800104c:	40013000 	.word	0x40013000

08001050 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	@ 0x30
 8001054:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	4b4c      	ldr	r3, [pc, #304]	@ (800119c <MX_GPIO_Init+0x14c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a4b      	ldr	r2, [pc, #300]	@ (800119c <MX_GPIO_Init+0x14c>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b49      	ldr	r3, [pc, #292]	@ (800119c <MX_GPIO_Init+0x14c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	4b45      	ldr	r3, [pc, #276]	@ (800119c <MX_GPIO_Init+0x14c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a44      	ldr	r2, [pc, #272]	@ (800119c <MX_GPIO_Init+0x14c>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b42      	ldr	r3, [pc, #264]	@ (800119c <MX_GPIO_Init+0x14c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b3e      	ldr	r3, [pc, #248]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a3d      	ldr	r2, [pc, #244]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b3b      	ldr	r3, [pc, #236]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b37      	ldr	r3, [pc, #220]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a36      	ldr	r2, [pc, #216]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b34      	ldr	r3, [pc, #208]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b30      	ldr	r3, [pc, #192]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a2f      	ldr	r2, [pc, #188]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b29      	ldr	r3, [pc, #164]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a28      	ldr	r2, [pc, #160]	@ (800119c <MX_GPIO_Init+0x14c>)
 80010fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b26      	ldr	r3, [pc, #152]	@ (800119c <MX_GPIO_Init+0x14c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	f244 0189 	movw	r1, #16521	@ 0x4089
 8001114:	4822      	ldr	r0, [pc, #136]	@ (80011a0 <MX_GPIO_Init+0x150>)
 8001116:	f001 fdbf 	bl	8002c98 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2140      	movs	r1, #64	@ 0x40
 800111e:	4821      	ldr	r0, [pc, #132]	@ (80011a4 <MX_GPIO_Init+0x154>)
 8001120:	f001 fdba 	bl	8002c98 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001124:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800112a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800112e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 031c 	add.w	r3, r7, #28
 8001138:	4619      	mov	r1, r3
 800113a:	481b      	ldr	r0, [pc, #108]	@ (80011a8 <MX_GPIO_Init+0x158>)
 800113c:	f001 fc00 	bl	8002940 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin CS_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin;
 8001140:	f244 0389 	movw	r3, #16521	@ 0x4089
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 031c 	add.w	r3, r7, #28
 8001156:	4619      	mov	r1, r3
 8001158:	4811      	ldr	r0, [pc, #68]	@ (80011a0 <MX_GPIO_Init+0x150>)
 800115a:	f001 fbf1 	bl	8002940 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800115e:	2340      	movs	r3, #64	@ 0x40
 8001160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001162:	2301      	movs	r3, #1
 8001164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 031c 	add.w	r3, r7, #28
 8001172:	4619      	mov	r1, r3
 8001174:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <MX_GPIO_Init+0x154>)
 8001176:	f001 fbe3 	bl	8002940 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_GPIO_Init+0x154>)
 800118e:	f001 fbd7 	bl	8002940 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001192:	bf00      	nop
 8001194:	3730      	adds	r7, #48	@ 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020400 	.word	0x40020400
 80011a4:	40021800 	.word	0x40021800
 80011a8:	40020800 	.word	0x40020800

080011ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011b0:	4b26      	ldr	r3, [pc, #152]	@ (800124c <MX_RTC_Init+0xa0>)
 80011b2:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <MX_RTC_Init+0xa4>)
 80011b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011b6:	4b25      	ldr	r3, [pc, #148]	@ (800124c <MX_RTC_Init+0xa0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011bc:	4b23      	ldr	r3, [pc, #140]	@ (800124c <MX_RTC_Init+0xa0>)
 80011be:	227f      	movs	r2, #127	@ 0x7f
 80011c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011c2:	4b22      	ldr	r3, [pc, #136]	@ (800124c <MX_RTC_Init+0xa0>)
 80011c4:	22ff      	movs	r2, #255	@ 0xff
 80011c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011c8:	4b20      	ldr	r3, [pc, #128]	@ (800124c <MX_RTC_Init+0xa0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011ce:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <MX_RTC_Init+0xa0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	@ (800124c <MX_RTC_Init+0xa0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011da:	481c      	ldr	r0, [pc, #112]	@ (800124c <MX_RTC_Init+0xa0>)
 80011dc:	f003 fa10 	bl	8004600 <HAL_RTC_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80011e6:	f000 f867 	bl	80012b8 <Error_Handler>
  // Important RTC init code.
  /*
   * * Initialize RTC and set the Time and Date
  */

  sTime.Hours = 0x01;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_RTC_Init+0xa8>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x20;
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <MX_RTC_Init+0xa8>)
 80011f2:	2220      	movs	r2, #32
 80011f4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x00;
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_RTC_Init+0xa8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <MX_RTC_Init+0xa8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <MX_RTC_Init+0xa8>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001208:	2201      	movs	r2, #1
 800120a:	4912      	ldr	r1, [pc, #72]	@ (8001254 <MX_RTC_Init+0xa8>)
 800120c:	480f      	ldr	r0, [pc, #60]	@ (800124c <MX_RTC_Init+0xa0>)
 800120e:	f003 fa7a 	bl	8004706 <HAL_RTC_SetTime>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_RTC_Init+0x70>
  {
    Error_Handler();
 8001218:	f000 f84e 	bl	80012b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <MX_RTC_Init+0xac>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <MX_RTC_Init+0xac>)
 8001224:	2208      	movs	r2, #8
 8001226:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x05;
 8001228:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <MX_RTC_Init+0xac>)
 800122a:	2205      	movs	r2, #5
 800122c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <MX_RTC_Init+0xac>)
 8001230:	2224      	movs	r2, #36	@ 0x24
 8001232:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001234:	2201      	movs	r2, #1
 8001236:	4908      	ldr	r1, [pc, #32]	@ (8001258 <MX_RTC_Init+0xac>)
 8001238:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_RTC_Init+0xa0>)
 800123a:	f003 fb5c 	bl	80048f6 <HAL_RTC_SetDate>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_RTC_Init+0x9c>
  {
    Error_Handler();
 8001244:	f000 f838 	bl	80012b8 <Error_Handler>
  }

  /* USER CODE END RTC_Init 2 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	200000f8 	.word	0x200000f8
 8001250:	40002800 	.word	0x40002800
 8001254:	20000034 	.word	0x20000034
 8001258:	20000048 	.word	0x20000048

0800125c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001260:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001262:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126a:	2204      	movs	r2, #4
 800126c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001270:	2202      	movs	r2, #2
 8001272:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127c:	2202      	movs	r2, #2
 800127e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001282:	2201      	movs	r2, #1
 8001284:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001288:	2200      	movs	r2, #0
 800128a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800128e:	2200      	movs	r2, #0
 8001290:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001292:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001294:	2201      	movs	r2, #1
 8001296:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001298:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	@ (80012b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012a0:	f002 fa46 	bl	8003730 <HAL_PCD_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80012aa:	f000 f805 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000118 	.word	0x20000118

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <Error_Handler+0x8>

080012c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_MspInit+0x4c>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <HAL_MspInit+0x4c>)
 80012d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_MspInit+0x4c>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <HAL_MspInit+0x4c>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <HAL_MspInit+0x4c>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <HAL_MspInit+0x4c>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	@ 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	@ (8001398 <HAL_I2C_MspInit+0x84>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12c      	bne.n	8001390 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	@ (800139c <HAL_I2C_MspInit+0x88>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001352:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001358:	2312      	movs	r3, #18
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001364:	2304      	movs	r3, #4
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <HAL_I2C_MspInit+0x8c>)
 8001370:	f001 fae6 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b08      	ldr	r3, [pc, #32]	@ (800139c <HAL_I2C_MspInit+0x88>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137c:	4a07      	ldr	r2, [pc, #28]	@ (800139c <HAL_I2C_MspInit+0x88>)
 800137e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001382:	6413      	str	r3, [r2, #64]	@ 0x40
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <HAL_I2C_MspInit+0x88>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40005400 	.word	0x40005400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	@ 0x38
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	2230      	movs	r2, #48	@ 0x30
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 f96d 	bl	8006694 <memset>
  if(hrtc->Instance==RTC)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0c      	ldr	r2, [pc, #48]	@ (80013f0 <HAL_RTC_MspInit+0x4c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d111      	bne.n	80013e8 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013c4:	2320      	movs	r3, #32
 80013c6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013cc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 ff54 	bl	8004280 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80013de:	f7ff ff6b 	bl	80012b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013e2:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <HAL_RTC_MspInit+0x50>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3738      	adds	r7, #56	@ 0x38
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40002800 	.word	0x40002800
 80013f4:	42470e3c 	.word	0x42470e3c

080013f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08a      	sub	sp, #40	@ 0x28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a28      	ldr	r2, [pc, #160]	@ (80014b8 <HAL_SPI_MspInit+0xc0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d149      	bne.n	80014ae <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001422:	4a26      	ldr	r2, [pc, #152]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 8001424:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001428:	6453      	str	r3, [r2, #68]	@ 0x44
 800142a:	4b24      	ldr	r3, [pc, #144]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001432:	613b      	str	r3, [r7, #16]
 8001434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a1f      	ldr	r2, [pc, #124]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a18      	ldr	r2, [pc, #96]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_SPI_MspInit+0xc4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800146e:	2360      	movs	r3, #96	@ 0x60
 8001470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147e:	2305      	movs	r3, #5
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	480d      	ldr	r0, [pc, #52]	@ (80014c0 <HAL_SPI_MspInit+0xc8>)
 800148a:	f001 fa59 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800148e:	2320      	movs	r3, #32
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800149e:	2305      	movs	r3, #5
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <HAL_SPI_MspInit+0xcc>)
 80014aa:	f001 fa49 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	@ 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40013000 	.word	0x40013000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40020400 	.word	0x40020400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <HAL_UART_MspInit+0x84>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d12c      	bne.n	8001544 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <HAL_UART_MspInit+0x88>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_UART_MspInit+0x88>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_UART_MspInit+0x88>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <HAL_UART_MspInit+0x88>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a10      	ldr	r2, [pc, #64]	@ (8001550 <HAL_UART_MspInit+0x88>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_UART_MspInit+0x88>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001522:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001526:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001534:	2307      	movs	r3, #7
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	4619      	mov	r1, r3
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <HAL_UART_MspInit+0x8c>)
 8001540:	f001 f9fe 	bl	8002940 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001544:	bf00      	nop
 8001546:	3728      	adds	r7, #40	@ 0x28
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40004800 	.word	0x40004800
 8001550:	40023800 	.word	0x40023800
 8001554:	40020c00 	.word	0x40020c00

08001558 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08a      	sub	sp, #40	@ 0x28
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001578:	d13f      	bne.n	80015fa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b21      	ldr	r3, [pc, #132]	@ (8001604 <HAL_PCD_MspInit+0xac>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a20      	ldr	r2, [pc, #128]	@ (8001604 <HAL_PCD_MspInit+0xac>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <HAL_PCD_MspInit+0xac>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001596:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800159a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015a8:	230a      	movs	r3, #10
 80015aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	4619      	mov	r1, r3
 80015b2:	4815      	ldr	r0, [pc, #84]	@ (8001608 <HAL_PCD_MspInit+0xb0>)
 80015b4:	f001 f9c4 	bl	8002940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	480e      	ldr	r0, [pc, #56]	@ (8001608 <HAL_PCD_MspInit+0xb0>)
 80015ce:	f001 f9b7 	bl	8002940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <HAL_PCD_MspInit+0xac>)
 80015d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <HAL_PCD_MspInit+0xac>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <HAL_PCD_MspInit+0xac>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <HAL_PCD_MspInit+0xac>)
 80015e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <HAL_PCD_MspInit+0xac>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015fa:	bf00      	nop
 80015fc:	3728      	adds	r7, #40	@ 0x28
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40020000 	.word	0x40020000

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001662:	f001 f843 	bl	80026ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <SystemInit+0x20>)
 8001672:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <SystemInit+0x20>)
 8001678:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800167c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001694:	f7ff ffea 	bl	800166c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800169a:	490d      	ldr	r1, [pc, #52]	@ (80016d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800169e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a0:	e002      	b.n	80016a8 <LoopCopyDataInit>

080016a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a6:	3304      	adds	r3, #4

080016a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ac:	d3f9      	bcc.n	80016a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b0:	4c0a      	ldr	r4, [pc, #40]	@ (80016dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80016b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b4:	e001      	b.n	80016ba <LoopFillZerobss>

080016b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b8:	3204      	adds	r2, #4

080016ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016bc:	d3fb      	bcc.n	80016b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016be:	f005 f801 	bl	80066c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff fb31 	bl	8000d28 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80016d4:	080068e4 	.word	0x080068e4
  ldr r2, =_sbss
 80016d8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80016dc:	20000684 	.word	0x20000684

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>

080016e2 <BME280_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void BME280_Error_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
 80016e6:	bf00      	nop
 80016e8:	e7fd      	b.n	80016e6 <BME280_Error_Handler+0x4>
	...

080016ec <SPI_Write>:
    }
    /* USER CODE END Error_Handler_Debug */
}

static void SPI_Write(uint8_t reg, uint8_t *data, uint16_t size)
{                                    // 6.3.2 SPI write
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	6039      	str	r1, [r7, #0]
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	4613      	mov	r3, r2
 80016fa:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg & 0x7F; // Write command -> applies mask 0x7F = 0b01111111 -> Most Significant Bit (bit number 7) = 0
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001702:	b2db      	uxtb	r3, r3
 8001704:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2108      	movs	r1, #8
 800170a:	480d      	ldr	r0, [pc, #52]	@ (8001740 <SPI_Write+0x54>)
 800170c:	f001 fac4 	bl	8002c98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 8001710:	f107 010f 	add.w	r1, r7, #15
 8001714:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001718:	2201      	movs	r2, #1
 800171a:	480a      	ldr	r0, [pc, #40]	@ (8001744 <SPI_Write+0x58>)
 800171c:	f003 fb05 	bl	8004d2a <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 8001720:	88ba      	ldrh	r2, [r7, #4]
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001726:	6839      	ldr	r1, [r7, #0]
 8001728:	4806      	ldr	r0, [pc, #24]	@ (8001744 <SPI_Write+0x58>)
 800172a:	f003 fafe 	bl	8004d2a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800172e:	2201      	movs	r2, #1
 8001730:	2108      	movs	r1, #8
 8001732:	4803      	ldr	r0, [pc, #12]	@ (8001740 <SPI_Write+0x54>)
 8001734:	f001 fab0 	bl	8002c98 <HAL_GPIO_WritePin>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40020400 	.word	0x40020400
 8001744:	200000a0 	.word	0x200000a0

08001748 <SPI_Read>:

static void SPI_Read(uint8_t reg, uint8_t *data, uint16_t size)
{                                    // 6.3.1 SPI read
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg | 0x80; // Read command -> applies mask 0x80 = 0b10000000 -> Most Significant Bit (bit number 7) = 1
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800175e:	b2db      	uxtb	r3, r3
 8001760:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2108      	movs	r1, #8
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <SPI_Read+0x54>)
 8001768:	f001 fa96 	bl	8002c98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), TIMEOUT);
 800176c:	f107 010f 	add.w	r1, r7, #15
 8001770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001774:	2201      	movs	r2, #1
 8001776:	480a      	ldr	r0, [pc, #40]	@ (80017a0 <SPI_Read+0x58>)
 8001778:	f003 fad7 	bl	8004d2a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, size, TIMEOUT);
 800177c:	88ba      	ldrh	r2, [r7, #4]
 800177e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	4806      	ldr	r0, [pc, #24]	@ (80017a0 <SPI_Read+0x58>)
 8001786:	f003 fc13 	bl	8004fb0 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	2108      	movs	r1, #8
 800178e:	4803      	ldr	r0, [pc, #12]	@ (800179c <SPI_Read+0x54>)
 8001790:	f001 fa82 	bl	8002c98 <HAL_GPIO_WritePin>
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020400 	.word	0x40020400
 80017a0:	200000a0 	.word	0x200000a0

080017a4 <tempFSM_init>:
  TEMP_ALARM,
} tempState_t;

static tempState_t currentTempState;

void tempFSM_init() {
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	currentTempState = TEMP_NORMAL;
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <tempFSM_init+0x14>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	200005fc 	.word	0x200005fc

080017bc <trimmingParametersRead>:
static float temp, hum;

// 4.2.2 Trimming parameter readout
// UNDERSTAND AND ADAPT TO OWN IT
static void trimmingParametersRead(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
    uint8_t calibData1[26]; // Table 18: Memory map -> calib00..calib25 | 0x88 to 0xA1
    uint8_t calibData2[7];

    SPI_Read(CALIBMEMADD1, calibData1, CALIBDATASIZE1); // 8-bit temperature calibration value
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2219      	movs	r2, #25
 80017c8:	4619      	mov	r1, r3
 80017ca:	2088      	movs	r0, #136	@ 0x88
 80017cc:	f7ff ffbc 	bl	8001748 <SPI_Read>
    SPI_Read(CALIBMEMADD2, calibData2, CALIBDATASIZE2); // 8-bit humidity calibration value
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2207      	movs	r2, #7
 80017d4:	4619      	mov	r1, r3
 80017d6:	20e1      	movs	r0, #225	@ 0xe1
 80017d8:	f7ff ffb6 	bl	8001748 <SPI_Read>

    // Combine the bytes read from the calibration memory into 16-bit integers.
    dig_T1 = (calibData1[1] << 8) | calibData1[0];
 80017dc:	7b7b      	ldrb	r3, [r7, #13]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	7b3b      	ldrb	r3, [r7, #12]
 80017e4:	b21b      	sxth	r3, r3
 80017e6:	4313      	orrs	r3, r2
 80017e8:	b21b      	sxth	r3, r3
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b4d      	ldr	r3, [pc, #308]	@ (8001924 <trimmingParametersRead+0x168>)
 80017ee:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calibData1[3] << 8) | calibData1[2];
 80017f0:	7bfb      	ldrb	r3, [r7, #15]
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	b21a      	sxth	r2, r3
 80017f6:	7bbb      	ldrb	r3, [r7, #14]
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	b21a      	sxth	r2, r3
 80017fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001928 <trimmingParametersRead+0x16c>)
 8001800:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calibData1[5] << 8) | calibData1[4];
 8001802:	7c7b      	ldrb	r3, [r7, #17]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	b21a      	sxth	r2, r3
 8001808:	7c3b      	ldrb	r3, [r7, #16]
 800180a:	b21b      	sxth	r3, r3
 800180c:	4313      	orrs	r3, r2
 800180e:	b21a      	sxth	r2, r3
 8001810:	4b46      	ldr	r3, [pc, #280]	@ (800192c <trimmingParametersRead+0x170>)
 8001812:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calibData1[7] << 8) | calibData1[6];
 8001814:	7cfb      	ldrb	r3, [r7, #19]
 8001816:	021b      	lsls	r3, r3, #8
 8001818:	b21a      	sxth	r2, r3
 800181a:	7cbb      	ldrb	r3, [r7, #18]
 800181c:	b21b      	sxth	r3, r3
 800181e:	4313      	orrs	r3, r2
 8001820:	b21b      	sxth	r3, r3
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b42      	ldr	r3, [pc, #264]	@ (8001930 <trimmingParametersRead+0x174>)
 8001826:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calibData1[9] << 8) | calibData1[8];
 8001828:	7d7b      	ldrb	r3, [r7, #21]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	b21a      	sxth	r2, r3
 800182e:	7d3b      	ldrb	r3, [r7, #20]
 8001830:	b21b      	sxth	r3, r3
 8001832:	4313      	orrs	r3, r2
 8001834:	b21a      	sxth	r2, r3
 8001836:	4b3f      	ldr	r3, [pc, #252]	@ (8001934 <trimmingParametersRead+0x178>)
 8001838:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calibData1[11] << 8) | calibData1[10];
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	b21a      	sxth	r2, r3
 8001840:	7dbb      	ldrb	r3, [r7, #22]
 8001842:	b21b      	sxth	r3, r3
 8001844:	4313      	orrs	r3, r2
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <trimmingParametersRead+0x17c>)
 800184a:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calibData1[13] << 8) | calibData1[12];
 800184c:	7e7b      	ldrb	r3, [r7, #25]
 800184e:	021b      	lsls	r3, r3, #8
 8001850:	b21a      	sxth	r2, r3
 8001852:	7e3b      	ldrb	r3, [r7, #24]
 8001854:	b21b      	sxth	r3, r3
 8001856:	4313      	orrs	r3, r2
 8001858:	b21a      	sxth	r2, r3
 800185a:	4b38      	ldr	r3, [pc, #224]	@ (800193c <trimmingParametersRead+0x180>)
 800185c:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calibData1[15] << 8) | calibData1[14];
 800185e:	7efb      	ldrb	r3, [r7, #27]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	7ebb      	ldrb	r3, [r7, #26]
 8001866:	b21b      	sxth	r3, r3
 8001868:	4313      	orrs	r3, r2
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b34      	ldr	r3, [pc, #208]	@ (8001940 <trimmingParametersRead+0x184>)
 800186e:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calibData1[17] << 8) | calibData1[16];
 8001870:	7f7b      	ldrb	r3, [r7, #29]
 8001872:	021b      	lsls	r3, r3, #8
 8001874:	b21a      	sxth	r2, r3
 8001876:	7f3b      	ldrb	r3, [r7, #28]
 8001878:	b21b      	sxth	r3, r3
 800187a:	4313      	orrs	r3, r2
 800187c:	b21a      	sxth	r2, r3
 800187e:	4b31      	ldr	r3, [pc, #196]	@ (8001944 <trimmingParametersRead+0x188>)
 8001880:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calibData1[19] << 8) | calibData1[18];
 8001882:	7ffb      	ldrb	r3, [r7, #31]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	b21a      	sxth	r2, r3
 8001888:	7fbb      	ldrb	r3, [r7, #30]
 800188a:	b21b      	sxth	r3, r3
 800188c:	4313      	orrs	r3, r2
 800188e:	b21a      	sxth	r2, r3
 8001890:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <trimmingParametersRead+0x18c>)
 8001892:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calibData1[21] << 8) | calibData1[20];
 8001894:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b21a      	sxth	r2, r3
 800189c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018a0:	b21b      	sxth	r3, r3
 80018a2:	4313      	orrs	r3, r2
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	4b29      	ldr	r3, [pc, #164]	@ (800194c <trimmingParametersRead+0x190>)
 80018a8:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calibData1[23] << 8) | calibData1[22];
 80018aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	4313      	orrs	r3, r2
 80018ba:	b21a      	sxth	r2, r3
 80018bc:	4b24      	ldr	r3, [pc, #144]	@ (8001950 <trimmingParametersRead+0x194>)
 80018be:	801a      	strh	r2, [r3, #0]

    dig_H1 = calibData1[24];
 80018c0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80018c4:	461a      	mov	r2, r3
 80018c6:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <trimmingParametersRead+0x198>)
 80018c8:	801a      	strh	r2, [r3, #0]
    dig_H2 = (calibData2[1] << 8) | calibData2[0];
 80018ca:	797b      	ldrb	r3, [r7, #5]
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	793b      	ldrb	r3, [r7, #4]
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	b21a      	sxth	r2, r3
 80018d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001958 <trimmingParametersRead+0x19c>)
 80018da:	801a      	strh	r2, [r3, #0]
    dig_H3 = calibData2[2];
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b1e      	ldr	r3, [pc, #120]	@ (800195c <trimmingParametersRead+0x1a0>)
 80018e2:	801a      	strh	r2, [r3, #0]
    dig_H4 = (calibData2[3] << 4) | (calibData2[4] & 0x0F);
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	b21a      	sxth	r2, r3
 80018ea:	7a3b      	ldrb	r3, [r7, #8]
 80018ec:	b21b      	sxth	r3, r3
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	4b19      	ldr	r3, [pc, #100]	@ (8001960 <trimmingParametersRead+0x1a4>)
 80018fa:	801a      	strh	r2, [r3, #0]
    dig_H5 = (calibData2[4] << 4) | (calibData2[5] >> 4);
 80018fc:	7a3b      	ldrb	r3, [r7, #8]
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	b21a      	sxth	r2, r3
 8001902:	7a7b      	ldrb	r3, [r7, #9]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	b2db      	uxtb	r3, r3
 8001908:	b21b      	sxth	r3, r3
 800190a:	4313      	orrs	r3, r2
 800190c:	b21a      	sxth	r2, r3
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <trimmingParametersRead+0x1a8>)
 8001910:	801a      	strh	r2, [r3, #0]
    dig_H6 = calibData2[6];
 8001912:	7abb      	ldrb	r3, [r7, #10]
 8001914:	b21a      	sxth	r2, r3
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <trimmingParametersRead+0x1ac>)
 8001918:	801a      	strh	r2, [r3, #0]
}
 800191a:	bf00      	nop
 800191c:	3728      	adds	r7, #40	@ 0x28
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200005fe 	.word	0x200005fe
 8001928:	20000606 	.word	0x20000606
 800192c:	20000608 	.word	0x20000608
 8001930:	20000600 	.word	0x20000600
 8001934:	2000060a 	.word	0x2000060a
 8001938:	2000060c 	.word	0x2000060c
 800193c:	2000060e 	.word	0x2000060e
 8001940:	20000610 	.word	0x20000610
 8001944:	20000612 	.word	0x20000612
 8001948:	20000614 	.word	0x20000614
 800194c:	20000616 	.word	0x20000616
 8001950:	20000618 	.word	0x20000618
 8001954:	20000602 	.word	0x20000602
 8001958:	2000061a 	.word	0x2000061a
 800195c:	20000604 	.word	0x20000604
 8001960:	2000061c 	.word	0x2000061c
 8001964:	2000061e 	.word	0x2000061e
 8001968:	20000620 	.word	0x20000620

0800196c <BME280_init>:

// Function to initialize the BME280 sensor
void BME280_init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	tempFSM_init();
 8001972:	f7ff ff17 	bl	80017a4 <tempFSM_init>

    // Read trimming parameters from the sensor
    trimmingParametersRead();
 8001976:	f7ff ff21 	bl	80017bc <trimmingParametersRead>
    /*
    5.4.2 The "reset" register contains the soft reset word reset[7:0].
    If the value 0xB6 is written to the register, the device is reset using the complete power-on-reset procedure.
    The readout value is 0x00.
    */
    uint8_t resetSeq = 0xB6;
 800197a:	23b6      	movs	r3, #182	@ 0xb6
 800197c:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrlHum = 0x01;
 800197e:	2301      	movs	r3, #1
 8001980:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrlMeas = 0xA3; // 0b10100011 in hexadecimal
 8001982:	23a3      	movs	r3, #163	@ 0xa3
 8001984:	717b      	strb	r3, [r7, #5]
    uint8_t config = 0x10;   // 0b00010000 in hexadecimal
 8001986:	2310      	movs	r3, #16
 8001988:	713b      	strb	r3, [r7, #4]

    // Write reset sequence to the reset register
    SPI_Write(RESET_REG, &resetSeq, CMDWRITESIZE);
 800198a:	1dfb      	adds	r3, r7, #7
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	20e0      	movs	r0, #224	@ 0xe0
 8001992:	f7ff feab 	bl	80016ec <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001996:	2064      	movs	r0, #100	@ 0x64
 8001998:	f000 fec8 	bl	800272c <HAL_Delay>

    // Write control settings to the control registers
    SPI_Write(CTRL_HUM, &ctrlHum, CMDWRITESIZE);
 800199c:	1dbb      	adds	r3, r7, #6
 800199e:	2201      	movs	r2, #1
 80019a0:	4619      	mov	r1, r3
 80019a2:	20f2      	movs	r0, #242	@ 0xf2
 80019a4:	f7ff fea2 	bl	80016ec <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80019a8:	2064      	movs	r0, #100	@ 0x64
 80019aa:	f000 febf 	bl	800272c <HAL_Delay>

    SPI_Write(CTRL_MEAS, &ctrlMeas, CMDWRITESIZE);
 80019ae:	1d7b      	adds	r3, r7, #5
 80019b0:	2201      	movs	r2, #1
 80019b2:	4619      	mov	r1, r3
 80019b4:	20f4      	movs	r0, #244	@ 0xf4
 80019b6:	f7ff fe99 	bl	80016ec <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80019ba:	2064      	movs	r0, #100	@ 0x64
 80019bc:	f000 feb6 	bl	800272c <HAL_Delay>

    SPI_Write(CONFIG_REG, &config, CMDWRITESIZE);
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2201      	movs	r2, #1
 80019c4:	4619      	mov	r1, r3
 80019c6:	20f5      	movs	r0, #245	@ 0xf5
 80019c8:	f7ff fe90 	bl	80016ec <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80019cc:	2064      	movs	r0, #100	@ 0x64
 80019ce:	f000 fead 	bl	800272c <HAL_Delay>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <BME280_compensate_T_int32>:
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
static BME280_S32_t t_fine; // t_fine carries fine temperature as global value

// Temperature compensation formula taken from datasheet (please check page 25/60 for reference).
static BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    BME280_S32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((BME280_S32_t)dig_T1 << 1))) * ((BME280_S32_t)dig_T2)) >> 11;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	10da      	asrs	r2, r3, #3
 80019e8:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <BME280_compensate_T_int32+0x74>)
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <BME280_compensate_T_int32+0x78>)
 80019f2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	12db      	asrs	r3, r3, #11
 80019fc:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((BME280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BME280_S32_t)dig_T1))) >> 12) * ((BME280_S32_t)dig_T3)) >> 14;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	111b      	asrs	r3, r3, #4
 8001a02:	4a13      	ldr	r2, [pc, #76]	@ (8001a50 <BME280_compensate_T_int32+0x74>)
 8001a04:	8812      	ldrh	r2, [r2, #0]
 8001a06:	1a9b      	subs	r3, r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	1112      	asrs	r2, r2, #4
 8001a0c:	4910      	ldr	r1, [pc, #64]	@ (8001a50 <BME280_compensate_T_int32+0x74>)
 8001a0e:	8809      	ldrh	r1, [r1, #0]
 8001a10:	1a52      	subs	r2, r2, r1
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	131b      	asrs	r3, r3, #12
 8001a18:	4a0f      	ldr	r2, [pc, #60]	@ (8001a58 <BME280_compensate_T_int32+0x7c>)
 8001a1a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	139b      	asrs	r3, r3, #14
 8001a24:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001a5c <BME280_compensate_T_int32+0x80>)
 8001a2e:	6013      	str	r3, [r2, #0]
    T = (t_fine * 5 + 128) >> 8;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <BME280_compensate_T_int32+0x80>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	3380      	adds	r3, #128	@ 0x80
 8001a3c:	121b      	asrs	r3, r3, #8
 8001a3e:	60fb      	str	r3, [r7, #12]
    return T;
 8001a40:	68fb      	ldr	r3, [r7, #12]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	371c      	adds	r7, #28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200005fe 	.word	0x200005fe
 8001a54:	20000606 	.word	0x20000606
 8001a58:	20000608 	.word	0x20000608
 8001a5c:	20000634 	.word	0x20000634

08001a60 <bme280_compensate_H_int32>:

// Humidity compensation formula taken from datasheet (please check page 25/60 for reference).
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH.
static BME280_U32_t bme280_compensate_H_int32(BME280_S32_t adc_H)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    BME280_S32_t v_x1_u32r;
    v_x1_u32r = (t_fine - ((BME280_S32_t)76800));
 8001a68:	4b2c      	ldr	r3, [pc, #176]	@ (8001b1c <bme280_compensate_H_int32+0xbc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001a70:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) * v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) * ((BME280_S32_t)dig_H2) + 8192) >> 14));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	039a      	lsls	r2, r3, #14
 8001a76:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <bme280_compensate_H_int32+0xc0>)
 8001a78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7c:	051b      	lsls	r3, r3, #20
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <bme280_compensate_H_int32+0xc4>)
 8001a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a86:	4619      	mov	r1, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a94:	13db      	asrs	r3, r3, #15
 8001a96:	4a24      	ldr	r2, [pc, #144]	@ (8001b28 <bme280_compensate_H_int32+0xc8>)
 8001a98:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	fb01 f202 	mul.w	r2, r1, r2
 8001aa4:	1292      	asrs	r2, r2, #10
 8001aa6:	4921      	ldr	r1, [pc, #132]	@ (8001b2c <bme280_compensate_H_int32+0xcc>)
 8001aa8:	8809      	ldrh	r1, [r1, #0]
 8001aaa:	4608      	mov	r0, r1
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	fb00 f101 	mul.w	r1, r0, r1
 8001ab2:	12c9      	asrs	r1, r1, #11
 8001ab4:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001ab8:	fb01 f202 	mul.w	r2, r1, r2
 8001abc:	1292      	asrs	r2, r2, #10
 8001abe:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001ac2:	491b      	ldr	r1, [pc, #108]	@ (8001b30 <bme280_compensate_H_int32+0xd0>)
 8001ac4:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001ac8:	fb01 f202 	mul.w	r2, r1, r2
 8001acc:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001ad0:	1392      	asrs	r2, r2, #14
 8001ad2:	fb02 f303 	mul.w	r3, r2, r3
 8001ad6:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((BME280_S32_t)dig_H1)) >> 4));
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	13db      	asrs	r3, r3, #15
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	13d2      	asrs	r2, r2, #15
 8001ae0:	fb02 f303 	mul.w	r3, r2, r3
 8001ae4:	11db      	asrs	r3, r3, #7
 8001ae6:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <bme280_compensate_H_int32+0xd4>)
 8001ae8:	8812      	ldrh	r2, [r2, #0]
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	111b      	asrs	r3, r3, #4
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001afc:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001b04:	bfa8      	it	ge
 8001b06:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001b0a:	60fb      	str	r3, [r7, #12]
    return (BME280_U32_t)(v_x1_u32r >> 12);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	131b      	asrs	r3, r3, #12
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	20000634 	.word	0x20000634
 8001b20:	2000061c 	.word	0x2000061c
 8001b24:	2000061e 	.word	0x2000061e
 8001b28:	20000620 	.word	0x20000620
 8001b2c:	20000604 	.word	0x20000604
 8001b30:	2000061a 	.word	0x2000061a
 8001b34:	20000602 	.word	0x20000602

08001b38 <BME280_read>:
    return hum;
}


static uint8_t BME280_read(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
    uint8_t sensorData[8];
    uint8_t chipID;

    SPI_Read(CHIPIDREG, &chipID, MEMADDRESSSIZE);
 8001b3e:	1dfb      	adds	r3, r7, #7
 8001b40:	2201      	movs	r2, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	20d0      	movs	r0, #208	@ 0xd0
 8001b46:	f7ff fdff 	bl	8001748 <SPI_Read>

    if (chipID == 0x60)
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	2b60      	cmp	r3, #96	@ 0x60
 8001b4e:	d128      	bne.n	8001ba2 <BME280_read+0x6a>
    {
        for (int i = 0; i <= 2; i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e008      	b.n	8001b68 <BME280_read+0x30>
        {
            BSP_LED_Toggle(LED2); // sensor ID OK
 8001b56:	2001      	movs	r0, #1
 8001b58:	f000 fd5c 	bl	8002614 <BSP_LED_Toggle>
            HAL_Delay(100);
 8001b5c:	2064      	movs	r0, #100	@ 0x64
 8001b5e:	f000 fde5 	bl	800272c <HAL_Delay>
        for (int i = 0; i <= 2; i++)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	3301      	adds	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	ddf3      	ble.n	8001b56 <BME280_read+0x1e>
        }

        SPI_Read(RAWDATAREG1, sensorData, RAWDATASIZE);
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	2208      	movs	r2, #8
 8001b74:	4619      	mov	r1, r3
 8001b76:	20f7      	movs	r0, #247	@ 0xf7
 8001b78:	f7ff fde6 	bl	8001748 <SPI_Read>

        /* Data readout is done by starting a burst read from 0xF7 to 0xFC (temperature and pressure) or from 0xF7 to 0xFE
         * (temperature, pressure and humidity). The data are read out in an unsigned 20-bit format both for pressure and
         * for temperature and in an unsigned 16-bit format for humidity. */

        tADC = (sensorData[3] << 12) | (sensorData[4] << 4) | (sensorData[5] >> 4); // WE CAN RETURN THIS WITH * & in the function signature
 8001b7c:	7afb      	ldrb	r3, [r7, #11]
 8001b7e:	031a      	lsls	r2, r3, #12
 8001b80:	7b3b      	ldrb	r3, [r7, #12]
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	4313      	orrs	r3, r2
 8001b86:	7b7a      	ldrb	r2, [r7, #13]
 8001b88:	0912      	lsrs	r2, r2, #4
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001bcc <BME280_read+0x94>)
 8001b90:	6013      	str	r3, [r2, #0]
        hADC = (sensorData[6] << 8) | sensorData[7];
 8001b92:	7bbb      	ldrb	r3, [r7, #14]
 8001b94:	021b      	lsls	r3, r3, #8
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <BME280_read+0x98>)
 8001b9c:	6013      	str	r3, [r2, #0]

        return 0; // check state of the function return and pass the data with pointer * & for the return of tADC hADC
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	e00f      	b.n	8001bc2 <BME280_read+0x8a>
    }
    else
    {
        for (int i = 0; i <= 2; i++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	e008      	b.n	8001bba <BME280_read+0x82>
        {
            BSP_LED_Toggle(LED3); // sensor ID ERROR
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f000 fd33 	bl	8002614 <BSP_LED_Toggle>
            HAL_Delay(100);
 8001bae:	2064      	movs	r0, #100	@ 0x64
 8001bb0:	f000 fdbc 	bl	800272c <HAL_Delay>
        for (int i = 0; i <= 2; i++)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	ddf3      	ble.n	8001ba8 <BME280_read+0x70>
        }

        return 1;
 8001bc0:	2301      	movs	r3, #1
    }
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000624 	.word	0x20000624
 8001bd0:	20000628 	.word	0x20000628

08001bd4 <eval_data>:

void eval_data()
{
 8001bd4:	b5b0      	push	{r4, r5, r7, lr}
 8001bd6:	b096      	sub	sp, #88	@ 0x58
 8001bd8:	af00      	add	r7, sp, #0
	PosCaracLLcd(9);
 8001bda:	2009      	movs	r0, #9
 8001bdc:	f000 fc29 	bl	8002432 <PosCaracLLcd>
	SacaTextoLcd((uint8_t *)"                "); // Clear 16 characters
 8001be0:	4857      	ldr	r0, [pc, #348]	@ (8001d40 <eval_data+0x16c>)
 8001be2:	f000 fc01 	bl	80023e8 <SacaTextoLcd>
	HAL_Delay(100);
 8001be6:	2064      	movs	r0, #100	@ 0x64
 8001be8:	f000 fda0 	bl	800272c <HAL_Delay>

	BME280_read();
 8001bec:	f7ff ffa4 	bl	8001b38 <BME280_read>

    uint8_t message[50];

    if (temp > 27.0){
 8001bf0:	4b54      	ldr	r3, [pc, #336]	@ (8001d44 <eval_data+0x170>)
 8001bf2:	edd3 7a00 	vldr	s15, [r3]
 8001bf6:	eeb3 7a0b 	vmov.f32	s14, #59	@ 0x41d80000  27.0
 8001bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	f340 8086 	ble.w	8001d12 <eval_data+0x13e>
        currentTempState = TEMP_ALARM;
 8001c06:	4b50      	ldr	r3, [pc, #320]	@ (8001d48 <eval_data+0x174>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
        strcpy((char *)message, "Temperature Alarm State.\r\n");
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	4a4e      	ldr	r2, [pc, #312]	@ (8001d4c <eval_data+0x178>)
 8001c12:	461c      	mov	r4, r3
 8001c14:	4615      	mov	r5, r2
 8001c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c1e:	c403      	stmia	r4!, {r0, r1}
 8001c20:	8022      	strh	r2, [r4, #0]
 8001c22:	3402      	adds	r4, #2
 8001c24:	0c13      	lsrs	r3, r2, #16
 8001c26:	7023      	strb	r3, [r4, #0]
        uartSendString(message);  // Debug message
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 fc5b 	bl	80024e8 <uartSendString>
        for (int i = 0; i <= 3; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c36:	e008      	b.n	8001c4a <eval_data+0x76>
        {
        	BSP_LED_Toggle(LED3); // sensor ID ERROR
 8001c38:	2002      	movs	r0, #2
 8001c3a:	f000 fceb 	bl	8002614 <BSP_LED_Toggle>
        	HAL_Delay(100);
 8001c3e:	2064      	movs	r0, #100	@ 0x64
 8001c40:	f000 fd74 	bl	800272c <HAL_Delay>
        for (int i = 0; i <= 3; i++)
 8001c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c46:	3301      	adds	r3, #1
 8001c48:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	ddf3      	ble.n	8001c38 <eval_data+0x64>
        }

        // Send temperature data
        strcpy((char *)message, "Temperature: ");
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	4a3e      	ldr	r2, [pc, #248]	@ (8001d50 <eval_data+0x17c>)
 8001c56:	461c      	mov	r4, r3
 8001c58:	4613      	mov	r3, r2
 8001c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5c:	c407      	stmia	r4!, {r0, r1, r2}
 8001c5e:	8023      	strh	r3, [r4, #0]
        char tempStr[20];
        int intPart = (int)temp;
 8001c60:	4b38      	ldr	r3, [pc, #224]	@ (8001d44 <eval_data+0x170>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6a:	ee17 3a90 	vmov	r3, s15
 8001c6e:	653b      	str	r3, [r7, #80]	@ 0x50
        int fracPart = (int)((temp - intPart) * 100);
 8001c70:	4b34      	ldr	r3, [pc, #208]	@ (8001d44 <eval_data+0x170>)
 8001c72:	ed93 7a00 	vldr	s14, [r3]
 8001c76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c84:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8001d54 <eval_data+0x180>
 8001c88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c90:	ee17 3a90 	vmov	r3, s15
 8001c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
        itoa(intPart, tempStr, 10);
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	220a      	movs	r2, #10
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001c9e:	f004 fcb4 	bl	800660a <itoa>
        strcat((char *)message, tempStr);
 8001ca2:	1d3a      	adds	r2, r7, #4
 8001ca4:	f107 0318 	add.w	r3, r7, #24
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f004 fcfa 	bl	80066a4 <strcat>
        strcat((char *)message, ".");
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fa99 	bl	80001ec <strlen>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4924      	ldr	r1, [pc, #144]	@ (8001d58 <eval_data+0x184>)
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	460b      	mov	r3, r1
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	8013      	strh	r3, [r2, #0]
        itoa(fracPart, tempStr, 10);
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001cd6:	f004 fc98 	bl	800660a <itoa>
        strcat((char *)message, tempStr);
 8001cda:	1d3a      	adds	r2, r7, #4
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 fcde 	bl	80066a4 <strcat>
        strcat((char *)message, " C\r\n");
 8001ce8:	f107 0318 	add.w	r3, r7, #24
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fa7d 	bl	80001ec <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f107 0318 	add.w	r3, r7, #24
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a17      	ldr	r2, [pc, #92]	@ (8001d5c <eval_data+0x188>)
 8001cfe:	6810      	ldr	r0, [r2, #0]
 8001d00:	6018      	str	r0, [r3, #0]
 8001d02:	7912      	ldrb	r2, [r2, #4]
 8001d04:	711a      	strb	r2, [r3, #4]
        uartSendString(message);
 8001d06:	f107 0318 	add.w	r3, r7, #24
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 fbec 	bl	80024e8 <uartSendString>
    {
        currentTempState = TEMP_NORMAL;
        strcpy((char *)message, "Temperature Normal State.\r\n");
        uartSendString(message);
    }
}
 8001d10:	e012      	b.n	8001d38 <eval_data+0x164>
        currentTempState = TEMP_NORMAL;
 8001d12:	4b0d      	ldr	r3, [pc, #52]	@ (8001d48 <eval_data+0x174>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
        strcpy((char *)message, "Temperature Normal State.\r\n");
 8001d18:	f107 0318 	add.w	r3, r7, #24
 8001d1c:	4a10      	ldr	r2, [pc, #64]	@ (8001d60 <eval_data+0x18c>)
 8001d1e:	461c      	mov	r4, r3
 8001d20:	4615      	mov	r5, r2
 8001d22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uartSendString(message);
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fbd8 	bl	80024e8 <uartSendString>
}
 8001d38:	bf00      	nop
 8001d3a:	3758      	adds	r7, #88	@ 0x58
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d40:	0800672c 	.word	0x0800672c
 8001d44:	2000062c 	.word	0x2000062c
 8001d48:	200005fc 	.word	0x200005fc
 8001d4c:	08006740 	.word	0x08006740
 8001d50:	0800675c 	.word	0x0800675c
 8001d54:	42c80000 	.word	0x42c80000
 8001d58:	0800676c 	.word	0x0800676c
 8001d5c:	08006770 	.word	0x08006770
 8001d60:	08006778 	.word	0x08006778

08001d64 <BME280_calculate>:

void BME280_calculate(void)
{
 8001d64:	b5b0      	push	{r4, r5, r7, lr}
 8001d66:	ed2d 8b02 	vpush	{d8}
 8001d6a:	b0a4      	sub	sp, #144	@ 0x90
 8001d6c:	af00      	add	r7, sp, #0
    if (BME280_read() == 0)
 8001d6e:	f7ff fee3 	bl	8001b38 <BME280_read>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f040 81a2 	bne.w	80020be <BME280_calculate+0x35a>
    {
        temp = ((float) BME280_compensate_T_int32(tADC)) / 100.0; // from integer to float
 8001d7a:	4bdf      	ldr	r3, [pc, #892]	@ (80020f8 <BME280_calculate+0x394>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fe2c 	bl	80019dc <BME280_compensate_T_int32>
 8001d84:	ee07 0a90 	vmov	s15, r0
 8001d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8c:	ee17 0a90 	vmov	r0, s15
 8001d90:	f7fe fb98 	bl	80004c4 <__aeabi_f2d>
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	4bd8      	ldr	r3, [pc, #864]	@ (80020fc <BME280_calculate+0x398>)
 8001d9a:	f7fe fd15 	bl	80007c8 <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	f7fe fdf7 	bl	8000998 <__aeabi_d2f>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4ad4      	ldr	r2, [pc, #848]	@ (8002100 <BME280_calculate+0x39c>)
 8001dae:	6013      	str	r3, [r2, #0]
        hum = ((float) bme280_compensate_H_int32(hADC)) / 1024.0; // WATCHOUT FOR IMPLICIT TYPECASTS!!!!!!!!!
 8001db0:	4bd4      	ldr	r3, [pc, #848]	@ (8002104 <BME280_calculate+0x3a0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fe53 	bl	8001a60 <bme280_compensate_H_int32>
 8001dba:	ee07 0a90 	vmov	s15, r0
 8001dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc2:	ee17 0a90 	vmov	r0, s15
 8001dc6:	f7fe fb7d 	bl	80004c4 <__aeabi_f2d>
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	4bce      	ldr	r3, [pc, #824]	@ (8002108 <BME280_calculate+0x3a4>)
 8001dd0:	f7fe fcfa 	bl	80007c8 <__aeabi_ddiv>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4610      	mov	r0, r2
 8001dda:	4619      	mov	r1, r3
 8001ddc:	f7fe fddc 	bl	8000998 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4aca      	ldr	r2, [pc, #808]	@ (800210c <BME280_calculate+0x3a8>)
 8001de4:	6013      	str	r3, [r2, #0]

        uint8_t message[50];

        // Notify that the device is ready
        // Esto es redundante! Enviar directamente por uartSendString!!!!!!
        strcpy((char *)message, "Device ready, going to transfer data via UART.\r\n");
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4ac9      	ldr	r2, [pc, #804]	@ (8002110 <BME280_calculate+0x3ac>)
 8001dea:	461c      	mov	r4, r3
 8001dec:	4615      	mov	r5, r2
 8001dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfa:	682b      	ldr	r3, [r5, #0]
 8001dfc:	7023      	strb	r3, [r4, #0]
        uartSendString(message);
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 fb71 	bl	80024e8 <uartSendString>

        // Send temperature data
        strcpy((char *)message, "Temperature: ");
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	4ac2      	ldr	r2, [pc, #776]	@ (8002114 <BME280_calculate+0x3b0>)
 8001e0a:	461c      	mov	r4, r3
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e10:	c407      	stmia	r4!, {r0, r1, r2}
 8001e12:	8023      	strh	r3, [r4, #0]
        char tempStr[20];
        int intPart = (int)temp;
 8001e14:	4bba      	ldr	r3, [pc, #744]	@ (8002100 <BME280_calculate+0x39c>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1e:	ee17 3a90 	vmov	r3, s15
 8001e22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        int fracPart = (int)((temp - intPart) * 100);
 8001e26:	4bb6      	ldr	r3, [pc, #728]	@ (8002100 <BME280_calculate+0x39c>)
 8001e28:	ed93 7a00 	vldr	s14, [r3]
 8001e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e3c:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8002118 <BME280_calculate+0x3b4>
 8001e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e48:	ee17 3a90 	vmov	r3, s15
 8001e4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        itoa(intPart, tempStr, 10);
 8001e50:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e54:	220a      	movs	r2, #10
 8001e56:	4619      	mov	r1, r3
 8001e58:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001e5c:	f004 fbd5 	bl	800660a <itoa>
        strcat((char *)message, tempStr);
 8001e60:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f004 fc1b 	bl	80066a4 <strcat>
        strcat((char *)message, ".");
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe f9bb 	bl	80001ec <strlen>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461a      	mov	r2, r3
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4413      	add	r3, r2
 8001e7e:	49a7      	ldr	r1, [pc, #668]	@ (800211c <BME280_calculate+0x3b8>)
 8001e80:	461a      	mov	r2, r3
 8001e82:	460b      	mov	r3, r1
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	8013      	strh	r3, [r2, #0]
        itoa(fracPart, tempStr, 10);
 8001e88:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001e8c:	220a      	movs	r2, #10
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001e94:	f004 fbb9 	bl	800660a <itoa>
        strcat((char *)message, tempStr);
 8001e98:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f004 fbff 	bl	80066a4 <strcat>
        strcat((char *)message, " C\r\n");
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe f99f 	bl	80001ec <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	4413      	add	r3, r2
 8001eb6:	4a9a      	ldr	r2, [pc, #616]	@ (8002120 <BME280_calculate+0x3bc>)
 8001eb8:	6810      	ldr	r0, [r2, #0]
 8001eba:	6018      	str	r0, [r3, #0]
 8001ebc:	7912      	ldrb	r2, [r2, #4]
 8001ebe:	711a      	strb	r2, [r3, #4]
        uartSendString(message);
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 fb10 	bl	80024e8 <uartSendString>

        // Send humidity data
        strcpy((char *)message, "Humidity: ");
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4a96      	ldr	r2, [pc, #600]	@ (8002124 <BME280_calculate+0x3c0>)
 8001ecc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ece:	c303      	stmia	r3!, {r0, r1}
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	0c12      	lsrs	r2, r2, #16
 8001ed6:	701a      	strb	r2, [r3, #0]
        char humStr[20];
        intPart = (int)hum;
 8001ed8:	4b8c      	ldr	r3, [pc, #560]	@ (800210c <BME280_calculate+0x3a8>)
 8001eda:	edd3 7a00 	vldr	s15, [r3]
 8001ede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee2:	ee17 3a90 	vmov	r3, s15
 8001ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        fracPart = (int)((hum - intPart) * 100);
 8001eea:	4b88      	ldr	r3, [pc, #544]	@ (800210c <BME280_calculate+0x3a8>)
 8001eec:	ed93 7a00 	vldr	s14, [r3]
 8001ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f00:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8002118 <BME280_calculate+0x3b4>
 8001f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f0c:	ee17 3a90 	vmov	r3, s15
 8001f10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        itoa(intPart, humStr, 10);
 8001f14:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f18:	220a      	movs	r2, #10
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001f20:	f004 fb73 	bl	800660a <itoa>
        strcat((char *)message, humStr);
 8001f24:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001f28:	1d3b      	adds	r3, r7, #4
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f004 fbb9 	bl	80066a4 <strcat>
        strcat((char *)message, ".");
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe f959 	bl	80001ec <strlen>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	4413      	add	r3, r2
 8001f42:	4976      	ldr	r1, [pc, #472]	@ (800211c <BME280_calculate+0x3b8>)
 8001f44:	461a      	mov	r2, r3
 8001f46:	460b      	mov	r3, r1
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	8013      	strh	r3, [r2, #0]
        itoa(fracPart, humStr, 10);
 8001f4c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f50:	220a      	movs	r2, #10
 8001f52:	4619      	mov	r1, r3
 8001f54:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001f58:	f004 fb57 	bl	800660a <itoa>
        strcat((char *)message, humStr);
 8001f5c:	f107 0260 	add.w	r2, r7, #96	@ 0x60
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f004 fb9d 	bl	80066a4 <strcat>
        strcat((char *)message, " %\r\n");
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe f93d 	bl	80001ec <strlen>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	4413      	add	r3, r2
 8001f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8002128 <BME280_calculate+0x3c4>)
 8001f7c:	6810      	ldr	r0, [r2, #0]
 8001f7e:	6018      	str	r0, [r3, #0]
 8001f80:	7912      	ldrb	r2, [r2, #4]
 8001f82:	711a      	strb	r2, [r3, #4]
        uartSendString(message);
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 faae 	bl	80024e8 <uartSendString>

        // Prepare temperature string for LCD
        char lcdTempStr[20];
        itoa((int)temp, lcdTempStr, 10);
 8001f8c:	4b5c      	ldr	r3, [pc, #368]	@ (8002100 <BME280_calculate+0x39c>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f9a:	220a      	movs	r2, #10
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	ee17 0a90 	vmov	r0, s15
 8001fa2:	f004 fb32 	bl	800660a <itoa>
        strcat(lcdTempStr, ".");
 8001fa6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f91e 	bl	80001ec <strlen>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001fb8:	4413      	add	r3, r2
 8001fba:	4958      	ldr	r1, [pc, #352]	@ (800211c <BME280_calculate+0x3b8>)
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	8013      	strh	r3, [r2, #0]
        itoa((int)((temp - (int)temp) * 100), lcdTempStr + strlen(lcdTempStr), 10);
 8001fc4:	4b4e      	ldr	r3, [pc, #312]	@ (8002100 <BME280_calculate+0x39c>)
 8001fc6:	ed93 7a00 	vldr	s14, [r3]
 8001fca:	4b4d      	ldr	r3, [pc, #308]	@ (8002100 <BME280_calculate+0x39c>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fdc:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8002118 <BME280_calculate+0x3b4>
 8001fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001fe8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7fe f8fd 	bl	80001ec <strlen>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001ff8:	4413      	add	r3, r2
 8001ffa:	220a      	movs	r2, #10
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	ee18 0a10 	vmov	r0, s16
 8002002:	f004 fb02 	bl	800660a <itoa>

        // Prepare humidity string for LCD
        char lcdHumStr[20];
        itoa((int)hum, lcdHumStr, 10);
 8002006:	4b41      	ldr	r3, [pc, #260]	@ (800210c <BME280_calculate+0x3a8>)
 8002008:	edd3 7a00 	vldr	s15, [r3]
 800200c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002010:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002014:	220a      	movs	r2, #10
 8002016:	4619      	mov	r1, r3
 8002018:	ee17 0a90 	vmov	r0, s15
 800201c:	f004 faf5 	bl	800660a <itoa>
        strcat(lcdHumStr, ".");
 8002020:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe f8e1 	bl	80001ec <strlen>
 800202a:	4603      	mov	r3, r0
 800202c:	461a      	mov	r2, r3
 800202e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002032:	4413      	add	r3, r2
 8002034:	4939      	ldr	r1, [pc, #228]	@ (800211c <BME280_calculate+0x3b8>)
 8002036:	461a      	mov	r2, r3
 8002038:	460b      	mov	r3, r1
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	8013      	strh	r3, [r2, #0]
        itoa((int)((hum - (int)hum) * 100), lcdHumStr + strlen(lcdHumStr), 10);
 800203e:	4b33      	ldr	r3, [pc, #204]	@ (800210c <BME280_calculate+0x3a8>)
 8002040:	ed93 7a00 	vldr	s14, [r3]
 8002044:	4b31      	ldr	r3, [pc, #196]	@ (800210c <BME280_calculate+0x3a8>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002056:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002118 <BME280_calculate+0x3b4>
 800205a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800205e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8002062:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f8c0 	bl	80001ec <strlen>
 800206c:	4602      	mov	r2, r0
 800206e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002072:	4413      	add	r3, r2
 8002074:	220a      	movs	r2, #10
 8002076:	4619      	mov	r1, r3
 8002078:	ee18 0a10 	vmov	r0, s16
 800207c:	f004 fac5 	bl	800660a <itoa>

        // Display temperature on the LCD
        PosCaracLLcd(9); // Assuming position 0 on the upper line
 8002080:	2009      	movs	r0, #9
 8002082:	f000 f9d6 	bl	8002432 <PosCaracLLcd>
        SacaTextoLcd((uint8_t *)"T:");
 8002086:	4829      	ldr	r0, [pc, #164]	@ (800212c <BME280_calculate+0x3c8>)
 8002088:	f000 f9ae 	bl	80023e8 <SacaTextoLcd>
        SacaTextoLcd((uint8_t *)lcdTempStr);
 800208c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f9a9 	bl	80023e8 <SacaTextoLcd>

        HAL_Delay(500);
 8002096:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800209a:	f000 fb47 	bl	800272c <HAL_Delay>

        // Display humidity on the LCD
        PosCaracLLcd(9); // Assuming position 0 on the lower line
 800209e:	2009      	movs	r0, #9
 80020a0:	f000 f9c7 	bl	8002432 <PosCaracLLcd>
        SacaTextoLcd((uint8_t *)"H:");
 80020a4:	4822      	ldr	r0, [pc, #136]	@ (8002130 <BME280_calculate+0x3cc>)
 80020a6:	f000 f99f 	bl	80023e8 <SacaTextoLcd>
        SacaTextoLcd((uint8_t *)lcdHumStr);
 80020aa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 f99a 	bl	80023e8 <SacaTextoLcd>

        HAL_Delay(500);
 80020b4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020b8:	f000 fb38 	bl	800272c <HAL_Delay>
        temp = 0;
        hum = 0;
        uint8_t errorMessage[] = "Device not ready. Check device connection\r\n";
        uartSendString(errorMessage);
    }
}
 80020bc:	e016      	b.n	80020ec <BME280_calculate+0x388>
        temp = 0;
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <BME280_calculate+0x39c>)
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
        hum = 0;
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <BME280_calculate+0x3a8>)
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
        uint8_t errorMessage[] = "Device not ready. Check device connection\r\n";
 80020ce:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <BME280_calculate+0x3d0>)
 80020d0:	1d3c      	adds	r4, r7, #4
 80020d2:	461d      	mov	r5, r3
 80020d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uartSendString(errorMessage);
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f9fe 	bl	80024e8 <uartSendString>
}
 80020ec:	bf00      	nop
 80020ee:	3790      	adds	r7, #144	@ 0x90
 80020f0:	46bd      	mov	sp, r7
 80020f2:	ecbd 8b02 	vpop	{d8}
 80020f6:	bdb0      	pop	{r4, r5, r7, pc}
 80020f8:	20000624 	.word	0x20000624
 80020fc:	40590000 	.word	0x40590000
 8002100:	2000062c 	.word	0x2000062c
 8002104:	20000628 	.word	0x20000628
 8002108:	40900000 	.word	0x40900000
 800210c:	20000630 	.word	0x20000630
 8002110:	08006794 	.word	0x08006794
 8002114:	0800675c 	.word	0x0800675c
 8002118:	42c80000 	.word	0x42c80000
 800211c:	0800676c 	.word	0x0800676c
 8002120:	08006770 	.word	0x08006770
 8002124:	080067c8 	.word	0x080067c8
 8002128:	080067d4 	.word	0x080067d4
 800212c:	080067dc 	.word	0x080067dc
 8002130:	080067e0 	.word	0x080067e0
 8002134:	080067e4 	.word	0x080067e4

08002138 <FSM_update>:

void FSM_update() {
 8002138:	b5b0      	push	{r4, r5, r7, lr}
 800213a:	b08e      	sub	sp, #56	@ 0x38
 800213c:	af00      	add	r7, sp, #0
	uint8_t message[50];
	strcpy((char *)message, "Evaluating Temperature data.\r\n");
 800213e:	1d3b      	adds	r3, r7, #4
 8002140:	4a15      	ldr	r2, [pc, #84]	@ (8002198 <FSM_update+0x60>)
 8002142:	461c      	mov	r4, r3
 8002144:	4615      	mov	r5, r2
 8002146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800214a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800214e:	c407      	stmia	r4!, {r0, r1, r2}
 8002150:	8023      	strh	r3, [r4, #0]
 8002152:	3402      	adds	r4, #2
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	7023      	strb	r3, [r4, #0]
	uartSendString(message);
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f9c4 	bl	80024e8 <uartSendString>

	eval_data();
 8002160:	f7ff fd38 	bl	8001bd4 <eval_data>

	switch (currentTempState) {
 8002164:	4b0d      	ldr	r3, [pc, #52]	@ (800219c <FSM_update+0x64>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <FSM_update+0x4a>
 800216c:	2b01      	cmp	r3, #1
 800216e:	d10b      	bne.n	8002188 <FSM_update+0x50>
	case TEMP_ALARM:
	  // PONER UNA FUNCION ESPECIFICA!
      PosCaracLLcd(9); // Assuming position 0 on the lower line
 8002170:	2009      	movs	r0, #9
 8002172:	f000 f95e 	bl	8002432 <PosCaracLLcd>
      SacaTextoLcd((uint8_t *)"ALARMA");
 8002176:	480a      	ldr	r0, [pc, #40]	@ (80021a0 <FSM_update+0x68>)
 8002178:	f000 f936 	bl	80023e8 <SacaTextoLcd>
	  BME280_calculate();
 800217c:	f7ff fdf2 	bl	8001d64 <BME280_calculate>
	  break;
 8002180:	e005      	b.n	800218e <FSM_update+0x56>
	case TEMP_NORMAL:
	  // Clear the "ALARMA" message from the LCD before updating with normal data
	  // Assuming the LCD has 16 characters per line, this will overwrite the "ALARMA" message
	  BME280_calculate();
 8002182:	f7ff fdef 	bl	8001d64 <BME280_calculate>
	  break;
 8002186:	e002      	b.n	800218e <FSM_update+0x56>
	default:
	  DebounceFsmErrorHandler();
 8002188:	f000 f80c 	bl	80021a4 <DebounceFsmErrorHandler>
    break;
 800218c:	bf00      	nop
  }
}
 800218e:	bf00      	nop
 8002190:	3738      	adds	r7, #56	@ 0x38
 8002192:	46bd      	mov	sp, r7
 8002194:	bdb0      	pop	{r4, r5, r7, pc}
 8002196:	bf00      	nop
 8002198:	08006810 	.word	0x08006810
 800219c:	200005fc 	.word	0x200005fc
 80021a0:	08006830 	.word	0x08006830

080021a4 <DebounceFsmErrorHandler>:

/**
 * @brief Handles invalid case in button debouncing FSM.
 */
static void DebounceFsmErrorHandler()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
    BSP_LED_On(LED3);
 80021a8:	2002      	movs	r0, #2
 80021aa:	f000 fa19 	bl	80025e0 <BSP_LED_On>
    while (1)
    {
        __NOP();
 80021ae:	bf00      	nop
 80021b0:	e7fd      	b.n	80021ae <DebounceFsmErrorHandler+0xa>
	...

080021b4 <TEST_SPI>:

#define TEST_DATA
#define TEST_BME280

void TEST_SPI()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
    for (int i = 0; i <= 4; i++)
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	e008      	b.n	80021d2 <TEST_SPI+0x1e>
    {
        BSP_LED_Toggle(LED2);
 80021c0:	2001      	movs	r0, #1
 80021c2:	f000 fa27 	bl	8002614 <BSP_LED_Toggle>
        HAL_Delay(100);
 80021c6:	2064      	movs	r0, #100	@ 0x64
 80021c8:	f000 fab0 	bl	800272c <HAL_Delay>
    for (int i = 0; i <= 4; i++)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	ddf3      	ble.n	80021c0 <TEST_SPI+0xc>
    }

#ifdef TEST_DATA
    // Test 2 data transactions (MOSI -> SDA/SDI on bme280 board) to see them in the logic analyzer display.
    uint8_t dato = 0xAA;
 80021d8:	23aa      	movs	r3, #170	@ 0xaa
 80021da:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2108      	movs	r1, #8
 80021e0:	4816      	ldr	r0, [pc, #88]	@ (800223c <TEST_SPI+0x88>)
 80021e2:	f000 fd59 	bl	8002c98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &dato, sizeof(dato), HAL_MAX_DELAY);
 80021e6:	1cf9      	adds	r1, r7, #3
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021ec:	2201      	movs	r2, #1
 80021ee:	4814      	ldr	r0, [pc, #80]	@ (8002240 <TEST_SPI+0x8c>)
 80021f0:	f002 fd9b 	bl	8004d2a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2108      	movs	r1, #8
 80021f8:	4810      	ldr	r0, [pc, #64]	@ (800223c <TEST_SPI+0x88>)
 80021fa:	f000 fd4d 	bl	8002c98 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80021fe:	2001      	movs	r0, #1
 8002200:	f000 fa94 	bl	800272c <HAL_Delay>

    uint8_t regAddress = 0xAB;
 8002204:	23ab      	movs	r3, #171	@ 0xab
 8002206:	70bb      	strb	r3, [r7, #2]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2108      	movs	r1, #8
 800220c:	480b      	ldr	r0, [pc, #44]	@ (800223c <TEST_SPI+0x88>)
 800220e:	f000 fd43 	bl	8002c98 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 8002212:	1cb9      	adds	r1, r7, #2
 8002214:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002218:	2201      	movs	r2, #1
 800221a:	4809      	ldr	r0, [pc, #36]	@ (8002240 <TEST_SPI+0x8c>)
 800221c:	f002 fd85 	bl	8004d2a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8002220:	2201      	movs	r2, #1
 8002222:	2108      	movs	r1, #8
 8002224:	4805      	ldr	r0, [pc, #20]	@ (800223c <TEST_SPI+0x88>)
 8002226:	f000 fd37 	bl	8002c98 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 800222a:	2001      	movs	r0, #1
 800222c:	f000 fa7e 	bl	800272c <HAL_Delay>
#endif

#ifdef TEST_BME280
    // Test 1 data transactions to check chip ID and see it in the logic analyzer display.
    FSM_update();
 8002230:	f7ff ff82 	bl	8002138 <FSM_update>
#endif
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40020400 	.word	0x40020400
 8002240:	200000a0 	.word	0x200000a0

08002244 <Init_Lcd>:

static const uint8_t LCD_INIT_CMD[]={
		_4BIT_MODE,DISPLAY_CONTROL,RETURN_HOME,ENTRY_MODE+AUTOINCREMENT,DISPLAY_CONTROL+DISPLAY_ON,CLR_LCD
};

_Bool Init_Lcd(void){
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
   SleepLcdBlocking(millisecond*20);
 800224a:	2014      	movs	r0, #20
 800224c:	f000 f83e 	bl	80022cc <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8002250:	2100      	movs	r1, #0
 8002252:	2030      	movs	r0, #48	@ 0x30
 8002254:	f000 f8a4 	bl	80023a0 <Envia4bitsLcd>
   SleepLcdBlocking(millisecond*10);
 8002258:	200a      	movs	r0, #10
 800225a:	f000 f837 	bl	80022cc <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 800225e:	2100      	movs	r1, #0
 8002260:	2030      	movs	r0, #48	@ 0x30
 8002262:	f000 f89d 	bl	80023a0 <Envia4bitsLcd>
   SleepLcdBlocking(millisecond*1);
 8002266:	2001      	movs	r0, #1
 8002268:	f000 f830 	bl	80022cc <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 800226c:	2100      	movs	r1, #0
 800226e:	2030      	movs	r0, #48	@ 0x30
 8002270:	f000 f896 	bl	80023a0 <Envia4bitsLcd>
   Envia4bitsLcd(COMANDO_INI2,CONTROL);
 8002274:	2100      	movs	r1, #0
 8002276:	2020      	movs	r0, #32
 8002278:	f000 f892 	bl	80023a0 <Envia4bitsLcd>
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
 800227c:	2300      	movs	r3, #0
 800227e:	71fb      	strb	r3, [r7, #7]
 8002280:	e008      	b.n	8002294 <Init_Lcd+0x50>
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4a10      	ldr	r2, [pc, #64]	@ (80022c8 <Init_Lcd+0x84>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f82a 	bl	80022e2 <ControlLcd>
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	3301      	adds	r3, #1
 8002292:	71fb      	strb	r3, [r7, #7]
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	2b05      	cmp	r3, #5
 8002298:	d9f3      	bls.n	8002282 <Init_Lcd+0x3e>
   SleepLcdBlocking(millisecond*2);
 800229a:	2002      	movs	r0, #2
 800229c:	f000 f816 	bl	80022cc <SleepLcdBlocking>
   for (int i = 0; i <= 4; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	e008      	b.n	80022b8 <Init_Lcd+0x74>
    {
 	   BSP_LED_Toggle(LED1); // init LCD OK
 80022a6:	2000      	movs	r0, #0
 80022a8:	f000 f9b4 	bl	8002614 <BSP_LED_Toggle>
 	   SleepLcdBlocking(millisecond*25);
 80022ac:	2019      	movs	r0, #25
 80022ae:	f000 f80d 	bl	80022cc <SleepLcdBlocking>
   for (int i = 0; i <= 4; i++)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	3301      	adds	r3, #1
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	ddf3      	ble.n	80022a6 <Init_Lcd+0x62>
    }
   return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	080068a0 	.word	0x080068a0

080022cc <SleepLcdBlocking>:

static void SleepLcdBlocking(uint32_t demora){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	  HAL_Delay(demora);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fa29 	bl	800272c <HAL_Delay>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <ControlLcd>:

static void ControlLcd(uint8_t valor){
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(valor,CONTROL);
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f000 f838 	bl	8002366 <Envia8bitsLcd>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <DatoLcd>:

void DatoLcd (uint8_t dato){
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato,DATOS);
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	2101      	movs	r1, #1
 800230c:	4618      	mov	r0, r3
 800230e:	f000 f82a 	bl	8002366 <Envia8bitsLcd>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <DatoAsciiLcd>:

void DatoAsciiLcd (uint8_t dato){
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	4603      	mov	r3, r0
 8002322:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato+ '0',DATOS);
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	3330      	adds	r3, #48	@ 0x30
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2101      	movs	r1, #1
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f81a 	bl	8002366 <Envia8bitsLcd>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <DatoBCD>:

void DatoBCD (uint8_t dato){
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
	  DatoAsciiLcd((((dato)&0xf0)>>4));
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	b2db      	uxtb	r3, r3
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ffe5 	bl	800231a <DatoAsciiLcd>
	  DatoAsciiLcd(((dato)&0x0f));
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	f003 030f 	and.w	r3, r3, #15
 8002356:	b2db      	uxtb	r3, r3
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ffde 	bl	800231a <DatoAsciiLcd>
}
 800235e:	bf00      	nop
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <Envia8bitsLcd>:

void Envia8bitsLcd (uint8_t valor,_Bool tipo){
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	460a      	mov	r2, r1
 8002370:	71fb      	strb	r3, [r7, #7]
 8002372:	4613      	mov	r3, r2
 8002374:	71bb      	strb	r3, [r7, #6]
	Envia4bitsLcd(valor&HIGH_NIBBLE,tipo);
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f023 030f 	bic.w	r3, r3, #15
 800237c:	b2db      	uxtb	r3, r3
 800237e:	79ba      	ldrb	r2, [r7, #6]
 8002380:	4611      	mov	r1, r2
 8002382:	4618      	mov	r0, r3
 8002384:	f000 f80c 	bl	80023a0 <Envia4bitsLcd>
	Envia4bitsLcd(valor<<LOW_NIBBLE,tipo);
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	b2db      	uxtb	r3, r3
 800238e:	79ba      	ldrb	r2, [r7, #6]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f804 	bl	80023a0 <Envia4bitsLcd>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <Envia4bitsLcd>:

static void Envia4bitsLcd (uint8_t valor,_Bool tipo){
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	460a      	mov	r2, r1
 80023aa:	71fb      	strb	r3, [r7, #7]
 80023ac:	4613      	mov	r3, r2
 80023ae:	71bb      	strb	r3, [r7, #6]
	LCD_HAL_I2C_Write(valor+tipo+EN+BL);
 80023b0:	79ba      	ldrb	r2, [r7, #6]
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	4413      	add	r3, r2
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	330c      	adds	r3, #12
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	4618      	mov	r0, r3
 80023be:	f000 f849 	bl	8002454 <LCD_HAL_I2C_Write>
	SleepLcdBlocking(millisecond);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7ff ff82 	bl	80022cc <SleepLcdBlocking>
	LCD_HAL_I2C_Write(valor+tipo+BL);
 80023c8:	79ba      	ldrb	r2, [r7, #6]
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4413      	add	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3308      	adds	r3, #8
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f83d 	bl	8002454 <LCD_HAL_I2C_Write>
	SleepLcdBlocking(millisecond);
 80023da:	2001      	movs	r0, #1
 80023dc:	f7ff ff76 	bl	80022cc <SleepLcdBlocking>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <SacaTextoLcd>:

void SacaTextoLcd (uint8_t *texto){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	while(*texto)DatoLcd(*texto++);
 80023f0:	e006      	b.n	8002400 <SacaTextoLcd+0x18>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff7f 	bl	80022fe <DatoLcd>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1f4      	bne.n	80023f2 <SacaTextoLcd+0xa>
}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <PosCaracHLcd>:
void ClrLcd(void){
   ControlLcd(CLR_LCD);
   SleepLcdBlocking(millisecond*2);
}

void PosCaracHLcd(uint8_t posH){
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posH | LINEA1);
 800241c:	79fb      	ldrb	r3, [r7, #7]
 800241e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002422:	b2db      	uxtb	r3, r3
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff5c 	bl	80022e2 <ControlLcd>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <PosCaracLLcd>:

void PosCaracLLcd(uint8_t posL){
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posL | LINEA2);
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8002442:	b2db      	uxtb	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff4c 	bl	80022e2 <ControlLcd>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <LCD_HAL_I2C_Write>:
#include"API_lcd_port.h"

extern I2C_HandleTypeDef hi2c1;

void LCD_HAL_I2C_Write(uint8_t valor){
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af02      	add	r7, sp, #8
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit (&hi2c1,LCD_DIR<<1,&valor, sizeof(valor),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 800245e:	1dfa      	adds	r2, r7, #7
 8002460:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2301      	movs	r3, #1
 8002468:	214e      	movs	r1, #78	@ 0x4e
 800246a:	4806      	ldr	r0, [pc, #24]	@ (8002484 <LCD_HAL_I2C_Write+0x30>)
 800246c:	f000 fd8c 	bl	8002f88 <HAL_I2C_Master_Transmit>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <LCD_HAL_I2C_Write+0x26>
 8002476:	f7fe ff1f 	bl	80012b8 <Error_Handler>

}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000004c 	.word	0x2000004c

08002488 <uartInit>:
  * @param  None
  * @retval bool_t: returns true if initialization is successful, otherwise false
  */

bool_t uartInit(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  UartHandle.Instance        = USARTx;
 800248c:	4b13      	ldr	r3, [pc, #76]	@ (80024dc <uartInit+0x54>)
 800248e:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <uartInit+0x58>)
 8002490:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 9600;
 8002492:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <uartInit+0x54>)
 8002494:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002498:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800249a:	4b10      	ldr	r3, [pc, #64]	@ (80024dc <uartInit+0x54>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80024a0:	4b0e      	ldr	r3, [pc, #56]	@ (80024dc <uartInit+0x54>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 80024a6:	4b0d      	ldr	r3, [pc, #52]	@ (80024dc <uartInit+0x54>)
 80024a8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80024ac:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80024ae:	4b0b      	ldr	r3, [pc, #44]	@ (80024dc <uartInit+0x54>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80024b4:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <uartInit+0x54>)
 80024b6:	220c      	movs	r2, #12
 80024b8:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ba:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <uartInit+0x54>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80024c0:	4806      	ldr	r0, [pc, #24]	@ (80024dc <uartInit+0x54>)
 80024c2:	f003 f97f 	bl	80057c4 <HAL_UART_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <uartInit+0x48>
  {
    /* Initialization Error */
   return false;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e003      	b.n	80024d8 <uartInit+0x50>
  }

  uartSendString((uint8_t*)"UART init OK -> baud rate configured = 9600 | stopbits = 1 | parity = odd.\r\n");
 80024d0:	4804      	ldr	r0, [pc, #16]	@ (80024e4 <uartInit+0x5c>)
 80024d2:	f000 f809 	bl	80024e8 <uartSendString>

  return true;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000638 	.word	0x20000638
 80024e0:	40004800 	.word	0x40004800
 80024e4:	08006838 	.word	0x08006838

080024e8 <uartSendString>:
  * @brief  Send a null-terminated string via UART
  * @param  uint8_t * pstring: pointer to the null-terminated string
  * @retval None
  */
void uartSendString(uint8_t * pstring)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if(NULL != pstring && MAXbUFFER > strlen((char*)pstring))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d016      	beq.n	8002524 <uartSendString+0x3c>
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7fd fe78 	bl	80001ec <strlen>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2bff      	cmp	r3, #255	@ 0xff
 8002500:	d810      	bhi.n	8002524 <uartSendString+0x3c>
  {
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f7fd fe72 	bl	80001ec <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	b29a      	uxth	r2, r3
 800250c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4808      	ldr	r0, [pc, #32]	@ (8002534 <uartSendString+0x4c>)
 8002514:	f003 f9a6 	bl	8005864 <HAL_UART_Transmit>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <uartSendString+0x42>
      Error_Handler();
 800251e:	f000 f80b 	bl	8002538 <Error_Handler>
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 8002522:	e002      	b.n	800252a <uartSendString+0x42>
  }
  else
    Error_Handler();
 8002524:	f000 f808 	bl	8002538 <Error_Handler>
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000638 	.word	0x20000638

08002538 <Error_Handler>:
  * @brief  Handles errors by entering an infinite loop
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <Error_Handler+0x4>

08002540 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	@ 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10e      	bne.n	800256e <BSP_LED_Init+0x2e>
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	4b1f      	ldr	r3, [pc, #124]	@ (80025d4 <BSP_LED_Init+0x94>)
 8002556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002558:	4a1e      	ldr	r2, [pc, #120]	@ (80025d4 <BSP_LED_Init+0x94>)
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002560:	4b1c      	ldr	r3, [pc, #112]	@ (80025d4 <BSP_LED_Init+0x94>)
 8002562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	613b      	str	r3, [r7, #16]
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	e00d      	b.n	800258a <BSP_LED_Init+0x4a>
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b18      	ldr	r3, [pc, #96]	@ (80025d4 <BSP_LED_Init+0x94>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a17      	ldr	r2, [pc, #92]	@ (80025d4 <BSP_LED_Init+0x94>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b15      	ldr	r3, [pc, #84]	@ (80025d4 <BSP_LED_Init+0x94>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	4a12      	ldr	r2, [pc, #72]	@ (80025d8 <BSP_LED_Init+0x98>)
 800258e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	2301      	movs	r3, #1
 8002596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002598:	2300      	movs	r3, #0
 800259a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800259c:	2302      	movs	r3, #2
 800259e:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	4a0e      	ldr	r2, [pc, #56]	@ (80025dc <BSP_LED_Init+0x9c>)
 80025a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a8:	f107 0214 	add.w	r2, r7, #20
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f9c6 	bl	8002940 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	4a09      	ldr	r2, [pc, #36]	@ (80025dc <BSP_LED_Init+0x9c>)
 80025b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025bc:	79fb      	ldrb	r3, [r7, #7]
 80025be:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <BSP_LED_Init+0x98>)
 80025c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025c4:	2200      	movs	r2, #0
 80025c6:	4619      	mov	r1, r3
 80025c8:	f000 fb66 	bl	8002c98 <HAL_GPIO_WritePin>
}
 80025cc:	bf00      	nop
 80025ce:	3728      	adds	r7, #40	@ 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40023800 	.word	0x40023800
 80025d8:	080068a8 	.word	0x080068a8
 80025dc:	20000004 	.word	0x20000004

080025e0 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	4a07      	ldr	r2, [pc, #28]	@ (800260c <BSP_LED_On+0x2c>)
 80025ee:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	4a06      	ldr	r2, [pc, #24]	@ (8002610 <BSP_LED_On+0x30>)
 80025f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025fa:	2201      	movs	r2, #1
 80025fc:	4619      	mov	r1, r3
 80025fe:	f000 fb4b 	bl	8002c98 <HAL_GPIO_WritePin>
}
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000004 	.word	0x20000004
 8002610:	080068a8 	.word	0x080068a8

08002614 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <BSP_LED_Toggle+0x2c>)
 8002622:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	4906      	ldr	r1, [pc, #24]	@ (8002644 <BSP_LED_Toggle+0x30>)
 800262a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800262e:	4619      	mov	r1, r3
 8002630:	4610      	mov	r0, r2
 8002632:	f000 fb4a 	bl	8002cca <HAL_GPIO_TogglePin>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000004 	.word	0x20000004
 8002644:	080068a8 	.word	0x080068a8

08002648 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800264c:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <HAL_Init+0x40>)
 8002652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002656:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a0a      	ldr	r2, [pc, #40]	@ (8002688 <HAL_Init+0x40>)
 800265e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002662:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002664:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <HAL_Init+0x40>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a07      	ldr	r2, [pc, #28]	@ (8002688 <HAL_Init+0x40>)
 800266a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800266e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002670:	2003      	movs	r0, #3
 8002672:	f000 f931 	bl	80028d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002676:	2000      	movs	r0, #0
 8002678:	f000 f808 	bl	800268c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267c:	f7fe fe22 	bl	80012c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40023c00 	.word	0x40023c00

0800268c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002694:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_InitTick+0x54>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_InitTick+0x58>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f93b 	bl	8002926 <HAL_SYSTICK_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00e      	b.n	80026d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b0f      	cmp	r3, #15
 80026be:	d80a      	bhi.n	80026d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026c8:	f000 f911 	bl	80028ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026cc:	4a06      	ldr	r2, [pc, #24]	@ (80026e8 <HAL_InitTick+0x5c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
 80026d4:	e000      	b.n	80026d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	20000000 	.word	0x20000000
 80026e4:	20000014 	.word	0x20000014
 80026e8:	20000010 	.word	0x20000010

080026ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <HAL_IncTick+0x20>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	461a      	mov	r2, r3
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_IncTick+0x24>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	4a04      	ldr	r2, [pc, #16]	@ (8002710 <HAL_IncTick+0x24>)
 80026fe:	6013      	str	r3, [r2, #0]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000014 	.word	0x20000014
 8002710:	20000680 	.word	0x20000680

08002714 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  return uwTick;
 8002718:	4b03      	ldr	r3, [pc, #12]	@ (8002728 <HAL_GetTick+0x14>)
 800271a:	681b      	ldr	r3, [r3, #0]
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000680 	.word	0x20000680

0800272c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002734:	f7ff ffee 	bl	8002714 <HAL_GetTick>
 8002738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002744:	d005      	beq.n	8002752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002746:	4b0a      	ldr	r3, [pc, #40]	@ (8002770 <HAL_Delay+0x44>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	4413      	add	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002752:	bf00      	nop
 8002754:	f7ff ffde 	bl	8002714 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	429a      	cmp	r2, r3
 8002762:	d8f7      	bhi.n	8002754 <HAL_Delay+0x28>
  {
  }
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000014 	.word	0x20000014

08002774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002784:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800279c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027a6:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <__NVIC_SetPriorityGrouping+0x44>)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	60d3      	str	r3, [r2, #12]
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c0:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <__NVIC_GetPriorityGrouping+0x18>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	f003 0307 	and.w	r3, r3, #7
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	6039      	str	r1, [r7, #0]
 80027e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db0a      	blt.n	8002802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	490c      	ldr	r1, [pc, #48]	@ (8002824 <__NVIC_SetPriority+0x4c>)
 80027f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f6:	0112      	lsls	r2, r2, #4
 80027f8:	b2d2      	uxtb	r2, r2
 80027fa:	440b      	add	r3, r1
 80027fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002800:	e00a      	b.n	8002818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4908      	ldr	r1, [pc, #32]	@ (8002828 <__NVIC_SetPriority+0x50>)
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	3b04      	subs	r3, #4
 8002810:	0112      	lsls	r2, r2, #4
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	440b      	add	r3, r1
 8002816:	761a      	strb	r2, [r3, #24]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000e100 	.word	0xe000e100
 8002828:	e000ed00 	.word	0xe000ed00

0800282c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	@ 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f1c3 0307 	rsb	r3, r3, #7
 8002846:	2b04      	cmp	r3, #4
 8002848:	bf28      	it	cs
 800284a:	2304      	movcs	r3, #4
 800284c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	3304      	adds	r3, #4
 8002852:	2b06      	cmp	r3, #6
 8002854:	d902      	bls.n	800285c <NVIC_EncodePriority+0x30>
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3b03      	subs	r3, #3
 800285a:	e000      	b.n	800285e <NVIC_EncodePriority+0x32>
 800285c:	2300      	movs	r3, #0
 800285e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43da      	mvns	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	401a      	ands	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002874:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	fa01 f303 	lsl.w	r3, r1, r3
 800287e:	43d9      	mvns	r1, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	4313      	orrs	r3, r2
         );
}
 8002886:	4618      	mov	r0, r3
 8002888:	3724      	adds	r7, #36	@ 0x24
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028a4:	d301      	bcc.n	80028aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a6:	2301      	movs	r3, #1
 80028a8:	e00f      	b.n	80028ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028aa:	4a0a      	ldr	r2, [pc, #40]	@ (80028d4 <SysTick_Config+0x40>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b2:	210f      	movs	r1, #15
 80028b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028b8:	f7ff ff8e 	bl	80027d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <SysTick_Config+0x40>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <SysTick_Config+0x40>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff ff47 	bl	8002774 <__NVIC_SetPriorityGrouping>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002900:	f7ff ff5c 	bl	80027bc <__NVIC_GetPriorityGrouping>
 8002904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	6978      	ldr	r0, [r7, #20]
 800290c:	f7ff ff8e 	bl	800282c <NVIC_EncodePriority>
 8002910:	4602      	mov	r2, r0
 8002912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002916:	4611      	mov	r1, r2
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff5d 	bl	80027d8 <__NVIC_SetPriority>
}
 800291e:	bf00      	nop
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff ffb0 	bl	8002894 <SysTick_Config>
 8002934:	4603      	mov	r3, r0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
	...

08002940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	@ 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002952:	2300      	movs	r3, #0
 8002954:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002956:	2300      	movs	r3, #0
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e177      	b.n	8002c4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800295c:	2201      	movs	r2, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	4013      	ands	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	429a      	cmp	r2, r3
 8002976:	f040 8166 	bne.w	8002c46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d005      	beq.n	8002992 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	2b02      	cmp	r3, #2
 8002990:	d130      	bne.n	80029f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4013      	ands	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029c8:	2201      	movs	r2, #1
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 0201 	and.w	r2, r3, #1
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0303 	and.w	r3, r3, #3
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d017      	beq.n	8002a30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d123      	bne.n	8002a84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	08da      	lsrs	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3208      	adds	r2, #8
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	220f      	movs	r2, #15
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	08da      	lsrs	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3208      	adds	r2, #8
 8002a7e:	69b9      	ldr	r1, [r7, #24]
 8002a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	2203      	movs	r2, #3
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0203 	and.w	r2, r3, #3
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 80c0 	beq.w	8002c46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b66      	ldr	r3, [pc, #408]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	4a65      	ldr	r2, [pc, #404]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002ad0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad6:	4b63      	ldr	r3, [pc, #396]	@ (8002c64 <HAL_GPIO_Init+0x324>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ae2:	4a61      	ldr	r2, [pc, #388]	@ (8002c68 <HAL_GPIO_Init+0x328>)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a58      	ldr	r2, [pc, #352]	@ (8002c6c <HAL_GPIO_Init+0x32c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d037      	beq.n	8002b7e <HAL_GPIO_Init+0x23e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a57      	ldr	r2, [pc, #348]	@ (8002c70 <HAL_GPIO_Init+0x330>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d031      	beq.n	8002b7a <HAL_GPIO_Init+0x23a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a56      	ldr	r2, [pc, #344]	@ (8002c74 <HAL_GPIO_Init+0x334>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d02b      	beq.n	8002b76 <HAL_GPIO_Init+0x236>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a55      	ldr	r2, [pc, #340]	@ (8002c78 <HAL_GPIO_Init+0x338>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d025      	beq.n	8002b72 <HAL_GPIO_Init+0x232>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a54      	ldr	r2, [pc, #336]	@ (8002c7c <HAL_GPIO_Init+0x33c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01f      	beq.n	8002b6e <HAL_GPIO_Init+0x22e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a53      	ldr	r2, [pc, #332]	@ (8002c80 <HAL_GPIO_Init+0x340>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d019      	beq.n	8002b6a <HAL_GPIO_Init+0x22a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a52      	ldr	r2, [pc, #328]	@ (8002c84 <HAL_GPIO_Init+0x344>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d013      	beq.n	8002b66 <HAL_GPIO_Init+0x226>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a51      	ldr	r2, [pc, #324]	@ (8002c88 <HAL_GPIO_Init+0x348>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00d      	beq.n	8002b62 <HAL_GPIO_Init+0x222>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a50      	ldr	r2, [pc, #320]	@ (8002c8c <HAL_GPIO_Init+0x34c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <HAL_GPIO_Init+0x21e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a4f      	ldr	r2, [pc, #316]	@ (8002c90 <HAL_GPIO_Init+0x350>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d101      	bne.n	8002b5a <HAL_GPIO_Init+0x21a>
 8002b56:	2309      	movs	r3, #9
 8002b58:	e012      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b5a:	230a      	movs	r3, #10
 8002b5c:	e010      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b5e:	2308      	movs	r3, #8
 8002b60:	e00e      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b62:	2307      	movs	r3, #7
 8002b64:	e00c      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b66:	2306      	movs	r3, #6
 8002b68:	e00a      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b6a:	2305      	movs	r3, #5
 8002b6c:	e008      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b6e:	2304      	movs	r3, #4
 8002b70:	e006      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b72:	2303      	movs	r3, #3
 8002b74:	e004      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e002      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_GPIO_Init+0x240>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f002 0203 	and.w	r2, r2, #3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4093      	lsls	r3, r2
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b90:	4935      	ldr	r1, [pc, #212]	@ (8002c68 <HAL_GPIO_Init+0x328>)
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	089b      	lsrs	r3, r3, #2
 8002b96:	3302      	adds	r3, #2
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bc2:	4a34      	ldr	r2, [pc, #208]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bc8:	4b32      	ldr	r3, [pc, #200]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	43db      	mvns	r3, r3
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bec:	4a29      	ldr	r2, [pc, #164]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bf2:	4b28      	ldr	r3, [pc, #160]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c16:	4a1f      	ldr	r2, [pc, #124]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <HAL_GPIO_Init+0x354>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	2b0f      	cmp	r3, #15
 8002c50:	f67f ae84 	bls.w	800295c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3724      	adds	r7, #36	@ 0x24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40013800 	.word	0x40013800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40020800 	.word	0x40020800
 8002c78:	40020c00 	.word	0x40020c00
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40021400 	.word	0x40021400
 8002c84:	40021800 	.word	0x40021800
 8002c88:	40021c00 	.word	0x40021c00
 8002c8c:	40022000 	.word	0x40022000
 8002c90:	40022400 	.word	0x40022400
 8002c94:	40013c00 	.word	0x40013c00

08002c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ca8:	787b      	ldrb	r3, [r7, #1]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cb4:	e003      	b.n	8002cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cb6:	887b      	ldrh	r3, [r7, #2]
 8002cb8:	041a      	lsls	r2, r3, #16
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	619a      	str	r2, [r3, #24]
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	041a      	lsls	r2, r3, #16
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	43d9      	mvns	r1, r3
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	400b      	ands	r3, r1
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e12b      	b.n	8002f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe faf4 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	@ 0x24
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d64:	f001 fa64 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 8002d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	4a81      	ldr	r2, [pc, #516]	@ (8002f74 <HAL_I2C_Init+0x274>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d807      	bhi.n	8002d84 <HAL_I2C_Init+0x84>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a80      	ldr	r2, [pc, #512]	@ (8002f78 <HAL_I2C_Init+0x278>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	bf94      	ite	ls
 8002d7c:	2301      	movls	r3, #1
 8002d7e:	2300      	movhi	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e006      	b.n	8002d92 <HAL_I2C_Init+0x92>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4a7d      	ldr	r2, [pc, #500]	@ (8002f7c <HAL_I2C_Init+0x27c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf94      	ite	ls
 8002d8c:	2301      	movls	r3, #1
 8002d8e:	2300      	movhi	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e0e7      	b.n	8002f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4a78      	ldr	r2, [pc, #480]	@ (8002f80 <HAL_I2C_Init+0x280>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	0c9b      	lsrs	r3, r3, #18
 8002da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	430a      	orrs	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f74 <HAL_I2C_Init+0x274>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d802      	bhi.n	8002dd4 <HAL_I2C_Init+0xd4>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	e009      	b.n	8002de8 <HAL_I2C_Init+0xe8>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	4a69      	ldr	r2, [pc, #420]	@ (8002f84 <HAL_I2C_Init+0x284>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	3301      	adds	r3, #1
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002dfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	495c      	ldr	r1, [pc, #368]	@ (8002f74 <HAL_I2C_Init+0x274>)
 8002e04:	428b      	cmp	r3, r1
 8002e06:	d819      	bhi.n	8002e3c <HAL_I2C_Init+0x13c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1e59      	subs	r1, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e1c:	400b      	ands	r3, r1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00a      	beq.n	8002e38 <HAL_I2C_Init+0x138>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e59      	subs	r1, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e36:	e051      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e04f      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d111      	bne.n	8002e68 <HAL_I2C_Init+0x168>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1e58      	subs	r0, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6859      	ldr	r1, [r3, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	440b      	add	r3, r1
 8002e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf0c      	ite	eq
 8002e60:	2301      	moveq	r3, #1
 8002e62:	2300      	movne	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e012      	b.n	8002e8e <HAL_I2C_Init+0x18e>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	1e58      	subs	r0, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	0099      	lsls	r1, r3, #2
 8002e78:	440b      	add	r3, r1
 8002e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_I2C_Init+0x196>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e022      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10e      	bne.n	8002ebc <HAL_I2C_Init+0x1bc>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1e58      	subs	r0, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	440b      	add	r3, r1
 8002eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002eba:	e00f      	b.n	8002edc <HAL_I2C_Init+0x1dc>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e58      	subs	r0, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6859      	ldr	r1, [r3, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	0099      	lsls	r1, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	6809      	ldr	r1, [r1, #0]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002f0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	6911      	ldr	r1, [r2, #16]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68d2      	ldr	r2, [r2, #12]
 8002f16:	4311      	orrs	r1, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	000186a0 	.word	0x000186a0
 8002f78:	001e847f 	.word	0x001e847f
 8002f7c:	003d08ff 	.word	0x003d08ff
 8002f80:	431bde83 	.word	0x431bde83
 8002f84:	10624dd3 	.word	0x10624dd3

08002f88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b088      	sub	sp, #32
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	461a      	mov	r2, r3
 8002f94:	460b      	mov	r3, r1
 8002f96:	817b      	strh	r3, [r7, #10]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff fbba 	bl	8002714 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	f040 80e0 	bne.w	8003170 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	2319      	movs	r3, #25
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	4970      	ldr	r1, [pc, #448]	@ (800317c <HAL_I2C_Master_Transmit+0x1f4>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f964 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e0d3      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d101      	bne.n	8002fd8 <HAL_I2C_Master_Transmit+0x50>
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	e0cc      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d007      	beq.n	8002ffe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2221      	movs	r2, #33	@ 0x21
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2210      	movs	r2, #16
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	893a      	ldrh	r2, [r7, #8]
 800302e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4a50      	ldr	r2, [pc, #320]	@ (8003180 <HAL_I2C_Master_Transmit+0x1f8>)
 800303e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	6a3a      	ldr	r2, [r7, #32]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 f89c 	bl	8003184 <I2C_MasterRequestWrite>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e08d      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003056:	2300      	movs	r3, #0
 8003058:	613b      	str	r3, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800306c:	e066      	b.n	800313c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	6a39      	ldr	r1, [r7, #32]
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fa22 	bl	80034bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00d      	beq.n	800309a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	2b04      	cmp	r3, #4
 8003084:	d107      	bne.n	8003096 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003094:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e06b      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	781a      	ldrb	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d11b      	bne.n	8003110 <HAL_I2C_Master_Transmit+0x188>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d017      	beq.n	8003110 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030e4:	781a      	ldrb	r2, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	6a39      	ldr	r1, [r7, #32]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fa19 	bl	800354c <I2C_WaitOnBTFFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00d      	beq.n	800313c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	2b04      	cmp	r3, #4
 8003126:	d107      	bne.n	8003138 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003136:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e01a      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d194      	bne.n	800306e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e000      	b.n	8003172 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003170:	2302      	movs	r3, #2
  }
}
 8003172:	4618      	mov	r0, r3
 8003174:	3718      	adds	r7, #24
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	00100002 	.word	0x00100002
 8003180:	ffff0000 	.word	0xffff0000

08003184 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af02      	add	r7, sp, #8
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	607a      	str	r2, [r7, #4]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	460b      	mov	r3, r1
 8003192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003198:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d006      	beq.n	80031ae <I2C_MasterRequestWrite+0x2a>
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d003      	beq.n	80031ae <I2C_MasterRequestWrite+0x2a>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031ac:	d108      	bne.n	80031c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e00b      	b.n	80031d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	2b12      	cmp	r3, #18
 80031c6:	d107      	bne.n	80031d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f84f 	bl	8003288 <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031fe:	d103      	bne.n	8003208 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003206:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e035      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003214:	d108      	bne.n	8003228 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003216:	897b      	ldrh	r3, [r7, #10]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	461a      	mov	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003224:	611a      	str	r2, [r3, #16]
 8003226:	e01b      	b.n	8003260 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003228:	897b      	ldrh	r3, [r7, #10]
 800322a:	11db      	asrs	r3, r3, #7
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0306 	and.w	r3, r3, #6
 8003232:	b2db      	uxtb	r3, r3
 8003234:	f063 030f 	orn	r3, r3, #15
 8003238:	b2da      	uxtb	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	490e      	ldr	r1, [pc, #56]	@ (8003280 <I2C_MasterRequestWrite+0xfc>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f898 	bl	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e010      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	b2da      	uxtb	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	4907      	ldr	r1, [pc, #28]	@ (8003284 <I2C_MasterRequestWrite+0x100>)
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f888 	bl	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	00010008 	.word	0x00010008
 8003284:	00010002 	.word	0x00010002

08003288 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003298:	e048      	b.n	800332c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032a0:	d044      	beq.n	800332c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7ff fa37 	bl	8002714 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d139      	bne.n	800332c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	0c1b      	lsrs	r3, r3, #16
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d10d      	bne.n	80032de <I2C_WaitOnFlagUntilTimeout+0x56>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	e00c      	b.n	80032f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	43da      	mvns	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4013      	ands	r3, r2
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	bf0c      	ite	eq
 80032f0:	2301      	moveq	r3, #1
 80032f2:	2300      	movne	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d116      	bne.n	800332c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e023      	b.n	8003374 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	0c1b      	lsrs	r3, r3, #16
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b01      	cmp	r3, #1
 8003334:	d10d      	bne.n	8003352 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	43da      	mvns	r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4013      	ands	r3, r2
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf0c      	ite	eq
 8003348:	2301      	moveq	r3, #1
 800334a:	2300      	movne	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	461a      	mov	r2, r3
 8003350:	e00c      	b.n	800336c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	43da      	mvns	r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	429a      	cmp	r2, r3
 8003370:	d093      	beq.n	800329a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800338a:	e071      	b.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800339a:	d123      	bne.n	80033e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2220      	movs	r2, #32
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d0:	f043 0204 	orr.w	r2, r3, #4
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e067      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033ea:	d041      	beq.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7ff f992 	bl	8002714 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d136      	bne.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	0c1b      	lsrs	r3, r3, #16
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b01      	cmp	r3, #1
 800340a:	d10c      	bne.n	8003426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	43da      	mvns	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4013      	ands	r3, r2
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	e00b      	b.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	43da      	mvns	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4013      	ands	r3, r2
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	bf14      	ite	ne
 8003438:	2301      	movne	r3, #1
 800343a:	2300      	moveq	r3, #0
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d016      	beq.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	f043 0220 	orr.w	r2, r3, #32
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e021      	b.n	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	0c1b      	lsrs	r3, r3, #16
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d10c      	bne.n	8003494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	43da      	mvns	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	4013      	ands	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	e00b      	b.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4013      	ands	r3, r2
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f47f af6d 	bne.w	800338c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c8:	e034      	b.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f886 	bl	80035dc <I2C_IsAcknowledgeFailed>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e034      	b.n	8003544 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034e0:	d028      	beq.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7ff f917 	bl	8002714 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11d      	bne.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003502:	2b80      	cmp	r3, #128	@ 0x80
 8003504:	d016      	beq.n	8003534 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800353e:	2b80      	cmp	r3, #128	@ 0x80
 8003540:	d1c3      	bne.n	80034ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003558:	e034      	b.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f83e 	bl	80035dc <I2C_IsAcknowledgeFailed>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e034      	b.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003570:	d028      	beq.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7ff f8cf 	bl	8002714 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d11d      	bne.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d016      	beq.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e007      	b.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d1c3      	bne.n	800355a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f2:	d11b      	bne.n	800362c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	f043 0204 	orr.w	r2, r3, #4
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b20      	cmp	r3, #32
 800364e:	d129      	bne.n	80036a4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	@ 0x24
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0210 	bic.w	r2, r2, #16
 8003676:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b085      	sub	sp, #20
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
 80036ba:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80036bc:	2300      	movs	r3, #0
 80036be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d12a      	bne.n	8003722 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	@ 0x24
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ea:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80036ec:	89fb      	ldrh	r3, [r7, #14]
 80036ee:	f023 030f 	bic.w	r3, r3, #15
 80036f2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	89fa      	ldrh	r2, [r7, #14]
 8003704:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	e000      	b.n	8003724 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003722:	2302      	movs	r3, #2
  }
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af02      	add	r7, sp, #8
 8003736:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d101      	bne.n	8003742 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e101      	b.n	8003946 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fd fefb 	bl	8001558 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2203      	movs	r2, #3
 8003766:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003770:	d102      	bne.n	8003778 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f002 fc91 	bl	80060a4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7c1a      	ldrb	r2, [r3, #16]
 800378a:	f88d 2000 	strb.w	r2, [sp]
 800378e:	3304      	adds	r3, #4
 8003790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003792:	f002 fc23 	bl	8005fdc <USB_CoreInit>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0ce      	b.n	8003946 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2100      	movs	r1, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	f002 fc89 	bl	80060c6 <USB_SetCurrentMode>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0bf      	b.n	8003946 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	e04a      	b.n	8003862 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037cc:	7bfa      	ldrb	r2, [r7, #15]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	4413      	add	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	3315      	adds	r3, #21
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037e0:	7bfa      	ldrb	r2, [r7, #15]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3314      	adds	r3, #20
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80037f4:	7bfa      	ldrb	r2, [r7, #15]
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	b298      	uxth	r0, r3
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	4413      	add	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	332e      	adds	r3, #46	@ 0x2e
 8003808:	4602      	mov	r2, r0
 800380a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800380c:	7bfa      	ldrb	r2, [r7, #15]
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	4613      	mov	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	440b      	add	r3, r1
 800381a:	3318      	adds	r3, #24
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003820:	7bfa      	ldrb	r2, [r7, #15]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	331c      	adds	r3, #28
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003834:	7bfa      	ldrb	r2, [r7, #15]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4413      	add	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3320      	adds	r3, #32
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	3324      	adds	r3, #36	@ 0x24
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	3301      	adds	r3, #1
 8003860:	73fb      	strb	r3, [r7, #15]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	791b      	ldrb	r3, [r3, #4]
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	429a      	cmp	r2, r3
 800386a:	d3af      	bcc.n	80037cc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e044      	b.n	80038fc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003872:	7bfa      	ldrb	r2, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003888:	7bfa      	ldrb	r2, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	4613      	mov	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800389a:	7bfa      	ldrb	r2, [r7, #15]
 800389c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800389e:	7bfa      	ldrb	r2, [r7, #15]
 80038a0:	6879      	ldr	r1, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4413      	add	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038b0:	2200      	movs	r2, #0
 80038b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80038dc:	2200      	movs	r2, #0
 80038de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	3301      	adds	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	791b      	ldrb	r3, [r3, #4]
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	429a      	cmp	r2, r3
 8003904:	d3b5      	bcc.n	8003872 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	7c1a      	ldrb	r2, [r3, #16]
 800390e:	f88d 2000 	strb.w	r2, [sp]
 8003912:	3304      	adds	r3, #4
 8003914:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003916:	f002 fc23 	bl	8006160 <USB_DevInit>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d005      	beq.n	800392c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e00c      	b.n	8003946 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f002 fdeb 	bl	800651a <USB_DevDisconnect>

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e267      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d075      	beq.n	8003a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800396e:	4b88      	ldr	r3, [pc, #544]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b04      	cmp	r3, #4
 8003978:	d00c      	beq.n	8003994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800397a:	4b85      	ldr	r3, [pc, #532]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003982:	2b08      	cmp	r3, #8
 8003984:	d112      	bne.n	80039ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003986:	4b82      	ldr	r3, [pc, #520]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800398e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003992:	d10b      	bne.n	80039ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	4b7e      	ldr	r3, [pc, #504]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d05b      	beq.n	8003a58 <HAL_RCC_OscConfig+0x108>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d157      	bne.n	8003a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e242      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039b4:	d106      	bne.n	80039c4 <HAL_RCC_OscConfig+0x74>
 80039b6:	4b76      	ldr	r3, [pc, #472]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a75      	ldr	r2, [pc, #468]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	e01d      	b.n	8003a00 <HAL_RCC_OscConfig+0xb0>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039cc:	d10c      	bne.n	80039e8 <HAL_RCC_OscConfig+0x98>
 80039ce:	4b70      	ldr	r3, [pc, #448]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6f      	ldr	r2, [pc, #444]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	4b6d      	ldr	r3, [pc, #436]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6c      	ldr	r2, [pc, #432]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	e00b      	b.n	8003a00 <HAL_RCC_OscConfig+0xb0>
 80039e8:	4b69      	ldr	r3, [pc, #420]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a68      	ldr	r2, [pc, #416]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b66      	ldr	r3, [pc, #408]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a65      	ldr	r2, [pc, #404]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 80039fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d013      	beq.n	8003a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fe84 	bl	8002714 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fe fe80 	bl	8002714 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	@ 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e207      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a22:	4b5b      	ldr	r3, [pc, #364]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0xc0>
 8003a2e:	e014      	b.n	8003a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fe fe70 	bl	8002714 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fe fe6c 	bl	8002714 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	@ 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e1f3      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4a:	4b51      	ldr	r3, [pc, #324]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <HAL_RCC_OscConfig+0xe8>
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d063      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a66:	4b4a      	ldr	r3, [pc, #296]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a72:	4b47      	ldr	r3, [pc, #284]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d11c      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a7e:	4b44      	ldr	r3, [pc, #272]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d116      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8a:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x152>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e1c7      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa2:	4b3b      	ldr	r3, [pc, #236]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4937      	ldr	r1, [pc, #220]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	e03a      	b.n	8003b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d020      	beq.n	8003b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac0:	4b34      	ldr	r3, [pc, #208]	@ (8003b94 <HAL_RCC_OscConfig+0x244>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fe25 	bl	8002714 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ace:	f7fe fe21 	bl	8002714 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e1a8      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0f0      	beq.n	8003ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aec:	4b28      	ldr	r3, [pc, #160]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4925      	ldr	r1, [pc, #148]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]
 8003b00:	e015      	b.n	8003b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b02:	4b24      	ldr	r3, [pc, #144]	@ (8003b94 <HAL_RCC_OscConfig+0x244>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fe fe04 	bl	8002714 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b10:	f7fe fe00 	bl	8002714 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e187      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0302 	and.w	r3, r3, #2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f0      	bne.n	8003b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d036      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b42:	4b15      	ldr	r3, [pc, #84]	@ (8003b98 <HAL_RCC_OscConfig+0x248>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fe fde4 	bl	8002714 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b50:	f7fe fde0 	bl	8002714 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e167      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b62:	4b0b      	ldr	r3, [pc, #44]	@ (8003b90 <HAL_RCC_OscConfig+0x240>)
 8003b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x200>
 8003b6e:	e01b      	b.n	8003ba8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b70:	4b09      	ldr	r3, [pc, #36]	@ (8003b98 <HAL_RCC_OscConfig+0x248>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b76:	f7fe fdcd 	bl	8002714 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b7c:	e00e      	b.n	8003b9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b7e:	f7fe fdc9 	bl	8002714 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d907      	bls.n	8003b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e150      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
 8003b90:	40023800 	.word	0x40023800
 8003b94:	42470000 	.word	0x42470000
 8003b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b9c:	4b88      	ldr	r3, [pc, #544]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003b9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1ea      	bne.n	8003b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0304 	and.w	r3, r3, #4
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 8097 	beq.w	8003ce4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bba:	4b81      	ldr	r3, [pc, #516]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10f      	bne.n	8003be6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	4b7d      	ldr	r3, [pc, #500]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	4a7c      	ldr	r2, [pc, #496]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bd6:	4b7a      	ldr	r3, [pc, #488]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	60bb      	str	r3, [r7, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003be2:	2301      	movs	r3, #1
 8003be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003be6:	4b77      	ldr	r3, [pc, #476]	@ (8003dc4 <HAL_RCC_OscConfig+0x474>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d118      	bne.n	8003c24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bf2:	4b74      	ldr	r3, [pc, #464]	@ (8003dc4 <HAL_RCC_OscConfig+0x474>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a73      	ldr	r2, [pc, #460]	@ (8003dc4 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bfe:	f7fe fd89 	bl	8002714 <HAL_GetTick>
 8003c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c06:	f7fe fd85 	bl	8002714 <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e10c      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c18:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc4 <HAL_RCC_OscConfig+0x474>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0f0      	beq.n	8003c06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d106      	bne.n	8003c3a <HAL_RCC_OscConfig+0x2ea>
 8003c2c:	4b64      	ldr	r3, [pc, #400]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c30:	4a63      	ldr	r2, [pc, #396]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c38:	e01c      	b.n	8003c74 <HAL_RCC_OscConfig+0x324>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2b05      	cmp	r3, #5
 8003c40:	d10c      	bne.n	8003c5c <HAL_RCC_OscConfig+0x30c>
 8003c42:	4b5f      	ldr	r3, [pc, #380]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	4a5e      	ldr	r2, [pc, #376]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c48:	f043 0304 	orr.w	r3, r3, #4
 8003c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c4e:	4b5c      	ldr	r3, [pc, #368]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c52:	4a5b      	ldr	r2, [pc, #364]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c54:	f043 0301 	orr.w	r3, r3, #1
 8003c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0x324>
 8003c5c:	4b58      	ldr	r3, [pc, #352]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	4a57      	ldr	r2, [pc, #348]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c62:	f023 0301 	bic.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c68:	4b55      	ldr	r3, [pc, #340]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	4a54      	ldr	r2, [pc, #336]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	f023 0304 	bic.w	r3, r3, #4
 8003c72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7c:	f7fe fd4a 	bl	8002714 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c82:	e00a      	b.n	8003c9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c84:	f7fe fd46 	bl	8002714 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e0cb      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9a:	4b49      	ldr	r3, [pc, #292]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0ee      	beq.n	8003c84 <HAL_RCC_OscConfig+0x334>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca8:	f7fe fd34 	bl	8002714 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cae:	e00a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f7fe fd30 	bl	8002714 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d901      	bls.n	8003cc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0b5      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1ee      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d105      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd8:	4b39      	ldr	r3, [pc, #228]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	4a38      	ldr	r2, [pc, #224]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ce2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 80a1 	beq.w	8003e30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cee:	4b34      	ldr	r3, [pc, #208]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d05c      	beq.n	8003db4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d141      	bne.n	8003d86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	4b31      	ldr	r3, [pc, #196]	@ (8003dc8 <HAL_RCC_OscConfig+0x478>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d08:	f7fe fd04 	bl	8002714 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d10:	f7fe fd00 	bl	8002714 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e087      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d22:	4b27      	ldr	r3, [pc, #156]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	019b      	lsls	r3, r3, #6
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d44:	085b      	lsrs	r3, r3, #1
 8003d46:	3b01      	subs	r3, #1
 8003d48:	041b      	lsls	r3, r3, #16
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	061b      	lsls	r3, r3, #24
 8003d52:	491b      	ldr	r1, [pc, #108]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d58:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <HAL_RCC_OscConfig+0x478>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5e:	f7fe fcd9 	bl	8002714 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d66:	f7fe fcd5 	bl	8002714 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e05c      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d78:	4b11      	ldr	r3, [pc, #68]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCC_OscConfig+0x416>
 8003d84:	e054      	b.n	8003e30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <HAL_RCC_OscConfig+0x478>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fcc2 	bl	8002714 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fe fcbe 	bl	8002714 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e045      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	4b06      	ldr	r3, [pc, #24]	@ (8003dc0 <HAL_RCC_OscConfig+0x470>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x444>
 8003db2:	e03d      	b.n	8003e30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d107      	bne.n	8003dcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e038      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	40007000 	.word	0x40007000
 8003dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e3c <HAL_RCC_OscConfig+0x4ec>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d028      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d121      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d11a      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d111      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	085b      	lsrs	r3, r3, #1
 8003e14:	3b01      	subs	r3, #1
 8003e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d107      	bne.n	8003e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40023800 	.word	0x40023800

08003e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0cc      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e54:	4b68      	ldr	r3, [pc, #416]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d90c      	bls.n	8003e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e62:	4b65      	ldr	r3, [pc, #404]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e6a:	4b63      	ldr	r3, [pc, #396]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 030f 	and.w	r3, r3, #15
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d001      	beq.n	8003e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0b8      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d020      	beq.n	8003eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d005      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e94:	4b59      	ldr	r3, [pc, #356]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a58      	ldr	r2, [pc, #352]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003eac:	4b53      	ldr	r3, [pc, #332]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4a52      	ldr	r2, [pc, #328]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b50      	ldr	r3, [pc, #320]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	494d      	ldr	r1, [pc, #308]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d044      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d107      	bne.n	8003eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	4b47      	ldr	r3, [pc, #284]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d119      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e07f      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efa:	2b03      	cmp	r3, #3
 8003efc:	d107      	bne.n	8003f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003efe:	4b3f      	ldr	r3, [pc, #252]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e06f      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e067      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f1e:	4b37      	ldr	r3, [pc, #220]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f023 0203 	bic.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4934      	ldr	r1, [pc, #208]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f30:	f7fe fbf0 	bl	8002714 <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f38:	f7fe fbec 	bl	8002714 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e04f      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 020c 	and.w	r2, r3, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1eb      	bne.n	8003f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f60:	4b25      	ldr	r3, [pc, #148]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 030f 	and.w	r3, r3, #15
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d20c      	bcs.n	8003f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6e:	4b22      	ldr	r3, [pc, #136]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f76:	4b20      	ldr	r3, [pc, #128]	@ (8003ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e032      	b.n	8003fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0304 	and.w	r3, r3, #4
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d008      	beq.n	8003fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f94:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	4916      	ldr	r1, [pc, #88]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fb2:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	490e      	ldr	r1, [pc, #56]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fc6:	f000 f821 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8003ffc <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	490a      	ldr	r1, [pc, #40]	@ (8004000 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd8:	5ccb      	ldrb	r3, [r1, r3]
 8003fda:	fa22 f303 	lsr.w	r3, r2, r3
 8003fde:	4a09      	ldr	r2, [pc, #36]	@ (8004004 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fe2:	4b09      	ldr	r3, [pc, #36]	@ (8004008 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fb50 	bl	800268c <HAL_InitTick>

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023c00 	.word	0x40023c00
 8003ffc:	40023800 	.word	0x40023800
 8004000:	08006888 	.word	0x08006888
 8004004:	20000000 	.word	0x20000000
 8004008:	20000010 	.word	0x20000010

0800400c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800400c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004010:	b094      	sub	sp, #80	@ 0x50
 8004012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004014:	2300      	movs	r3, #0
 8004016:	647b      	str	r3, [r7, #68]	@ 0x44
 8004018:	2300      	movs	r3, #0
 800401a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800401c:	2300      	movs	r3, #0
 800401e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004020:	2300      	movs	r3, #0
 8004022:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004024:	4b79      	ldr	r3, [pc, #484]	@ (800420c <HAL_RCC_GetSysClockFreq+0x200>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f003 030c 	and.w	r3, r3, #12
 800402c:	2b08      	cmp	r3, #8
 800402e:	d00d      	beq.n	800404c <HAL_RCC_GetSysClockFreq+0x40>
 8004030:	2b08      	cmp	r3, #8
 8004032:	f200 80e1 	bhi.w	80041f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x34>
 800403a:	2b04      	cmp	r3, #4
 800403c:	d003      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x3a>
 800403e:	e0db      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004040:	4b73      	ldr	r3, [pc, #460]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x204>)
 8004042:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004044:	e0db      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004046:	4b73      	ldr	r3, [pc, #460]	@ (8004214 <HAL_RCC_GetSysClockFreq+0x208>)
 8004048:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800404a:	e0d8      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800404c:	4b6f      	ldr	r3, [pc, #444]	@ (800420c <HAL_RCC_GetSysClockFreq+0x200>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004054:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004056:	4b6d      	ldr	r3, [pc, #436]	@ (800420c <HAL_RCC_GetSysClockFreq+0x200>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d063      	beq.n	800412a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004062:	4b6a      	ldr	r3, [pc, #424]	@ (800420c <HAL_RCC_GetSysClockFreq+0x200>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	2200      	movs	r2, #0
 800406a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800406c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800406e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004074:	633b      	str	r3, [r7, #48]	@ 0x30
 8004076:	2300      	movs	r3, #0
 8004078:	637b      	str	r3, [r7, #52]	@ 0x34
 800407a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800407e:	4622      	mov	r2, r4
 8004080:	462b      	mov	r3, r5
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f04f 0100 	mov.w	r1, #0
 800408a:	0159      	lsls	r1, r3, #5
 800408c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004090:	0150      	lsls	r0, r2, #5
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	4621      	mov	r1, r4
 8004098:	1a51      	subs	r1, r2, r1
 800409a:	6139      	str	r1, [r7, #16]
 800409c:	4629      	mov	r1, r5
 800409e:	eb63 0301 	sbc.w	r3, r3, r1
 80040a2:	617b      	str	r3, [r7, #20]
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040b0:	4659      	mov	r1, fp
 80040b2:	018b      	lsls	r3, r1, #6
 80040b4:	4651      	mov	r1, sl
 80040b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ba:	4651      	mov	r1, sl
 80040bc:	018a      	lsls	r2, r1, #6
 80040be:	4651      	mov	r1, sl
 80040c0:	ebb2 0801 	subs.w	r8, r2, r1
 80040c4:	4659      	mov	r1, fp
 80040c6:	eb63 0901 	sbc.w	r9, r3, r1
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040de:	4690      	mov	r8, r2
 80040e0:	4699      	mov	r9, r3
 80040e2:	4623      	mov	r3, r4
 80040e4:	eb18 0303 	adds.w	r3, r8, r3
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	462b      	mov	r3, r5
 80040ec:	eb49 0303 	adc.w	r3, r9, r3
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040fe:	4629      	mov	r1, r5
 8004100:	024b      	lsls	r3, r1, #9
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004108:	4621      	mov	r1, r4
 800410a:	024a      	lsls	r2, r1, #9
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004112:	2200      	movs	r2, #0
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800411c:	f7fc fc8c 	bl	8000a38 <__aeabi_uldivmod>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4613      	mov	r3, r2
 8004126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004128:	e058      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412a:	4b38      	ldr	r3, [pc, #224]	@ (800420c <HAL_RCC_GetSysClockFreq+0x200>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	099b      	lsrs	r3, r3, #6
 8004130:	2200      	movs	r2, #0
 8004132:	4618      	mov	r0, r3
 8004134:	4611      	mov	r1, r2
 8004136:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800413a:	623b      	str	r3, [r7, #32]
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004140:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004144:	4642      	mov	r2, r8
 8004146:	464b      	mov	r3, r9
 8004148:	f04f 0000 	mov.w	r0, #0
 800414c:	f04f 0100 	mov.w	r1, #0
 8004150:	0159      	lsls	r1, r3, #5
 8004152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004156:	0150      	lsls	r0, r2, #5
 8004158:	4602      	mov	r2, r0
 800415a:	460b      	mov	r3, r1
 800415c:	4641      	mov	r1, r8
 800415e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004162:	4649      	mov	r1, r9
 8004164:	eb63 0b01 	sbc.w	fp, r3, r1
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004174:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004178:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800417c:	ebb2 040a 	subs.w	r4, r2, sl
 8004180:	eb63 050b 	sbc.w	r5, r3, fp
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	00eb      	lsls	r3, r5, #3
 800418e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004192:	00e2      	lsls	r2, r4, #3
 8004194:	4614      	mov	r4, r2
 8004196:	461d      	mov	r5, r3
 8004198:	4643      	mov	r3, r8
 800419a:	18e3      	adds	r3, r4, r3
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	464b      	mov	r3, r9
 80041a0:	eb45 0303 	adc.w	r3, r5, r3
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041b2:	4629      	mov	r1, r5
 80041b4:	028b      	lsls	r3, r1, #10
 80041b6:	4621      	mov	r1, r4
 80041b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041bc:	4621      	mov	r1, r4
 80041be:	028a      	lsls	r2, r1, #10
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041c6:	2200      	movs	r2, #0
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	61fa      	str	r2, [r7, #28]
 80041cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d0:	f7fc fc32 	bl	8000a38 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4613      	mov	r3, r2
 80041da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <HAL_RCC_GetSysClockFreq+0x200>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	3301      	adds	r3, #1
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80041ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80041ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041f6:	e002      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_RCC_GetSysClockFreq+0x204>)
 80041fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80041fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004200:	4618      	mov	r0, r3
 8004202:	3750      	adds	r7, #80	@ 0x50
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	00f42400 	.word	0x00f42400
 8004214:	007a1200 	.word	0x007a1200

08004218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800421c:	4b03      	ldr	r3, [pc, #12]	@ (800422c <HAL_RCC_GetHCLKFreq+0x14>)
 800421e:	681b      	ldr	r3, [r3, #0]
}
 8004220:	4618      	mov	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	20000000 	.word	0x20000000

08004230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004234:	f7ff fff0 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004238:	4602      	mov	r2, r0
 800423a:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	0a9b      	lsrs	r3, r3, #10
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	4903      	ldr	r1, [pc, #12]	@ (8004254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004246:	5ccb      	ldrb	r3, [r1, r3]
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40023800 	.word	0x40023800
 8004254:	08006898 	.word	0x08006898

08004258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800425c:	f7ff ffdc 	bl	8004218 <HAL_RCC_GetHCLKFreq>
 8004260:	4602      	mov	r2, r0
 8004262:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	0b5b      	lsrs	r3, r3, #13
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	4903      	ldr	r1, [pc, #12]	@ (800427c <HAL_RCC_GetPCLK2Freq+0x24>)
 800426e:	5ccb      	ldrb	r3, [r1, r3]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004274:	4618      	mov	r0, r3
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40023800 	.word	0x40023800
 800427c:	08006898 	.word	0x08006898

08004280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d075      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042b4:	4b91      	ldr	r3, [pc, #580]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80042ba:	f7fe fa2b 	bl	8002714 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80042c2:	f7fe fa27 	bl	8002714 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e189      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042d4:	4b8a      	ldr	r3, [pc, #552]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	019a      	lsls	r2, r3, #6
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	071b      	lsls	r3, r3, #28
 80042f8:	4981      	ldr	r1, [pc, #516]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01f      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800430c:	4b7c      	ldr	r3, [pc, #496]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800430e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004312:	0f1b      	lsrs	r3, r3, #28
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	019a      	lsls	r2, r3, #6
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	061b      	lsls	r3, r3, #24
 8004326:	431a      	orrs	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	071b      	lsls	r3, r3, #28
 800432c:	4974      	ldr	r1, [pc, #464]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004334:	4b72      	ldr	r3, [pc, #456]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800433a:	f023 021f 	bic.w	r2, r3, #31
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	3b01      	subs	r3, #1
 8004344:	496e      	ldr	r1, [pc, #440]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	019a      	lsls	r2, r3, #6
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	431a      	orrs	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	071b      	lsls	r3, r3, #28
 800436c:	4964      	ldr	r1, [pc, #400]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004374:	4b61      	ldr	r3, [pc, #388]	@ (80044fc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004376:	2201      	movs	r2, #1
 8004378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800437a:	f7fe f9cb 	bl	8002714 <HAL_GetTick>
 800437e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004380:	e008      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004382:	f7fe f9c7 	bl	8002714 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e129      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004394:	4b5a      	ldr	r3, [pc, #360]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d105      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d079      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043b8:	4b52      	ldr	r3, [pc, #328]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80043be:	f7fe f9a9 	bl	8002714 <HAL_GetTick>
 80043c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80043c6:	f7fe f9a5 	bl	8002714 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e107      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043d8:	4b49      	ldr	r3, [pc, #292]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80043e4:	d0ef      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d020      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043f2:	4b43      	ldr	r3, [pc, #268]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f8:	0f1b      	lsrs	r3, r3, #28
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	019a      	lsls	r2, r3, #6
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	061b      	lsls	r3, r3, #24
 800440c:	431a      	orrs	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	071b      	lsls	r3, r3, #28
 8004412:	493b      	ldr	r1, [pc, #236]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800441a:	4b39      	ldr	r3, [pc, #228]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800441c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004420:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	3b01      	subs	r3, #1
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	4934      	ldr	r1, [pc, #208]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800442e:	4313      	orrs	r3, r2
 8004430:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01e      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004440:	4b2f      	ldr	r3, [pc, #188]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004446:	0e1b      	lsrs	r3, r3, #24
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	019a      	lsls	r2, r3, #6
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	061b      	lsls	r3, r3, #24
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	071b      	lsls	r3, r3, #28
 8004460:	4927      	ldr	r1, [pc, #156]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004468:	4b25      	ldr	r3, [pc, #148]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800446a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800446e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004476:	4922      	ldr	r1, [pc, #136]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800447e:	4b21      	ldr	r3, [pc, #132]	@ (8004504 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004480:	2201      	movs	r2, #1
 8004482:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004484:	f7fe f946 	bl	8002714 <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800448c:	f7fe f942 	bl	8002714 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e0a4      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800449e:	4b18      	ldr	r3, [pc, #96]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044aa:	d1ef      	bne.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 808b 	beq.w	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	4b10      	ldr	r3, [pc, #64]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	4a0f      	ldr	r2, [pc, #60]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	60fb      	str	r3, [r7, #12]
 80044d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a0b      	ldr	r2, [pc, #44]	@ (8004508 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80044dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044e2:	f7fe f917 	bl	8002714 <HAL_GetTick>
 80044e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044e8:	e010      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044ea:	f7fe f913 	bl	8002714 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d909      	bls.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e075      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80044fc:	42470068 	.word	0x42470068
 8004500:	40023800 	.word	0x40023800
 8004504:	42470070 	.word	0x42470070
 8004508:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800450c:	4b38      	ldr	r3, [pc, #224]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0e8      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004518:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004520:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d02f      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	429a      	cmp	r2, r3
 8004534:	d028      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004536:	4b2f      	ldr	r3, [pc, #188]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004540:	4b2d      	ldr	r3, [pc, #180]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004542:	2201      	movs	r2, #1
 8004544:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004546:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800454c:	4a29      	ldr	r2, [pc, #164]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004552:	4b28      	ldr	r3, [pc, #160]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b01      	cmp	r3, #1
 800455c:	d114      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800455e:	f7fe f8d9 	bl	8002714 <HAL_GetTick>
 8004562:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004564:	e00a      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004566:	f7fe f8d5 	bl	8002714 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004574:	4293      	cmp	r3, r2
 8004576:	d901      	bls.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e035      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457c:	4b1d      	ldr	r3, [pc, #116]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800457e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0ee      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004590:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004594:	d10d      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004596:	4b17      	ldr	r3, [pc, #92]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80045a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045aa:	4912      	ldr	r1, [pc, #72]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]
 80045b0:	e005      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80045b2:	4b10      	ldr	r3, [pc, #64]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	4a0f      	ldr	r2, [pc, #60]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045b8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045bc:	6093      	str	r3, [r2, #8]
 80045be:	4b0d      	ldr	r3, [pc, #52]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ca:	490a      	ldr	r1, [pc, #40]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d004      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80045e2:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80045e4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40007000 	.word	0x40007000
 80045f4:	40023800 	.word	0x40023800
 80045f8:	42470e40 	.word	0x42470e40
 80045fc:	424711e0 	.word	0x424711e0

08004600 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e073      	b.n	80046fe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	7f5b      	ldrb	r3, [r3, #29]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d105      	bne.n	800462c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fc febc 	bl	80013a4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0310 	and.w	r3, r3, #16
 800463c:	2b10      	cmp	r3, #16
 800463e:	d055      	beq.n	80046ec <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	22ca      	movs	r2, #202	@ 0xca
 8004646:	625a      	str	r2, [r3, #36]	@ 0x24
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2253      	movs	r2, #83	@ 0x53
 800464e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 fa49 	bl	8004ae8 <RTC_EnterInitMode>
 8004656:	4603      	mov	r3, r0
 8004658:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d12c      	bne.n	80046ba <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800466e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004672:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6899      	ldr	r1, [r3, #8]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685a      	ldr	r2, [r3, #4]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68d2      	ldr	r2, [r2, #12]
 800469a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6919      	ldr	r1, [r3, #16]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	041a      	lsls	r2, r3, #16
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa50 	bl	8004b56 <RTC_ExitInitMode>
 80046b6:	4603      	mov	r3, r0
 80046b8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d110      	bne.n	80046e2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699a      	ldr	r2, [r3, #24]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	22ff      	movs	r2, #255	@ 0xff
 80046e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80046ea:	e001      	b.n	80046f0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004706:	b590      	push	{r4, r7, lr}
 8004708:	b087      	sub	sp, #28
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	7f1b      	ldrb	r3, [r3, #28]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_RTC_SetTime+0x1c>
 800471e:	2302      	movs	r3, #2
 8004720:	e087      	b.n	8004832 <HAL_RTC_SetTime+0x12c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2202      	movs	r2, #2
 800472c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d126      	bne.n	8004782 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d102      	bne.n	8004748 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f000 fa27 	bl	8004ba0 <RTC_ByteToBcd2>
 8004752:	4603      	mov	r3, r0
 8004754:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fa20 	bl	8004ba0 <RTC_ByteToBcd2>
 8004760:	4603      	mov	r3, r0
 8004762:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004764:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	789b      	ldrb	r3, [r3, #2]
 800476a:	4618      	mov	r0, r3
 800476c:	f000 fa18 	bl	8004ba0 <RTC_ByteToBcd2>
 8004770:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004772:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	78db      	ldrb	r3, [r3, #3]
 800477a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	e018      	b.n	80047b4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478c:	2b00      	cmp	r3, #0
 800478e:	d102      	bne.n	8004796 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2200      	movs	r2, #0
 8004794:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	785b      	ldrb	r3, [r3, #1]
 80047a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80047a2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80047a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	78db      	ldrb	r3, [r3, #3]
 80047ae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	22ca      	movs	r2, #202	@ 0xca
 80047ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2253      	movs	r2, #83	@ 0x53
 80047c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f98f 	bl	8004ae8 <RTC_EnterInitMode>
 80047ca:	4603      	mov	r3, r0
 80047cc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80047ce:	7cfb      	ldrb	r3, [r7, #19]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d120      	bne.n	8004816 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80047de:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80047e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6899      	ldr	r1, [r3, #8]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	431a      	orrs	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f9a2 	bl	8004b56 <RTC_ExitInitMode>
 8004812:	4603      	mov	r3, r0
 8004814:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004816:	7cfb      	ldrb	r3, [r7, #19]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	22ff      	movs	r2, #255	@ 0xff
 8004828:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]

  return status;
 8004830:	7cfb      	ldrb	r3, [r7, #19]
}
 8004832:	4618      	mov	r0, r3
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	bd90      	pop	{r4, r7, pc}

0800483a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b086      	sub	sp, #24
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800486c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004870:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	b2db      	uxtb	r3, r3
 8004878:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800487c:	b2da      	uxtb	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	0a1b      	lsrs	r3, r3, #8
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800489a:	b2da      	uxtb	r2, r3
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	0d9b      	lsrs	r3, r3, #22
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11a      	bne.n	80048ec <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 f98e 	bl	8004bdc <RTC_Bcd2ToByte>
 80048c0:	4603      	mov	r3, r0
 80048c2:	461a      	mov	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f985 	bl	8004bdc <RTC_Bcd2ToByte>
 80048d2:	4603      	mov	r3, r0
 80048d4:	461a      	mov	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	789b      	ldrb	r3, [r3, #2]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f97c 	bl	8004bdc <RTC_Bcd2ToByte>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048f6:	b590      	push	{r4, r7, lr}
 80048f8:	b087      	sub	sp, #28
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	7f1b      	ldrb	r3, [r3, #28]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_RTC_SetDate+0x1c>
 800490e:	2302      	movs	r3, #2
 8004910:	e071      	b.n	80049f6 <HAL_RTC_SetDate+0x100>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2202      	movs	r2, #2
 800491c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10e      	bne.n	8004942 <HAL_RTC_SetDate+0x4c>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	785b      	ldrb	r3, [r3, #1]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d008      	beq.n	8004942 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	785b      	ldrb	r3, [r3, #1]
 8004934:	f023 0310 	bic.w	r3, r3, #16
 8004938:	b2db      	uxtb	r3, r3
 800493a:	330a      	adds	r3, #10
 800493c:	b2da      	uxtb	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11c      	bne.n	8004982 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	78db      	ldrb	r3, [r3, #3]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f927 	bl	8004ba0 <RTC_ByteToBcd2>
 8004952:	4603      	mov	r3, r0
 8004954:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	785b      	ldrb	r3, [r3, #1]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f920 	bl	8004ba0 <RTC_ByteToBcd2>
 8004960:	4603      	mov	r3, r0
 8004962:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004964:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	789b      	ldrb	r3, [r3, #2]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f918 	bl	8004ba0 <RTC_ByteToBcd2>
 8004970:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004972:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	e00e      	b.n	80049a0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	78db      	ldrb	r3, [r3, #3]
 8004986:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	785b      	ldrb	r3, [r3, #1]
 800498c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800498e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004994:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	22ca      	movs	r2, #202	@ 0xca
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2253      	movs	r2, #83	@ 0x53
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f899 	bl	8004ae8 <RTC_EnterInitMode>
 80049b6:	4603      	mov	r3, r0
 80049b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80049ba:	7cfb      	ldrb	r3, [r7, #19]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10c      	bne.n	80049da <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80049ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80049ce:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f8c0 	bl	8004b56 <RTC_ExitInitMode>
 80049d6:	4603      	mov	r3, r0
 80049d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80049da:	7cfb      	ldrb	r3, [r7, #19]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d102      	bne.n	80049e6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	22ff      	movs	r2, #255	@ 0xff
 80049ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	771a      	strb	r2, [r3, #28]

  return status;
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd90      	pop	{r4, r7, pc}

080049fe <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b086      	sub	sp, #24
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004a18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004a1c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	0c1b      	lsrs	r3, r3, #16
 8004a22:	b2da      	uxtb	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a40:	b2da      	uxtb	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	0b5b      	lsrs	r3, r3, #13
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d11a      	bne.n	8004a92 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	78db      	ldrb	r3, [r3, #3]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f000 f8bb 	bl	8004bdc <RTC_Bcd2ToByte>
 8004a66:	4603      	mov	r3, r0
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	785b      	ldrb	r3, [r3, #1]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f8b2 	bl	8004bdc <RTC_Bcd2ToByte>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	789b      	ldrb	r3, [r3, #2]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f8a9 	bl	8004bdc <RTC_Bcd2ToByte>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a0d      	ldr	r2, [pc, #52]	@ (8004ae4 <HAL_RTC_WaitForSynchro+0x48>)
 8004aae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ab0:	f7fd fe30 	bl	8002714 <HAL_GetTick>
 8004ab4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004ab6:	e009      	b.n	8004acc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004ab8:	f7fd fe2c 	bl	8002714 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ac6:	d901      	bls.n	8004acc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e007      	b.n	8004adc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0320 	and.w	r3, r3, #32
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0ee      	beq.n	8004ab8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	00017f5f 	.word	0x00017f5f

08004ae8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d122      	bne.n	8004b4c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b14:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b16:	f7fd fdfd 	bl	8002714 <HAL_GetTick>
 8004b1a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b1c:	e00c      	b.n	8004b38 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b1e:	f7fd fdf9 	bl	8002714 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b2c:	d904      	bls.n	8004b38 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2204      	movs	r2, #4
 8004b32:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <RTC_EnterInitMode+0x64>
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d1e8      	bne.n	8004b1e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b70:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff ff8b 	bl	8004a9c <HAL_RTC_WaitForSynchro>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004bae:	e005      	b.n	8004bbc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	3b0a      	subs	r3, #10
 8004bba:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	d8f6      	bhi.n	8004bb0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	011b      	lsls	r3, r3, #4
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	b2db      	uxtb	r3, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004bea:	79fb      	ldrb	r3, [r7, #7]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	b2db      	uxtb	r3, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e07b      	b.n	8004d22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c3a:	d009      	beq.n	8004c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	61da      	str	r2, [r3, #28]
 8004c42:	e005      	b.n	8004c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc fbc4 	bl	80013f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd4:	ea42 0103 	orr.w	r1, r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cdc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	0c1b      	lsrs	r3, r3, #16
 8004cee:	f003 0104 	and.w	r1, r3, #4
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	f003 0210 	and.w	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	69da      	ldr	r2, [r3, #28]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b088      	sub	sp, #32
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	60f8      	str	r0, [r7, #12]
 8004d32:	60b9      	str	r1, [r7, #8]
 8004d34:	603b      	str	r3, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_SPI_Transmit+0x22>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e12d      	b.n	8004fa8 <HAL_SPI_Transmit+0x27e>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d54:	f7fd fcde 	bl	8002714 <HAL_GetTick>
 8004d58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d6e:	e116      	b.n	8004f9e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d002      	beq.n	8004d7c <HAL_SPI_Transmit+0x52>
 8004d76:	88fb      	ldrh	r3, [r7, #6]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d80:	e10d      	b.n	8004f9e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2203      	movs	r2, #3
 8004d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc8:	d10f      	bne.n	8004dea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004de8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	d007      	beq.n	8004e08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e10:	d14f      	bne.n	8004eb2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <HAL_SPI_Transmit+0xf6>
 8004e1a:	8afb      	ldrh	r3, [r7, #22]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d142      	bne.n	8004ea6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e24:	881a      	ldrh	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e30:	1c9a      	adds	r2, r3, #2
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e44:	e02f      	b.n	8004ea6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f003 0302 	and.w	r3, r3, #2
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d112      	bne.n	8004e7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004e78:	e015      	b.n	8004ea6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e7a:	f7fd fc4b 	bl	8002714 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d803      	bhi.n	8004e92 <HAL_SPI_Transmit+0x168>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e90:	d102      	bne.n	8004e98 <HAL_SPI_Transmit+0x16e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004ea4:	e07b      	b.n	8004f9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1ca      	bne.n	8004e46 <HAL_SPI_Transmit+0x11c>
 8004eb0:	e050      	b.n	8004f54 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d002      	beq.n	8004ec0 <HAL_SPI_Transmit+0x196>
 8004eba:	8afb      	ldrh	r3, [r7, #22]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d144      	bne.n	8004f4a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	7812      	ldrb	r2, [r2, #0]
 8004ecc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	1c5a      	adds	r2, r3, #1
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004ee6:	e030      	b.n	8004f4a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0302 	and.w	r3, r3, #2
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d113      	bne.n	8004f1e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	7812      	ldrb	r2, [r2, #0]
 8004f02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	3b01      	subs	r3, #1
 8004f16:	b29a      	uxth	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f1c:	e015      	b.n	8004f4a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f1e:	f7fd fbf9 	bl	8002714 <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d803      	bhi.n	8004f36 <HAL_SPI_Transmit+0x20c>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f34:	d102      	bne.n	8004f3c <HAL_SPI_Transmit+0x212>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d106      	bne.n	8004f4a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f48:	e029      	b.n	8004f9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1c9      	bne.n	8004ee8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f54:	69ba      	ldr	r2, [r7, #24]
 8004f56:	6839      	ldr	r1, [r7, #0]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 fbdf 	bl	800571c <SPI_EndRxTxTransaction>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f72:	2300      	movs	r3, #0
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	613b      	str	r3, [r7, #16]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e003      	b.n	8004f9e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004fa6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	603b      	str	r3, [r7, #0]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d002      	beq.n	8004fd6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004fd4:	e0fb      	b.n	80051ce <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fde:	d112      	bne.n	8005006 <HAL_SPI_Receive+0x56>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10e      	bne.n	8005006 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2204      	movs	r2, #4
 8004fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004ff0:	88fa      	ldrh	r2, [r7, #6]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	68b9      	ldr	r1, [r7, #8]
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f8ef 	bl	80051e0 <HAL_SPI_TransmitReceive>
 8005002:	4603      	mov	r3, r0
 8005004:	e0e8      	b.n	80051d8 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_SPI_Receive+0x64>
 8005010:	2302      	movs	r3, #2
 8005012:	e0e1      	b.n	80051d8 <HAL_SPI_Receive+0x228>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800501c:	f7fd fb7a 	bl	8002714 <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <HAL_SPI_Receive+0x7e>
 8005028:	88fb      	ldrh	r3, [r7, #6]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005032:	e0cc      	b.n	80051ce <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2204      	movs	r2, #4
 8005038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800507a:	d10f      	bne.n	800509c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800508a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800509a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a6:	2b40      	cmp	r3, #64	@ 0x40
 80050a8:	d007      	beq.n	80050ba <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d16a      	bne.n	8005198 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050c2:	e032      	b.n	800512a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d115      	bne.n	80050fe <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f103 020c 	add.w	r2, r3, #12
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e8:	1c5a      	adds	r2, r3, #1
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80050fc:	e015      	b.n	800512a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050fe:	f7fd fb09 	bl	8002714 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	429a      	cmp	r2, r3
 800510c:	d803      	bhi.n	8005116 <HAL_SPI_Receive+0x166>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005114:	d102      	bne.n	800511c <HAL_SPI_Receive+0x16c>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d106      	bne.n	800512a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005128:	e051      	b.n	80051ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800512e:	b29b      	uxth	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1c7      	bne.n	80050c4 <HAL_SPI_Receive+0x114>
 8005134:	e035      	b.n	80051a2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d113      	bne.n	800516c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800514e:	b292      	uxth	r2, r2
 8005150:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005156:	1c9a      	adds	r2, r3, #2
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	b29a      	uxth	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800516a:	e015      	b.n	8005198 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800516c:	f7fd fad2 	bl	8002714 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	429a      	cmp	r2, r3
 800517a:	d803      	bhi.n	8005184 <HAL_SPI_Receive+0x1d4>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005182:	d102      	bne.n	800518a <HAL_SPI_Receive+0x1da>
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005196:	e01a      	b.n	80051ce <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1c9      	bne.n	8005136 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	6839      	ldr	r1, [r7, #0]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fa52 	bl	8005650 <SPI_EndRxTransaction>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	75fb      	strb	r3, [r7, #23]
 80051c4:	e003      	b.n	80051ce <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	@ 0x30
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051ee:	2301      	movs	r3, #1
 80051f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_SPI_TransmitReceive+0x26>
 8005202:	2302      	movs	r3, #2
 8005204:	e198      	b.n	8005538 <HAL_SPI_TransmitReceive+0x358>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800520e:	f7fd fa81 	bl	8002714 <HAL_GetTick>
 8005212:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800521a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005224:	887b      	ldrh	r3, [r7, #2]
 8005226:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005228:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800522c:	2b01      	cmp	r3, #1
 800522e:	d00f      	beq.n	8005250 <HAL_SPI_TransmitReceive+0x70>
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005236:	d107      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d103      	bne.n	8005248 <HAL_SPI_TransmitReceive+0x68>
 8005240:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005244:	2b04      	cmp	r3, #4
 8005246:	d003      	beq.n	8005250 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800524e:	e16d      	b.n	800552c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <HAL_SPI_TransmitReceive+0x82>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_SPI_TransmitReceive+0x82>
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005268:	e160      	b.n	800552c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b04      	cmp	r3, #4
 8005274:	d003      	beq.n	800527e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2205      	movs	r2, #5
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	887a      	ldrh	r2, [r7, #2]
 800528e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	887a      	ldrh	r2, [r7, #2]
 8005294:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	887a      	ldrh	r2, [r7, #2]
 80052a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	887a      	ldrh	r2, [r7, #2]
 80052a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052be:	2b40      	cmp	r3, #64	@ 0x40
 80052c0:	d007      	beq.n	80052d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80052d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052da:	d17c      	bne.n	80053d6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_SPI_TransmitReceive+0x10a>
 80052e4:	8b7b      	ldrh	r3, [r7, #26]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d16a      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ee:	881a      	ldrh	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800530e:	e057      	b.n	80053c0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	d11b      	bne.n	8005356 <HAL_SPI_TransmitReceive+0x176>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005322:	b29b      	uxth	r3, r3
 8005324:	2b00      	cmp	r3, #0
 8005326:	d016      	beq.n	8005356 <HAL_SPI_TransmitReceive+0x176>
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	2b01      	cmp	r3, #1
 800532c:	d113      	bne.n	8005356 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005332:	881a      	ldrh	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533e:	1c9a      	adds	r2, r3, #2
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005348:	b29b      	uxth	r3, r3
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b01      	cmp	r3, #1
 8005362:	d119      	bne.n	8005398 <HAL_SPI_TransmitReceive+0x1b8>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d014      	beq.n	8005398 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	b292      	uxth	r2, r2
 800537a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005394:	2301      	movs	r3, #1
 8005396:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005398:	f7fd f9bc 	bl	8002714 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d80b      	bhi.n	80053c0 <HAL_SPI_TransmitReceive+0x1e0>
 80053a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053ae:	d007      	beq.n	80053c0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80053be:	e0b5      	b.n	800552c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1a2      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x130>
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d19d      	bne.n	8005310 <HAL_SPI_TransmitReceive+0x130>
 80053d4:	e080      	b.n	80054d8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_SPI_TransmitReceive+0x204>
 80053de:	8b7b      	ldrh	r3, [r7, #26]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d16f      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	7812      	ldrb	r2, [r2, #0]
 80053f0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053f6:	1c5a      	adds	r2, r3, #1
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b29a      	uxth	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800540a:	e05b      	b.n	80054c4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b02      	cmp	r3, #2
 8005418:	d11c      	bne.n	8005454 <HAL_SPI_TransmitReceive+0x274>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	d017      	beq.n	8005454 <HAL_SPI_TransmitReceive+0x274>
 8005424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d114      	bne.n	8005454 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	7812      	ldrb	r2, [r2, #0]
 8005436:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d119      	bne.n	8005496 <HAL_SPI_TransmitReceive+0x2b6>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005466:	b29b      	uxth	r3, r3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d014      	beq.n	8005496 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005492:	2301      	movs	r3, #1
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005496:	f7fd f93d 	bl	8002714 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d803      	bhi.n	80054ae <HAL_SPI_TransmitReceive+0x2ce>
 80054a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ac:	d102      	bne.n	80054b4 <HAL_SPI_TransmitReceive+0x2d4>
 80054ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d107      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80054c2:	e033      	b.n	800552c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d19e      	bne.n	800540c <HAL_SPI_TransmitReceive+0x22c>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d199      	bne.n	800540c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f91d 	bl	800571c <SPI_EndRxTxTransaction>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d006      	beq.n	80054f6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80054f4:	e01a      	b.n	800552c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054fe:	2300      	movs	r3, #0
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	617b      	str	r3, [r7, #20]
 8005512:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005522:	e003      	b.n	800552c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005534:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005538:	4618      	mov	r0, r3
 800553a:	3730      	adds	r7, #48	@ 0x30
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005550:	f7fd f8e0 	bl	8002714 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	4413      	add	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005560:	f7fd f8d8 	bl	8002714 <HAL_GetTick>
 8005564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005566:	4b39      	ldr	r3, [pc, #228]	@ (800564c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	015b      	lsls	r3, r3, #5
 800556c:	0d1b      	lsrs	r3, r3, #20
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005576:	e054      	b.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800557e:	d050      	beq.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005580:	f7fd f8c8 	bl	8002714 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	429a      	cmp	r2, r3
 800558e:	d902      	bls.n	8005596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d13d      	bne.n	8005612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80055a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055ae:	d111      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055b8:	d004      	beq.n	80055c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c2:	d107      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055dc:	d10f      	bne.n	80055fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e017      	b.n	8005642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3b01      	subs	r3, #1
 8005620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	bf0c      	ite	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	2300      	movne	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	429a      	cmp	r2, r3
 800563e:	d19b      	bne.n	8005578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	20000000 	.word	0x20000000

08005650 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005664:	d111      	bne.n	800568a <SPI_EndRxTransaction+0x3a>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800566e:	d004      	beq.n	800567a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005678:	d107      	bne.n	800568a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005688:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005692:	d12a      	bne.n	80056ea <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800569c:	d012      	beq.n	80056c4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	2180      	movs	r1, #128	@ 0x80
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff ff49 	bl	8005540 <SPI_WaitFlagStateUntilTimeout>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d02d      	beq.n	8005710 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b8:	f043 0220 	orr.w	r2, r3, #32
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e026      	b.n	8005712 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2200      	movs	r2, #0
 80056cc:	2101      	movs	r1, #1
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f7ff ff36 	bl	8005540 <SPI_WaitFlagStateUntilTimeout>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01a      	beq.n	8005710 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056de:	f043 0220 	orr.w	r2, r3, #32
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e013      	b.n	8005712 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2200      	movs	r2, #0
 80056f2:	2101      	movs	r1, #1
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f7ff ff23 	bl	8005540 <SPI_WaitFlagStateUntilTimeout>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d007      	beq.n	8005710 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e000      	b.n	8005712 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2201      	movs	r2, #1
 8005730:	2102      	movs	r1, #2
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f7ff ff04 	bl	8005540 <SPI_WaitFlagStateUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005742:	f043 0220 	orr.w	r2, r3, #32
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e032      	b.n	80057b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800574e:	4b1b      	ldr	r3, [pc, #108]	@ (80057bc <SPI_EndRxTxTransaction+0xa0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1b      	ldr	r2, [pc, #108]	@ (80057c0 <SPI_EndRxTxTransaction+0xa4>)
 8005754:	fba2 2303 	umull	r2, r3, r2, r3
 8005758:	0d5b      	lsrs	r3, r3, #21
 800575a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800576c:	d112      	bne.n	8005794 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	9300      	str	r3, [sp, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2200      	movs	r2, #0
 8005776:	2180      	movs	r1, #128	@ 0x80
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7ff fee1 	bl	8005540 <SPI_WaitFlagStateUntilTimeout>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d016      	beq.n	80057b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005788:	f043 0220 	orr.w	r2, r3, #32
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e00f      	b.n	80057b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	3b01      	subs	r3, #1
 800579e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057aa:	2b80      	cmp	r3, #128	@ 0x80
 80057ac:	d0f2      	beq.n	8005794 <SPI_EndRxTxTransaction+0x78>
 80057ae:	e000      	b.n	80057b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80057b0:	bf00      	nop
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20000000 	.word	0x20000000
 80057c0:	165e9f81 	.word	0x165e9f81

080057c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e042      	b.n	800585c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d106      	bne.n	80057f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fb fe6c 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2224      	movs	r2, #36	@ 0x24
 80057f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f973 	bl	8005af4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800581c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	695a      	ldr	r2, [r3, #20]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800582c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68da      	ldr	r2, [r3, #12]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800583c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08a      	sub	sp, #40	@ 0x28
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b20      	cmp	r3, #32
 8005882:	d175      	bne.n	8005970 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <HAL_UART_Transmit+0x2c>
 800588a:	88fb      	ldrh	r3, [r7, #6]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e06e      	b.n	8005972 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2221      	movs	r2, #33	@ 0x21
 800589e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058a2:	f7fc ff37 	bl	8002714 <HAL_GetTick>
 80058a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	88fa      	ldrh	r2, [r7, #6]
 80058ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	88fa      	ldrh	r2, [r7, #6]
 80058b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058bc:	d108      	bne.n	80058d0 <HAL_UART_Transmit+0x6c>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d104      	bne.n	80058d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80058c6:	2300      	movs	r3, #0
 80058c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	e003      	b.n	80058d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058d8:	e02e      	b.n	8005938 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2200      	movs	r2, #0
 80058e2:	2180      	movs	r1, #128	@ 0x80
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 f848 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058f8:	2303      	movs	r3, #3
 80058fa:	e03a      	b.n	8005972 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10b      	bne.n	800591a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005910:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	3302      	adds	r3, #2
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	e007      	b.n	800592a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	781a      	ldrb	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	3301      	adds	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800592e:	b29b      	uxth	r3, r3
 8005930:	3b01      	subs	r3, #1
 8005932:	b29a      	uxth	r2, r3
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1cb      	bne.n	80058da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	2140      	movs	r1, #64	@ 0x40
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f814 	bl	800597a <UART_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800596c:	2300      	movs	r3, #0
 800596e:	e000      	b.n	8005972 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005970:	2302      	movs	r3, #2
  }
}
 8005972:	4618      	mov	r0, r3
 8005974:	3720      	adds	r7, #32
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b086      	sub	sp, #24
 800597e:	af00      	add	r7, sp, #0
 8005980:	60f8      	str	r0, [r7, #12]
 8005982:	60b9      	str	r1, [r7, #8]
 8005984:	603b      	str	r3, [r7, #0]
 8005986:	4613      	mov	r3, r2
 8005988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800598a:	e03b      	b.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005992:	d037      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005994:	f7fc febe 	bl	8002714 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	6a3a      	ldr	r2, [r7, #32]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d302      	bcc.n	80059aa <UART_WaitOnFlagUntilTimeout+0x30>
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e03a      	b.n	8005a24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d023      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	2b80      	cmp	r3, #128	@ 0x80
 80059c0:	d020      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x8a>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2b40      	cmp	r3, #64	@ 0x40
 80059c6:	d01d      	beq.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d116      	bne.n	8005a04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	617b      	str	r3, [r7, #20]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f81d 	bl	8005a2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2208      	movs	r2, #8
 80059f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e00f      	b.n	8005a24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	bf0c      	ite	eq
 8005a14:	2301      	moveq	r3, #1
 8005a16:	2300      	movne	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d0b4      	beq.n	800598c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3718      	adds	r7, #24
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b095      	sub	sp, #84	@ 0x54
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	330c      	adds	r3, #12
 8005a3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	e853 3f00 	ldrex	r3, [r3]
 8005a42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	330c      	adds	r3, #12
 8005a52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a54:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e5      	bne.n	8005a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3314      	adds	r3, #20
 8005a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f023 0301 	bic.w	r3, r3, #1
 8005a7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d119      	bne.n	8005ad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	330c      	adds	r3, #12
 8005aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	e853 3f00 	ldrex	r3, [r3]
 8005ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f023 0310 	bic.w	r3, r3, #16
 8005aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	330c      	adds	r3, #12
 8005ac2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ac4:	61ba      	str	r2, [r7, #24]
 8005ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac8:	6979      	ldr	r1, [r7, #20]
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	e841 2300 	strex	r3, r2, [r1]
 8005ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1e5      	bne.n	8005aa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ae6:	bf00      	nop
 8005ae8:	3754      	adds	r7, #84	@ 0x54
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
	...

08005af4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005af8:	b0c0      	sub	sp, #256	@ 0x100
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	68d9      	ldr	r1, [r3, #12]
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	ea40 0301 	orr.w	r3, r0, r1
 8005b1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	431a      	orrs	r2, r3
 8005b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b4c:	f021 010c 	bic.w	r1, r1, #12
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b5a:	430b      	orrs	r3, r1
 8005b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695b      	ldr	r3, [r3, #20]
 8005b66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6e:	6999      	ldr	r1, [r3, #24]
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	ea40 0301 	orr.w	r3, r0, r1
 8005b7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4b8f      	ldr	r3, [pc, #572]	@ (8005dc0 <UART_SetConfig+0x2cc>)
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d005      	beq.n	8005b94 <UART_SetConfig+0xa0>
 8005b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b8d      	ldr	r3, [pc, #564]	@ (8005dc4 <UART_SetConfig+0x2d0>)
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d104      	bne.n	8005b9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b94:	f7fe fb60 	bl	8004258 <HAL_RCC_GetPCLK2Freq>
 8005b98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b9c:	e003      	b.n	8005ba6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b9e:	f7fe fb47 	bl	8004230 <HAL_RCC_GetPCLK1Freq>
 8005ba2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb0:	f040 810c 	bne.w	8005dcc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005bc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	462b      	mov	r3, r5
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005bd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	eb12 0801 	adds.w	r8, r2, r1
 8005bdc:	4629      	mov	r1, r5
 8005bde:	eb43 0901 	adc.w	r9, r3, r1
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bf6:	4690      	mov	r8, r2
 8005bf8:	4699      	mov	r9, r3
 8005bfa:	4623      	mov	r3, r4
 8005bfc:	eb18 0303 	adds.w	r3, r8, r3
 8005c00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c04:	462b      	mov	r3, r5
 8005c06:	eb49 0303 	adc.w	r3, r9, r3
 8005c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c22:	460b      	mov	r3, r1
 8005c24:	18db      	adds	r3, r3, r3
 8005c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c28:	4613      	mov	r3, r2
 8005c2a:	eb42 0303 	adc.w	r3, r2, r3
 8005c2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c38:	f7fa fefe 	bl	8000a38 <__aeabi_uldivmod>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4b61      	ldr	r3, [pc, #388]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005c42:	fba3 2302 	umull	r2, r3, r3, r2
 8005c46:	095b      	lsrs	r3, r3, #5
 8005c48:	011c      	lsls	r4, r3, #4
 8005c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c5c:	4642      	mov	r2, r8
 8005c5e:	464b      	mov	r3, r9
 8005c60:	1891      	adds	r1, r2, r2
 8005c62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c64:	415b      	adcs	r3, r3
 8005c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c72:	4649      	mov	r1, r9
 8005c74:	eb43 0b01 	adc.w	fp, r3, r1
 8005c78:	f04f 0200 	mov.w	r2, #0
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c8c:	4692      	mov	sl, r2
 8005c8e:	469b      	mov	fp, r3
 8005c90:	4643      	mov	r3, r8
 8005c92:	eb1a 0303 	adds.w	r3, sl, r3
 8005c96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005ca0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005cb8:	460b      	mov	r3, r1
 8005cba:	18db      	adds	r3, r3, r3
 8005cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	eb42 0303 	adc.w	r3, r2, r3
 8005cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005cca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005cce:	f7fa feb3 	bl	8000a38 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4b3b      	ldr	r3, [pc, #236]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005cda:	fba3 2301 	umull	r2, r3, r3, r1
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	2264      	movs	r2, #100	@ 0x64
 8005ce2:	fb02 f303 	mul.w	r3, r2, r3
 8005ce6:	1acb      	subs	r3, r1, r3
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cee:	4b36      	ldr	r3, [pc, #216]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005cf0:	fba3 2302 	umull	r2, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cfc:	441c      	add	r4, r3
 8005cfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d10:	4642      	mov	r2, r8
 8005d12:	464b      	mov	r3, r9
 8005d14:	1891      	adds	r1, r2, r2
 8005d16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d18:	415b      	adcs	r3, r3
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d20:	4641      	mov	r1, r8
 8005d22:	1851      	adds	r1, r2, r1
 8005d24:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d26:	4649      	mov	r1, r9
 8005d28:	414b      	adcs	r3, r1
 8005d2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	f04f 0300 	mov.w	r3, #0
 8005d34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d38:	4659      	mov	r1, fp
 8005d3a:	00cb      	lsls	r3, r1, #3
 8005d3c:	4651      	mov	r1, sl
 8005d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d42:	4651      	mov	r1, sl
 8005d44:	00ca      	lsls	r2, r1, #3
 8005d46:	4610      	mov	r0, r2
 8005d48:	4619      	mov	r1, r3
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	4642      	mov	r2, r8
 8005d4e:	189b      	adds	r3, r3, r2
 8005d50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d54:	464b      	mov	r3, r9
 8005d56:	460a      	mov	r2, r1
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d74:	460b      	mov	r3, r1
 8005d76:	18db      	adds	r3, r3, r3
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d8a:	f7fa fe55 	bl	8000a38 <__aeabi_uldivmod>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	460b      	mov	r3, r1
 8005d92:	4b0d      	ldr	r3, [pc, #52]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005d94:	fba3 1302 	umull	r1, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	2164      	movs	r1, #100	@ 0x64
 8005d9c:	fb01 f303 	mul.w	r3, r1, r3
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	00db      	lsls	r3, r3, #3
 8005da4:	3332      	adds	r3, #50	@ 0x32
 8005da6:	4a08      	ldr	r2, [pc, #32]	@ (8005dc8 <UART_SetConfig+0x2d4>)
 8005da8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dac:	095b      	lsrs	r3, r3, #5
 8005dae:	f003 0207 	and.w	r2, r3, #7
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4422      	add	r2, r4
 8005dba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dbc:	e106      	b.n	8005fcc <UART_SetConfig+0x4d8>
 8005dbe:	bf00      	nop
 8005dc0:	40011000 	.word	0x40011000
 8005dc4:	40011400 	.word	0x40011400
 8005dc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005dd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005dda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005dde:	4642      	mov	r2, r8
 8005de0:	464b      	mov	r3, r9
 8005de2:	1891      	adds	r1, r2, r2
 8005de4:	6239      	str	r1, [r7, #32]
 8005de6:	415b      	adcs	r3, r3
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dee:	4641      	mov	r1, r8
 8005df0:	1854      	adds	r4, r2, r1
 8005df2:	4649      	mov	r1, r9
 8005df4:	eb43 0501 	adc.w	r5, r3, r1
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	00eb      	lsls	r3, r5, #3
 8005e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e06:	00e2      	lsls	r2, r4, #3
 8005e08:	4614      	mov	r4, r2
 8005e0a:	461d      	mov	r5, r3
 8005e0c:	4643      	mov	r3, r8
 8005e0e:	18e3      	adds	r3, r4, r3
 8005e10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e14:	464b      	mov	r3, r9
 8005e16:	eb45 0303 	adc.w	r3, r5, r3
 8005e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	008b      	lsls	r3, r1, #2
 8005e3e:	4621      	mov	r1, r4
 8005e40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e44:	4621      	mov	r1, r4
 8005e46:	008a      	lsls	r2, r1, #2
 8005e48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e4c:	f7fa fdf4 	bl	8000a38 <__aeabi_uldivmod>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4b60      	ldr	r3, [pc, #384]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005e56:	fba3 2302 	umull	r2, r3, r3, r2
 8005e5a:	095b      	lsrs	r3, r3, #5
 8005e5c:	011c      	lsls	r4, r3, #4
 8005e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e62:	2200      	movs	r2, #0
 8005e64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	1891      	adds	r1, r2, r2
 8005e76:	61b9      	str	r1, [r7, #24]
 8005e78:	415b      	adcs	r3, r3
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e80:	4641      	mov	r1, r8
 8005e82:	1851      	adds	r1, r2, r1
 8005e84:	6139      	str	r1, [r7, #16]
 8005e86:	4649      	mov	r1, r9
 8005e88:	414b      	adcs	r3, r1
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e98:	4659      	mov	r1, fp
 8005e9a:	00cb      	lsls	r3, r1, #3
 8005e9c:	4651      	mov	r1, sl
 8005e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ea2:	4651      	mov	r1, sl
 8005ea4:	00ca      	lsls	r2, r1, #3
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	4603      	mov	r3, r0
 8005eac:	4642      	mov	r2, r8
 8005eae:	189b      	adds	r3, r3, r2
 8005eb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eb4:	464b      	mov	r3, r9
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	eb42 0303 	adc.w	r3, r2, r3
 8005ebc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005eca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ed8:	4649      	mov	r1, r9
 8005eda:	008b      	lsls	r3, r1, #2
 8005edc:	4641      	mov	r1, r8
 8005ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ee2:	4641      	mov	r1, r8
 8005ee4:	008a      	lsls	r2, r1, #2
 8005ee6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005eea:	f7fa fda5 	bl	8000a38 <__aeabi_uldivmod>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4b38      	ldr	r3, [pc, #224]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005ef6:	fba3 2301 	umull	r2, r3, r3, r1
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	2264      	movs	r2, #100	@ 0x64
 8005efe:	fb02 f303 	mul.w	r3, r2, r3
 8005f02:	1acb      	subs	r3, r1, r3
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	3332      	adds	r3, #50	@ 0x32
 8005f08:	4a33      	ldr	r2, [pc, #204]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	095b      	lsrs	r3, r3, #5
 8005f10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f14:	441c      	add	r4, r3
 8005f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f20:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f24:	4642      	mov	r2, r8
 8005f26:	464b      	mov	r3, r9
 8005f28:	1891      	adds	r1, r2, r2
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	415b      	adcs	r3, r3
 8005f2e:	60fb      	str	r3, [r7, #12]
 8005f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f34:	4641      	mov	r1, r8
 8005f36:	1851      	adds	r1, r2, r1
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	414b      	adcs	r3, r1
 8005f3e:	607b      	str	r3, [r7, #4]
 8005f40:	f04f 0200 	mov.w	r2, #0
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f4c:	4659      	mov	r1, fp
 8005f4e:	00cb      	lsls	r3, r1, #3
 8005f50:	4651      	mov	r1, sl
 8005f52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f56:	4651      	mov	r1, sl
 8005f58:	00ca      	lsls	r2, r1, #3
 8005f5a:	4610      	mov	r0, r2
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4642      	mov	r2, r8
 8005f62:	189b      	adds	r3, r3, r2
 8005f64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f66:	464b      	mov	r3, r9
 8005f68:	460a      	mov	r2, r1
 8005f6a:	eb42 0303 	adc.w	r3, r2, r3
 8005f6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f7a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f88:	4649      	mov	r1, r9
 8005f8a:	008b      	lsls	r3, r1, #2
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f92:	4641      	mov	r1, r8
 8005f94:	008a      	lsls	r2, r1, #2
 8005f96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f9a:	f7fa fd4d 	bl	8000a38 <__aeabi_uldivmod>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fa8:	095b      	lsrs	r3, r3, #5
 8005faa:	2164      	movs	r1, #100	@ 0x64
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	3332      	adds	r3, #50	@ 0x32
 8005fb6:	4a08      	ldr	r2, [pc, #32]	@ (8005fd8 <UART_SetConfig+0x4e4>)
 8005fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	f003 020f 	and.w	r2, r3, #15
 8005fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4422      	add	r2, r4
 8005fca:	609a      	str	r2, [r3, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fd8:	51eb851f 	.word	0x51eb851f

08005fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fdc:	b084      	sub	sp, #16
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
 8005fe6:	f107 001c 	add.w	r0, r7, #28
 8005fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d123      	bne.n	800603e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800600a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800601e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006022:	2b01      	cmp	r3, #1
 8006024:	d105      	bne.n	8006032 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 faa0 	bl	8006578 <USB_CoreReset>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
 800603c:	e01b      	b.n	8006076 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa94 	bl	8006578 <USB_CoreReset>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006054:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
 8006068:	e005      	b.n	8006076 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006076:	7fbb      	ldrb	r3, [r7, #30]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d10b      	bne.n	8006094 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f043 0206 	orr.w	r2, r3, #6
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f043 0220 	orr.w	r2, r3, #32
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060a0:	b004      	add	sp, #16
 80060a2:	4770      	bx	lr

080060a4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f023 0201 	bic.w	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	460b      	mov	r3, r1
 80060d0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060e2:	78fb      	ldrb	r3, [r7, #3]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d115      	bne.n	8006114 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060f4:	200a      	movs	r0, #10
 80060f6:	f7fc fb19 	bl	800272c <HAL_Delay>
      ms += 10U;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	330a      	adds	r3, #10
 80060fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 fa2b 	bl	800655c <USB_GetMode>
 8006106:	4603      	mov	r3, r0
 8006108:	2b01      	cmp	r3, #1
 800610a:	d01e      	beq.n	800614a <USB_SetCurrentMode+0x84>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006110:	d9f0      	bls.n	80060f4 <USB_SetCurrentMode+0x2e>
 8006112:	e01a      	b.n	800614a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d115      	bne.n	8006146 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006126:	200a      	movs	r0, #10
 8006128:	f7fc fb00 	bl	800272c <HAL_Delay>
      ms += 10U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	330a      	adds	r3, #10
 8006130:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa12 	bl	800655c <USB_GetMode>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <USB_SetCurrentMode+0x84>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2bc7      	cmp	r3, #199	@ 0xc7
 8006142:	d9f0      	bls.n	8006126 <USB_SetCurrentMode+0x60>
 8006144:	e001      	b.n	800614a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e005      	b.n	8006156 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2bc8      	cmp	r3, #200	@ 0xc8
 800614e:	d101      	bne.n	8006154 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006160:	b084      	sub	sp, #16
 8006162:	b580      	push	{r7, lr}
 8006164:	b086      	sub	sp, #24
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800616e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	e009      	b.n	8006194 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	3340      	adds	r3, #64	@ 0x40
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	2200      	movs	r2, #0
 800618c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	3301      	adds	r3, #1
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	2b0e      	cmp	r3, #14
 8006198:	d9f2      	bls.n	8006180 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800619a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d11c      	bne.n	80061dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061b0:	f043 0302 	orr.w	r3, r3, #2
 80061b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80061da:	e00b      	b.n	80061f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061fa:	461a      	mov	r2, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006200:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006204:	2b01      	cmp	r3, #1
 8006206:	d10d      	bne.n	8006224 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006210:	2100      	movs	r1, #0
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f968 	bl	80064e8 <USB_SetDevSpeed>
 8006218:	e008      	b.n	800622c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800621a:	2101      	movs	r1, #1
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f963 	bl	80064e8 <USB_SetDevSpeed>
 8006222:	e003      	b.n	800622c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006224:	2103      	movs	r1, #3
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f95e 	bl	80064e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800622c:	2110      	movs	r1, #16
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f8fa 	bl	8006428 <USB_FlushTxFifo>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f924 	bl	800648c <USB_FlushRxFifo>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006254:	461a      	mov	r2, r3
 8006256:	2300      	movs	r3, #0
 8006258:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006260:	461a      	mov	r2, r3
 8006262:	2300      	movs	r3, #0
 8006264:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800626c:	461a      	mov	r2, r3
 800626e:	2300      	movs	r3, #0
 8006270:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006272:	2300      	movs	r3, #0
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e043      	b.n	8006300 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800628a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800628e:	d118      	bne.n	80062c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a2:	461a      	mov	r2, r3
 80062a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	e013      	b.n	80062d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b8:	461a      	mov	r2, r3
 80062ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062be:	6013      	str	r3, [r2, #0]
 80062c0:	e008      	b.n	80062d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ce:	461a      	mov	r2, r3
 80062d0:	2300      	movs	r3, #0
 80062d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e0:	461a      	mov	r2, r3
 80062e2:	2300      	movs	r3, #0
 80062e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f2:	461a      	mov	r2, r3
 80062f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80062f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	3301      	adds	r3, #1
 80062fe:	613b      	str	r3, [r7, #16]
 8006300:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006304:	461a      	mov	r2, r3
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4293      	cmp	r3, r2
 800630a:	d3b5      	bcc.n	8006278 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800630c:	2300      	movs	r3, #0
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	e043      	b.n	800639a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006324:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006328:	d118      	bne.n	800635c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	e013      	b.n	800636e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006352:	461a      	mov	r2, r3
 8006354:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e008      	b.n	800636e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006368:	461a      	mov	r2, r3
 800636a:	2300      	movs	r3, #0
 800636c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637a:	461a      	mov	r2, r3
 800637c:	2300      	movs	r3, #0
 800637e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638c:	461a      	mov	r2, r3
 800638e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006392:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	3301      	adds	r3, #1
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800639e:	461a      	mov	r2, r3
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d3b5      	bcc.n	8006312 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80063c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d105      	bne.n	80063dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f043 0210 	orr.w	r2, r3, #16
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	4b10      	ldr	r3, [pc, #64]	@ (8006424 <USB_DevInit+0x2c4>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f043 0208 	orr.w	r2, r3, #8
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80063fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006400:	2b01      	cmp	r3, #1
 8006402:	d107      	bne.n	8006414 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800640c:	f043 0304 	orr.w	r3, r3, #4
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006414:	7dfb      	ldrb	r3, [r7, #23]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006420:	b004      	add	sp, #16
 8006422:	4770      	bx	lr
 8006424:	803c3800 	.word	0x803c3800

08006428 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006442:	d901      	bls.n	8006448 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e01b      	b.n	8006480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	daf2      	bge.n	8006436 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	019b      	lsls	r3, r3, #6
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3301      	adds	r3, #1
 8006464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800646c:	d901      	bls.n	8006472 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e006      	b.n	8006480 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b20      	cmp	r3, #32
 800647c:	d0f0      	beq.n	8006460 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3714      	adds	r7, #20
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr

0800648c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	3301      	adds	r3, #1
 800649c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064a4:	d901      	bls.n	80064aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e018      	b.n	80064dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	daf2      	bge.n	8006498 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2210      	movs	r2, #16
 80064ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3301      	adds	r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064c8:	d901      	bls.n	80064ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e006      	b.n	80064dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d0f0      	beq.n	80064bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064da:	2300      	movs	r3, #0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3714      	adds	r7, #20
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006508:	4313      	orrs	r3, r2
 800650a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr

0800651a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800651a:	b480      	push	{r7}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006534:	f023 0303 	bic.w	r3, r3, #3
 8006538:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006548:	f043 0302 	orr.w	r3, r3, #2
 800654c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	695b      	ldr	r3, [r3, #20]
 8006568:	f003 0301 	and.w	r3, r3, #1
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006578:	b480      	push	{r7}
 800657a:	b085      	sub	sp, #20
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	3301      	adds	r3, #1
 8006588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006590:	d901      	bls.n	8006596 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e01b      	b.n	80065ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	daf2      	bge.n	8006584 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f043 0201 	orr.w	r2, r3, #1
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3301      	adds	r3, #1
 80065b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065ba:	d901      	bls.n	80065c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e006      	b.n	80065ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d0f0      	beq.n	80065ae <USB_CoreReset+0x36>

  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr

080065da <__itoa>:
 80065da:	1e93      	subs	r3, r2, #2
 80065dc:	2b22      	cmp	r3, #34	@ 0x22
 80065de:	b510      	push	{r4, lr}
 80065e0:	460c      	mov	r4, r1
 80065e2:	d904      	bls.n	80065ee <__itoa+0x14>
 80065e4:	2300      	movs	r3, #0
 80065e6:	700b      	strb	r3, [r1, #0]
 80065e8:	461c      	mov	r4, r3
 80065ea:	4620      	mov	r0, r4
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	2a0a      	cmp	r2, #10
 80065f0:	d109      	bne.n	8006606 <__itoa+0x2c>
 80065f2:	2800      	cmp	r0, #0
 80065f4:	da07      	bge.n	8006606 <__itoa+0x2c>
 80065f6:	232d      	movs	r3, #45	@ 0x2d
 80065f8:	700b      	strb	r3, [r1, #0]
 80065fa:	4240      	negs	r0, r0
 80065fc:	2101      	movs	r1, #1
 80065fe:	4421      	add	r1, r4
 8006600:	f000 f806 	bl	8006610 <__utoa>
 8006604:	e7f1      	b.n	80065ea <__itoa+0x10>
 8006606:	2100      	movs	r1, #0
 8006608:	e7f9      	b.n	80065fe <__itoa+0x24>

0800660a <itoa>:
 800660a:	f7ff bfe6 	b.w	80065da <__itoa>
	...

08006610 <__utoa>:
 8006610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006612:	4c1f      	ldr	r4, [pc, #124]	@ (8006690 <__utoa+0x80>)
 8006614:	b08b      	sub	sp, #44	@ 0x2c
 8006616:	4605      	mov	r5, r0
 8006618:	460b      	mov	r3, r1
 800661a:	466e      	mov	r6, sp
 800661c:	f104 0c20 	add.w	ip, r4, #32
 8006620:	6820      	ldr	r0, [r4, #0]
 8006622:	6861      	ldr	r1, [r4, #4]
 8006624:	4637      	mov	r7, r6
 8006626:	c703      	stmia	r7!, {r0, r1}
 8006628:	3408      	adds	r4, #8
 800662a:	4564      	cmp	r4, ip
 800662c:	463e      	mov	r6, r7
 800662e:	d1f7      	bne.n	8006620 <__utoa+0x10>
 8006630:	7921      	ldrb	r1, [r4, #4]
 8006632:	7139      	strb	r1, [r7, #4]
 8006634:	1e91      	subs	r1, r2, #2
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	6038      	str	r0, [r7, #0]
 800663a:	2922      	cmp	r1, #34	@ 0x22
 800663c:	f04f 0100 	mov.w	r1, #0
 8006640:	d904      	bls.n	800664c <__utoa+0x3c>
 8006642:	7019      	strb	r1, [r3, #0]
 8006644:	460b      	mov	r3, r1
 8006646:	4618      	mov	r0, r3
 8006648:	b00b      	add	sp, #44	@ 0x2c
 800664a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664c:	1e58      	subs	r0, r3, #1
 800664e:	4684      	mov	ip, r0
 8006650:	fbb5 f7f2 	udiv	r7, r5, r2
 8006654:	fb02 5617 	mls	r6, r2, r7, r5
 8006658:	3628      	adds	r6, #40	@ 0x28
 800665a:	446e      	add	r6, sp
 800665c:	460c      	mov	r4, r1
 800665e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006662:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006666:	462e      	mov	r6, r5
 8006668:	42b2      	cmp	r2, r6
 800666a:	f101 0101 	add.w	r1, r1, #1
 800666e:	463d      	mov	r5, r7
 8006670:	d9ee      	bls.n	8006650 <__utoa+0x40>
 8006672:	2200      	movs	r2, #0
 8006674:	545a      	strb	r2, [r3, r1]
 8006676:	1919      	adds	r1, r3, r4
 8006678:	1aa5      	subs	r5, r4, r2
 800667a:	42aa      	cmp	r2, r5
 800667c:	dae3      	bge.n	8006646 <__utoa+0x36>
 800667e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006682:	780e      	ldrb	r6, [r1, #0]
 8006684:	7006      	strb	r6, [r0, #0]
 8006686:	3201      	adds	r2, #1
 8006688:	f801 5901 	strb.w	r5, [r1], #-1
 800668c:	e7f4      	b.n	8006678 <__utoa+0x68>
 800668e:	bf00      	nop
 8006690:	080068ae 	.word	0x080068ae

08006694 <memset>:
 8006694:	4402      	add	r2, r0
 8006696:	4603      	mov	r3, r0
 8006698:	4293      	cmp	r3, r2
 800669a:	d100      	bne.n	800669e <memset+0xa>
 800669c:	4770      	bx	lr
 800669e:	f803 1b01 	strb.w	r1, [r3], #1
 80066a2:	e7f9      	b.n	8006698 <memset+0x4>

080066a4 <strcat>:
 80066a4:	b510      	push	{r4, lr}
 80066a6:	4602      	mov	r2, r0
 80066a8:	7814      	ldrb	r4, [r2, #0]
 80066aa:	4613      	mov	r3, r2
 80066ac:	3201      	adds	r2, #1
 80066ae:	2c00      	cmp	r4, #0
 80066b0:	d1fa      	bne.n	80066a8 <strcat+0x4>
 80066b2:	3b01      	subs	r3, #1
 80066b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066bc:	2a00      	cmp	r2, #0
 80066be:	d1f9      	bne.n	80066b4 <strcat+0x10>
 80066c0:	bd10      	pop	{r4, pc}
	...

080066c4 <__libc_init_array>:
 80066c4:	b570      	push	{r4, r5, r6, lr}
 80066c6:	4d0d      	ldr	r5, [pc, #52]	@ (80066fc <__libc_init_array+0x38>)
 80066c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006700 <__libc_init_array+0x3c>)
 80066ca:	1b64      	subs	r4, r4, r5
 80066cc:	10a4      	asrs	r4, r4, #2
 80066ce:	2600      	movs	r6, #0
 80066d0:	42a6      	cmp	r6, r4
 80066d2:	d109      	bne.n	80066e8 <__libc_init_array+0x24>
 80066d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006704 <__libc_init_array+0x40>)
 80066d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006708 <__libc_init_array+0x44>)
 80066d8:	f000 f818 	bl	800670c <_init>
 80066dc:	1b64      	subs	r4, r4, r5
 80066de:	10a4      	asrs	r4, r4, #2
 80066e0:	2600      	movs	r6, #0
 80066e2:	42a6      	cmp	r6, r4
 80066e4:	d105      	bne.n	80066f2 <__libc_init_array+0x2e>
 80066e6:	bd70      	pop	{r4, r5, r6, pc}
 80066e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80066ec:	4798      	blx	r3
 80066ee:	3601      	adds	r6, #1
 80066f0:	e7ee      	b.n	80066d0 <__libc_init_array+0xc>
 80066f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066f6:	4798      	blx	r3
 80066f8:	3601      	adds	r6, #1
 80066fa:	e7f2      	b.n	80066e2 <__libc_init_array+0x1e>
 80066fc:	080068dc 	.word	0x080068dc
 8006700:	080068dc 	.word	0x080068dc
 8006704:	080068dc 	.word	0x080068dc
 8006708:	080068e0 	.word	0x080068e0

0800670c <_init>:
 800670c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670e:	bf00      	nop
 8006710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006712:	bc08      	pop	{r3}
 8006714:	469e      	mov	lr, r3
 8006716:	4770      	bx	lr

08006718 <_fini>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	bf00      	nop
 800671c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800671e:	bc08      	pop	{r3}
 8006720:	469e      	mov	lr, r3
 8006722:	4770      	bx	lr
