
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a1c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005bc8  08005bc8  00006bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ce0  08005ce0  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005ce0  08005ce0  00006ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ce8  08005ce8  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce8  08005ce8  00006ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cec  08005cec  00006cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005cf0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          000001d8  20000018  20000018  00007018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f0  200001f0  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011d38  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028fc  00000000  00000000  00018d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f00  00000000  00000000  0001b680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ba2  00000000  00000000  0001c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002702b  00000000  00000000  0001d122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001395d  00000000  00000000  0004414d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e50da  00000000  00000000  00057aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013cb84  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f40  00000000  00000000  0013cbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00140b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005bb0 	.word	0x08005bb0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08005bb0 	.word	0x08005bb0

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	@ 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_uldivmod>:
 8000a38:	b953      	cbnz	r3, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3a:	b94a      	cbnz	r2, 8000a50 <__aeabi_uldivmod+0x18>
 8000a3c:	2900      	cmp	r1, #0
 8000a3e:	bf08      	it	eq
 8000a40:	2800      	cmpeq	r0, #0
 8000a42:	bf1c      	itt	ne
 8000a44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a4c:	f000 b96a 	b.w	8000d24 <__aeabi_idiv0>
 8000a50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a58:	f000 f806 	bl	8000a68 <__udivmoddi4>
 8000a5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a64:	b004      	add	sp, #16
 8000a66:	4770      	bx	lr

08000a68 <__udivmoddi4>:
 8000a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a6c:	9d08      	ldr	r5, [sp, #32]
 8000a6e:	460c      	mov	r4, r1
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d14e      	bne.n	8000b12 <__udivmoddi4+0xaa>
 8000a74:	4694      	mov	ip, r2
 8000a76:	458c      	cmp	ip, r1
 8000a78:	4686      	mov	lr, r0
 8000a7a:	fab2 f282 	clz	r2, r2
 8000a7e:	d962      	bls.n	8000b46 <__udivmoddi4+0xde>
 8000a80:	b14a      	cbz	r2, 8000a96 <__udivmoddi4+0x2e>
 8000a82:	f1c2 0320 	rsb	r3, r2, #32
 8000a86:	4091      	lsls	r1, r2
 8000a88:	fa20 f303 	lsr.w	r3, r0, r3
 8000a8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a90:	4319      	orrs	r1, r3
 8000a92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a9a:	fa1f f68c 	uxth.w	r6, ip
 8000a9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aa2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000aa6:	fb07 1114 	mls	r1, r7, r4, r1
 8000aaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aae:	fb04 f106 	mul.w	r1, r4, r6
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x64>
 8000ab6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000abe:	f080 8112 	bcs.w	8000ce6 <__udivmoddi4+0x27e>
 8000ac2:	4299      	cmp	r1, r3
 8000ac4:	f240 810f 	bls.w	8000ce6 <__udivmoddi4+0x27e>
 8000ac8:	3c02      	subs	r4, #2
 8000aca:	4463      	add	r3, ip
 8000acc:	1a59      	subs	r1, r3, r1
 8000ace:	fa1f f38e 	uxth.w	r3, lr
 8000ad2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ad6:	fb07 1110 	mls	r1, r7, r0, r1
 8000ada:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ade:	fb00 f606 	mul.w	r6, r0, r6
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	d90a      	bls.n	8000afc <__udivmoddi4+0x94>
 8000ae6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000aee:	f080 80fc 	bcs.w	8000cea <__udivmoddi4+0x282>
 8000af2:	429e      	cmp	r6, r3
 8000af4:	f240 80f9 	bls.w	8000cea <__udivmoddi4+0x282>
 8000af8:	4463      	add	r3, ip
 8000afa:	3802      	subs	r0, #2
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b02:	2100      	movs	r1, #0
 8000b04:	b11d      	cbz	r5, 8000b0e <__udivmoddi4+0xa6>
 8000b06:	40d3      	lsrs	r3, r2
 8000b08:	2200      	movs	r2, #0
 8000b0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	428b      	cmp	r3, r1
 8000b14:	d905      	bls.n	8000b22 <__udivmoddi4+0xba>
 8000b16:	b10d      	cbz	r5, 8000b1c <__udivmoddi4+0xb4>
 8000b18:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4608      	mov	r0, r1
 8000b20:	e7f5      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000b22:	fab3 f183 	clz	r1, r3
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d146      	bne.n	8000bb8 <__udivmoddi4+0x150>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d302      	bcc.n	8000b34 <__udivmoddi4+0xcc>
 8000b2e:	4290      	cmp	r0, r2
 8000b30:	f0c0 80f0 	bcc.w	8000d14 <__udivmoddi4+0x2ac>
 8000b34:	1a86      	subs	r6, r0, r2
 8000b36:	eb64 0303 	sbc.w	r3, r4, r3
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	2d00      	cmp	r5, #0
 8000b3e:	d0e6      	beq.n	8000b0e <__udivmoddi4+0xa6>
 8000b40:	e9c5 6300 	strd	r6, r3, [r5]
 8000b44:	e7e3      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000b46:	2a00      	cmp	r2, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x204>
 8000b4c:	eba1 040c 	sub.w	r4, r1, ip
 8000b50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b54:	fa1f f78c 	uxth.w	r7, ip
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b62:	fb08 4416 	mls	r4, r8, r6, r4
 8000b66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b6a:	fb07 f006 	mul.w	r0, r7, r6
 8000b6e:	4298      	cmp	r0, r3
 8000b70:	d908      	bls.n	8000b84 <__udivmoddi4+0x11c>
 8000b72:	eb1c 0303 	adds.w	r3, ip, r3
 8000b76:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b7a:	d202      	bcs.n	8000b82 <__udivmoddi4+0x11a>
 8000b7c:	4298      	cmp	r0, r3
 8000b7e:	f200 80cd 	bhi.w	8000d1c <__udivmoddi4+0x2b4>
 8000b82:	4626      	mov	r6, r4
 8000b84:	1a1c      	subs	r4, r3, r0
 8000b86:	fa1f f38e 	uxth.w	r3, lr
 8000b8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b96:	fb00 f707 	mul.w	r7, r0, r7
 8000b9a:	429f      	cmp	r7, r3
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x148>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x146>
 8000ba8:	429f      	cmp	r7, r3
 8000baa:	f200 80b0 	bhi.w	8000d0e <__udivmoddi4+0x2a6>
 8000bae:	4620      	mov	r0, r4
 8000bb0:	1bdb      	subs	r3, r3, r7
 8000bb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bb6:	e7a5      	b.n	8000b04 <__udivmoddi4+0x9c>
 8000bb8:	f1c1 0620 	rsb	r6, r1, #32
 8000bbc:	408b      	lsls	r3, r1
 8000bbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000bc2:	431f      	orrs	r7, r3
 8000bc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000bcc:	ea43 030c 	orr.w	r3, r3, ip
 8000bd0:	40f4      	lsrs	r4, r6
 8000bd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000bd6:	0c38      	lsrs	r0, r7, #16
 8000bd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000bdc:	fbb4 fef0 	udiv	lr, r4, r0
 8000be0:	fa1f fc87 	uxth.w	ip, r7
 8000be4:	fb00 441e 	mls	r4, r0, lr, r4
 8000be8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bec:	fb0e f90c 	mul.w	r9, lr, ip
 8000bf0:	45a1      	cmp	r9, r4
 8000bf2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x1a6>
 8000bf8:	193c      	adds	r4, r7, r4
 8000bfa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000bfe:	f080 8084 	bcs.w	8000d0a <__udivmoddi4+0x2a2>
 8000c02:	45a1      	cmp	r9, r4
 8000c04:	f240 8081 	bls.w	8000d0a <__udivmoddi4+0x2a2>
 8000c08:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c0c:	443c      	add	r4, r7
 8000c0e:	eba4 0409 	sub.w	r4, r4, r9
 8000c12:	fa1f f983 	uxth.w	r9, r3
 8000c16:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c1a:	fb00 4413 	mls	r4, r0, r3, r4
 8000c1e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c22:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c26:	45a4      	cmp	ip, r4
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x1d2>
 8000c2a:	193c      	adds	r4, r7, r4
 8000c2c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c30:	d267      	bcs.n	8000d02 <__udivmoddi4+0x29a>
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d965      	bls.n	8000d02 <__udivmoddi4+0x29a>
 8000c36:	3b02      	subs	r3, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c3e:	fba0 9302 	umull	r9, r3, r0, r2
 8000c42:	eba4 040c 	sub.w	r4, r4, ip
 8000c46:	429c      	cmp	r4, r3
 8000c48:	46ce      	mov	lr, r9
 8000c4a:	469c      	mov	ip, r3
 8000c4c:	d351      	bcc.n	8000cf2 <__udivmoddi4+0x28a>
 8000c4e:	d04e      	beq.n	8000cee <__udivmoddi4+0x286>
 8000c50:	b155      	cbz	r5, 8000c68 <__udivmoddi4+0x200>
 8000c52:	ebb8 030e 	subs.w	r3, r8, lr
 8000c56:	eb64 040c 	sbc.w	r4, r4, ip
 8000c5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c5e:	40cb      	lsrs	r3, r1
 8000c60:	431e      	orrs	r6, r3
 8000c62:	40cc      	lsrs	r4, r1
 8000c64:	e9c5 6400 	strd	r6, r4, [r5]
 8000c68:	2100      	movs	r1, #0
 8000c6a:	e750      	b.n	8000b0e <__udivmoddi4+0xa6>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f103 	lsr.w	r1, r0, r3
 8000c74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c78:	fa24 f303 	lsr.w	r3, r4, r3
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	430c      	orrs	r4, r1
 8000c80:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c84:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3110 	mls	r1, r8, r0, r3
 8000c94:	0c23      	lsrs	r3, r4, #16
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f107 	mul.w	r1, r0, r7
 8000c9e:	4299      	cmp	r1, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x24c>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000caa:	d22c      	bcs.n	8000d06 <__udivmoddi4+0x29e>
 8000cac:	4299      	cmp	r1, r3
 8000cae:	d92a      	bls.n	8000d06 <__udivmoddi4+0x29e>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cbc:	fb08 3311 	mls	r3, r8, r1, r3
 8000cc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc4:	fb01 f307 	mul.w	r3, r1, r7
 8000cc8:	42a3      	cmp	r3, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x276>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000cd4:	d213      	bcs.n	8000cfe <__udivmoddi4+0x296>
 8000cd6:	42a3      	cmp	r3, r4
 8000cd8:	d911      	bls.n	8000cfe <__udivmoddi4+0x296>
 8000cda:	3902      	subs	r1, #2
 8000cdc:	4464      	add	r4, ip
 8000cde:	1ae4      	subs	r4, r4, r3
 8000ce0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ce4:	e739      	b.n	8000b5a <__udivmoddi4+0xf2>
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	e6f0      	b.n	8000acc <__udivmoddi4+0x64>
 8000cea:	4608      	mov	r0, r1
 8000cec:	e706      	b.n	8000afc <__udivmoddi4+0x94>
 8000cee:	45c8      	cmp	r8, r9
 8000cf0:	d2ae      	bcs.n	8000c50 <__udivmoddi4+0x1e8>
 8000cf2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cf6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cfa:	3801      	subs	r0, #1
 8000cfc:	e7a8      	b.n	8000c50 <__udivmoddi4+0x1e8>
 8000cfe:	4631      	mov	r1, r6
 8000d00:	e7ed      	b.n	8000cde <__udivmoddi4+0x276>
 8000d02:	4603      	mov	r3, r0
 8000d04:	e799      	b.n	8000c3a <__udivmoddi4+0x1d2>
 8000d06:	4630      	mov	r0, r6
 8000d08:	e7d4      	b.n	8000cb4 <__udivmoddi4+0x24c>
 8000d0a:	46d6      	mov	lr, sl
 8000d0c:	e77f      	b.n	8000c0e <__udivmoddi4+0x1a6>
 8000d0e:	4463      	add	r3, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e74d      	b.n	8000bb0 <__udivmoddi4+0x148>
 8000d14:	4606      	mov	r6, r0
 8000d16:	4623      	mov	r3, r4
 8000d18:	4608      	mov	r0, r1
 8000d1a:	e70f      	b.n	8000b3c <__udivmoddi4+0xd4>
 8000d1c:	3e02      	subs	r6, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	e730      	b.n	8000b84 <__udivmoddi4+0x11c>
 8000d22:	bf00      	nop

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <main>:

#define MAX_BUFFER 50 // Example buffer size
uint8_t uartBuffer[MAX_BUFFER];

int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2e:	f001 faed 	bl	800230c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d32:	f000 f829 	bl	8000d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 8000d36:	f000 f893 	bl	8000e60 <MX_I2C1_Init>
  MX_RTC_Init();
 8000d3a:	f000 f9e9 	bl	8001110 <MX_RTC_Init>

  // Init GPIO & SPI
  MX_GPIO_Init();
 8000d3e:	f000 f939 	bl	8000fb4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000d42:	f000 f901 	bl	8000f48 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
 8000d46:	2000      	movs	r0, #0
 8000d48:	f001 fa76 	bl	8002238 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f001 fa73 	bl	8002238 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000d52:	2002      	movs	r0, #2
 8000d54:	f001 fa70 	bl	8002238 <BSP_LED_Init>

  for (int i = 0; i <= 3; i++)
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	e008      	b.n	8000d70 <main+0x48>
  {
    BSP_LED_Toggle(LED1); // Init LCD OK
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f001 faba 	bl	80022d8 <BSP_LED_Toggle>
    HAL_Delay(100);
 8000d64:	2064      	movs	r0, #100	@ 0x64
 8000d66:	f001 fb43 	bl	80023f0 <HAL_Delay>
  for (int i = 0; i <= 3; i++)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	ddf3      	ble.n	8000d5e <main+0x36>
  }

  APP_init();
 8000d76:	f001 f8b3 	bl	8001ee0 <APP_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    APP_update();
 8000d7a:	f001 f8bb 	bl	8001ef4 <APP_update>

    BSP_LED_Toggle(LED1); // Looping signal
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f001 faaa 	bl	80022d8 <BSP_LED_Toggle>
    APP_update();
 8000d84:	bf00      	nop
 8000d86:	e7f8      	b.n	8000d7a <main+0x52>

08000d88 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	@ 0x50
 8000d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	2230      	movs	r2, #48	@ 0x30
 8000d94:	2100      	movs	r1, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f004 fece 	bl	8005b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <SystemClock_Config+0xd0>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db4:	4a28      	ldr	r2, [pc, #160]	@ (8000e58 <SystemClock_Config+0xd0>)
 8000db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbc:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <SystemClock_Config+0xd0>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	4b23      	ldr	r3, [pc, #140]	@ (8000e5c <SystemClock_Config+0xd4>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a22      	ldr	r2, [pc, #136]	@ (8000e5c <SystemClock_Config+0xd4>)
 8000dd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <SystemClock_Config+0xd4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000de4:	2309      	movs	r3, #9
 8000de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000de8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dee:	2301      	movs	r3, #1
 8000df0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e00:	23a8      	movs	r3, #168	@ 0xa8
 8000e02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e08:	2307      	movs	r3, #7
 8000e0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f002 faef 	bl	80033f4 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e1c:	f000 f99e 	bl	800115c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e20:	230f      	movs	r3, #15
 8000e22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e24:	2302      	movs	r3, #2
 8000e26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e2c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f002 fd50 	bl	80038e4 <HAL_RCC_ClockConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e4a:	f000 f987 	bl	800115c <Error_Handler>
  }
}
 8000e4e:	bf00      	nop
 8000e50:	3750      	adds	r7, #80	@ 0x50
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40007000 	.word	0x40007000

08000e60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e66:	4b33      	ldr	r3, [pc, #204]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e68:	4a33      	ldr	r2, [pc, #204]	@ (8000f38 <MX_I2C1_Init+0xd8>)
 8000e6a:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e6c:	4b31      	ldr	r3, [pc, #196]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e6e:	4a33      	ldr	r2, [pc, #204]	@ (8000f3c <MX_I2C1_Init+0xdc>)
 8000e70:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e72:	4b30      	ldr	r3, [pc, #192]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e78:	4b2e      	ldr	r3, [pc, #184]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e86:	4b2b      	ldr	r3, [pc, #172]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e8c:	4b29      	ldr	r3, [pc, #164]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b28      	ldr	r3, [pc, #160]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b26      	ldr	r3, [pc, #152]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]

  // I2C init code
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <MX_I2C1_Init+0xe0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a26      	ldr	r2, [pc, #152]	@ (8000f40 <MX_I2C1_Init+0xe0>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <MX_I2C1_Init+0xe0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000eba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	481b      	ldr	r0, [pc, #108]	@ (8000f44 <MX_I2C1_Init+0xe4>)
 8000ed8:	f001 fb94 	bl	8002604 <HAL_GPIO_Init>

	 /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	4b17      	ldr	r3, [pc, #92]	@ (8000f40 <MX_I2C1_Init+0xe0>)
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	4a16      	ldr	r2, [pc, #88]	@ (8000f40 <MX_I2C1_Init+0xe0>)
 8000ee6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <MX_I2C1_Init+0xe0>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ef8:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000efa:	f001 fd63 	bl	80029c4 <HAL_I2C_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_I2C1_Init+0xa8>
  {
    Error_Handler();
 8000f04:	f000 f92a 	bl	800115c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f08:	2100      	movs	r1, #0
 8000f0a:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000f0c:	f002 f9f7 	bl	80032fe <HAL_I2CEx_ConfigAnalogFilter>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_I2C1_Init+0xba>
  {
    Error_Handler();
 8000f16:	f000 f921 	bl	800115c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_I2C1_Init+0xd4>)
 8000f1e:	f002 fa2a 	bl	8003376 <HAL_I2CEx_ConfigDigitalFilter>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C1_Init+0xcc>
  {
    Error_Handler();
 8000f28:	f000 f918 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f2c:	bf00      	nop
 8000f2e:	3720      	adds	r7, #32
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000034 	.word	0x20000034
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	000186a0 	.word	0x000186a0
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020400 	.word	0x40020400

08000f48 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f4e:	4a18      	ldr	r2, [pc, #96]	@ (8000fb0 <MX_SPI1_Init+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f54:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f58:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f78:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f7c:	2238      	movs	r2, #56	@ 0x38
 8000f7e:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f80:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000f92:	4b06      	ldr	r3, [pc, #24]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f94:	220a      	movs	r2, #10
 8000f96:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <MX_SPI1_Init+0x64>)
 8000f9a:	f003 fb8f 	bl	80046bc <HAL_SPI_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_SPI1_Init+0x60>
    {
        BME280_Error_Handler();
 8000fa4:	f000 fae4 	bl	8001570 <BME280_Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	20000088 	.word	0x20000088
 8000fb0:	40013000 	.word	0x40013000

08000fb4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 031c 	add.w	r3, r7, #28
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	4b4c      	ldr	r3, [pc, #304]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a4b      	ldr	r2, [pc, #300]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8000fd4:	f043 0304 	orr.w	r3, r3, #4
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b49      	ldr	r3, [pc, #292]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0304 	and.w	r3, r3, #4
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	4b45      	ldr	r3, [pc, #276]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a44      	ldr	r2, [pc, #272]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b42      	ldr	r3, [pc, #264]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b3e      	ldr	r3, [pc, #248]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100a:	4a3d      	ldr	r2, [pc, #244]	@ (8001100 <MX_GPIO_Init+0x14c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6313      	str	r3, [r2, #48]	@ 0x30
 8001012:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b37      	ldr	r3, [pc, #220]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a36      	ldr	r2, [pc, #216]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001028:	f043 0302 	orr.w	r3, r3, #2
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b30      	ldr	r3, [pc, #192]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	4a2f      	ldr	r2, [pc, #188]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	6313      	str	r3, [r2, #48]	@ 0x30
 800104a:	4b2d      	ldr	r3, [pc, #180]	@ (8001100 <MX_GPIO_Init+0x14c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <MX_GPIO_Init+0x14c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105e:	4a28      	ldr	r2, [pc, #160]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001064:	6313      	str	r3, [r2, #48]	@ 0x30
 8001066:	4b26      	ldr	r3, [pc, #152]	@ (8001100 <MX_GPIO_Init+0x14c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f244 0189 	movw	r1, #16521	@ 0x4089
 8001078:	4822      	ldr	r0, [pc, #136]	@ (8001104 <MX_GPIO_Init+0x150>)
 800107a:	f001 fc6f 	bl	800295c <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2140      	movs	r1, #64	@ 0x40
 8001082:	4821      	ldr	r0, [pc, #132]	@ (8001108 <MX_GPIO_Init+0x154>)
 8001084:	f001 fc6a 	bl	800295c <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001088:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800108e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	4619      	mov	r1, r3
 800109e:	481b      	ldr	r0, [pc, #108]	@ (800110c <MX_GPIO_Init+0x158>)
 80010a0:	f001 fab0 	bl	8002604 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin CS_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin;
 80010a4:	f244 0389 	movw	r3, #16521	@ 0x4089
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4811      	ldr	r0, [pc, #68]	@ (8001104 <MX_GPIO_Init+0x150>)
 80010be:	f001 faa1 	bl	8002604 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010c2:	2340      	movs	r3, #64	@ 0x40
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	480b      	ldr	r0, [pc, #44]	@ (8001108 <MX_GPIO_Init+0x154>)
 80010da:	f001 fa93 	bl	8002604 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010de:	2380      	movs	r3, #128	@ 0x80
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <MX_GPIO_Init+0x154>)
 80010f2:	f001 fa87 	bl	8002604 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80010f6:	bf00      	nop
 80010f8:	3730      	adds	r7, #48	@ 0x30
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800
 8001104:	40020400 	.word	0x40020400
 8001108:	40021800 	.word	0x40021800
 800110c:	40020800 	.word	0x40020800

08001110 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_RTC_Init+0x44>)
 8001116:	4a10      	ldr	r2, [pc, #64]	@ (8001158 <MX_RTC_Init+0x48>)
 8001118:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_RTC_Init+0x44>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_RTC_Init+0x44>)
 8001122:	227f      	movs	r2, #127	@ 0x7f
 8001124:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_RTC_Init+0x44>)
 8001128:	22ff      	movs	r2, #255	@ 0xff
 800112a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_RTC_Init+0x44>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_RTC_Init+0x44>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_RTC_Init+0x44>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800113e:	4805      	ldr	r0, [pc, #20]	@ (8001154 <MX_RTC_Init+0x44>)
 8001140:	f002 ffb0 	bl	80040a4 <HAL_RTC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800114a:	f000 f807 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000e0 	.word	0x200000e0
 8001158:	40002800 	.word	0x40002800

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001160:	b672      	cpsid	i
}
 8001162:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001164:	bf00      	nop
 8001166:	e7fd      	b.n	8001164 <Error_Handler+0x8>

08001168 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a0f      	ldr	r2, [pc, #60]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	603b      	str	r3, [r7, #0]
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_MspInit+0x4c>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08a      	sub	sp, #40	@ 0x28
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 0314 	add.w	r3, r7, #20
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a19      	ldr	r2, [pc, #100]	@ (800123c <HAL_I2C_MspInit+0x84>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d12c      	bne.n	8001234 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <HAL_I2C_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <HAL_I2C_MspInit+0x88>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <HAL_I2C_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80011f6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80011fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011fc:	2312      	movs	r3, #18
 80011fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001208:	2304      	movs	r3, #4
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	4619      	mov	r1, r3
 8001212:	480c      	ldr	r0, [pc, #48]	@ (8001244 <HAL_I2C_MspInit+0x8c>)
 8001214:	f001 f9f6 	bl	8002604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <HAL_I2C_MspInit+0x88>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001220:	4a07      	ldr	r2, [pc, #28]	@ (8001240 <HAL_I2C_MspInit+0x88>)
 8001222:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001226:	6413      	str	r3, [r2, #64]	@ 0x40
 8001228:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <HAL_I2C_MspInit+0x88>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	3728      	adds	r7, #40	@ 0x28
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40005400 	.word	0x40005400
 8001240:	40023800 	.word	0x40023800
 8001244:	40020400 	.word	0x40020400

08001248 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08e      	sub	sp, #56	@ 0x38
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	2230      	movs	r2, #48	@ 0x30
 8001256:	2100      	movs	r1, #0
 8001258:	4618      	mov	r0, r3
 800125a:	f004 fc6d 	bl	8005b38 <memset>
  if(hrtc->Instance==RTC)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0c      	ldr	r2, [pc, #48]	@ (8001294 <HAL_RTC_MspInit+0x4c>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d111      	bne.n	800128c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001268:	2320      	movs	r3, #32
 800126a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800126c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001270:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	4618      	mov	r0, r3
 8001278:	f002 fd54 	bl	8003d24 <HAL_RCCEx_PeriphCLKConfig>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001282:	f7ff ff6b 	bl	800115c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001286:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <HAL_RTC_MspInit+0x50>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800128c:	bf00      	nop
 800128e:	3738      	adds	r7, #56	@ 0x38
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40002800 	.word	0x40002800
 8001298:	42470e3c 	.word	0x42470e3c

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	@ 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a28      	ldr	r2, [pc, #160]	@ (800135c <HAL_SPI_MspInit+0xc0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d149      	bne.n	8001352 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b27      	ldr	r3, [pc, #156]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 80012c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c6:	4a26      	ldr	r2, [pc, #152]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 80012c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ce:	4b24      	ldr	r3, [pc, #144]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b19      	ldr	r3, [pc, #100]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b16      	ldr	r3, [pc, #88]	@ (8001360 <HAL_SPI_MspInit+0xc4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001312:	2360      	movs	r3, #96	@ 0x60
 8001314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001322:	2305      	movs	r3, #5
 8001324:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4619      	mov	r1, r3
 800132c:	480d      	ldr	r0, [pc, #52]	@ (8001364 <HAL_SPI_MspInit+0xc8>)
 800132e:	f001 f969 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001332:	2320      	movs	r3, #32
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4806      	ldr	r0, [pc, #24]	@ (8001368 <HAL_SPI_MspInit+0xcc>)
 800134e:	f001 f959 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3728      	adds	r7, #40	@ 0x28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40013000 	.word	0x40013000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020400 	.word	0x40020400

0800136c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	@ 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <HAL_UART_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 8001398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a10      	ldr	r2, [pc, #64]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013c6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d8:	2307      	movs	r3, #7
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <HAL_UART_MspInit+0x8c>)
 80013e4:	f001 f90e 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40004800 	.word	0x40004800
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020c00 	.word	0x40020c00

080013fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <NMI_Handler+0x4>

08001404 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <HardFault_Handler+0x4>

0800140c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <MemManage_Handler+0x4>

08001414 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <BusFault_Handler+0x4>

0800141c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001420:	bf00      	nop
 8001422:	e7fd      	b.n	8001420 <UsageFault_Handler+0x4>

08001424 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001452:	f000 ffad 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001484:	f7ff ffea 	bl	800145c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	@ (80014bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	@ (80014c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	@ (80014cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014ae:	f004 fb5b 	bl	8005b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff fc39 	bl	8000d28 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80014b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80014c4:	08005cf0 	.word	0x08005cf0
  ldr r2, =_sbss
 80014c8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80014cc:	200001f0 	.word	0x200001f0

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <update_lcd_clock>:

RTC_TimeTypeDef sTime = {0}; // key user variables for RTC date
RTC_DateTypeDef sDate = {0};

void update_lcd_clock(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80014d8:	2201      	movs	r2, #1
 80014da:	4905      	ldr	r1, [pc, #20]	@ (80014f0 <update_lcd_clock+0x1c>)
 80014dc:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <update_lcd_clock+0x20>)
 80014de:	f002 fefe 	bl	80042de <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 80014e2:	2201      	movs	r2, #1
 80014e4:	4904      	ldr	r1, [pc, #16]	@ (80014f8 <update_lcd_clock+0x24>)
 80014e6:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <update_lcd_clock+0x20>)
 80014e8:	f002 ffdb 	bl	80044a2 <HAL_RTC_GetDate>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000100 	.word	0x20000100
 80014f4:	200000e0 	.word	0x200000e0
 80014f8:	20000114 	.word	0x20000114

080014fc <clock_init_code>:

void clock_init_code(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    /*
     * * Initialize RTC and set the Time and Date
     */

    sTime.Hours = 0x01;
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <clock_init_code+0x68>)
 8001502:	2201      	movs	r2, #1
 8001504:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0x20;
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <clock_init_code+0x68>)
 8001508:	2220      	movs	r2, #32
 800150a:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0x00;
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <clock_init_code+0x68>)
 800150e:	2200      	movs	r2, #0
 8001510:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <clock_init_code+0x68>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <clock_init_code+0x68>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800151e:	2201      	movs	r2, #1
 8001520:	4910      	ldr	r1, [pc, #64]	@ (8001564 <clock_init_code+0x68>)
 8001522:	4811      	ldr	r0, [pc, #68]	@ (8001568 <clock_init_code+0x6c>)
 8001524:	f002 fe41 	bl	80041aa <HAL_RTC_SetTime>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <clock_init_code+0x36>
    {
        Error_Handler();
 800152e:	f7ff fe15 	bl	800115c <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <clock_init_code+0x70>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_AUGUST;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <clock_init_code+0x70>)
 800153a:	2208      	movs	r2, #8
 800153c:	705a      	strb	r2, [r3, #1]
    sDate.Date = 0x05;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <clock_init_code+0x70>)
 8001540:	2205      	movs	r2, #5
 8001542:	709a      	strb	r2, [r3, #2]
    sDate.Year = 0x24;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <clock_init_code+0x70>)
 8001546:	2224      	movs	r2, #36	@ 0x24
 8001548:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800154a:	2201      	movs	r2, #1
 800154c:	4907      	ldr	r1, [pc, #28]	@ (800156c <clock_init_code+0x70>)
 800154e:	4806      	ldr	r0, [pc, #24]	@ (8001568 <clock_init_code+0x6c>)
 8001550:	f002 ff23 	bl	800439a <HAL_RTC_SetDate>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <clock_init_code+0x62>
    {
        Error_Handler();
 800155a:	f7ff fdff 	bl	800115c <Error_Handler>
    }
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000100 	.word	0x20000100
 8001568:	200000e0 	.word	0x200000e0
 800156c:	20000114 	.word	0x20000114

08001570 <BME280_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void BME280_Error_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <BME280_Error_Handler+0x4>

08001578 <SPI_Write>:
    }
    /* USER CODE END Error_Handler_Debug */
}

static void SPI_Write(uint8_t reg, uint8_t *data, uint16_t size)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	4613      	mov	r3, r2
 8001586:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg & WRITE_CMD_BIT; // Apply the write command mask
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800158e:	b2db      	uxtb	r3, r3
 8001590:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateLow);
 8001592:	2200      	movs	r2, #0
 8001594:	2108      	movs	r1, #8
 8001596:	480d      	ldr	r0, [pc, #52]	@ (80015cc <SPI_Write+0x54>)
 8001598:	f001 f9e0 	bl	800295c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 800159c:	f107 010f 	add.w	r1, r7, #15
 80015a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015a4:	2201      	movs	r2, #1
 80015a6:	480a      	ldr	r0, [pc, #40]	@ (80015d0 <SPI_Write+0x58>)
 80015a8:	f003 f911 	bl	80047ce <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80015ac:	88ba      	ldrh	r2, [r7, #4]
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015b2:	6839      	ldr	r1, [r7, #0]
 80015b4:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <SPI_Write+0x58>)
 80015b6:	f003 f90a 	bl	80047ce <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateHigh);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2108      	movs	r1, #8
 80015be:	4803      	ldr	r0, [pc, #12]	@ (80015cc <SPI_Write+0x54>)
 80015c0:	f001 f9cc 	bl	800295c <HAL_GPIO_WritePin>
}
 80015c4:	bf00      	nop
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40020400 	.word	0x40020400
 80015d0:	20000088 	.word	0x20000088

080015d4 <SPI_Read>:

static void SPI_Read(uint8_t reg, uint8_t *data, uint16_t size)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
 80015e0:	4613      	mov	r3, r2
 80015e2:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg | READ_CMD_BIT; // Apply the read command mask
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateLow);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2108      	movs	r1, #8
 80015f2:	480d      	ldr	r0, [pc, #52]	@ (8001628 <SPI_Read+0x54>)
 80015f4:	f001 f9b2 	bl	800295c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), TIMEOUT);
 80015f8:	f107 010f 	add.w	r1, r7, #15
 80015fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001600:	2201      	movs	r2, #1
 8001602:	480a      	ldr	r0, [pc, #40]	@ (800162c <SPI_Read+0x58>)
 8001604:	f003 f8e3 	bl	80047ce <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, size, TIMEOUT);
 8001608:	88ba      	ldrh	r2, [r7, #4]
 800160a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800160e:	6839      	ldr	r1, [r7, #0]
 8001610:	4806      	ldr	r0, [pc, #24]	@ (800162c <SPI_Read+0x58>)
 8001612:	f003 fa1f 	bl	8004a54 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateHigh);
 8001616:	2201      	movs	r2, #1
 8001618:	2108      	movs	r1, #8
 800161a:	4803      	ldr	r0, [pc, #12]	@ (8001628 <SPI_Read+0x54>)
 800161c:	f001 f99e 	bl	800295c <HAL_GPIO_WritePin>
}
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40020400 	.word	0x40020400
 800162c:	20000088 	.word	0x20000088

08001630 <tempFSM_init>:

static tempState_t currentTempState;

void tempFSM_init()
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
    currentTempState = TEMP_NORMAL;
 8001634:	4b03      	ldr	r3, [pc, #12]	@ (8001644 <tempFSM_init+0x14>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	20000118 	.word	0x20000118

08001648 <trimmingParametersRead>:
static float temp, hum;

// 4.2.2 Trimming parameter readout
// UNDERSTAND AND ADAPT TO OWN IT
static void trimmingParametersRead(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	@ 0x28
 800164c:	af00      	add	r7, sp, #0
    uint8_t calibData1[26]; // Table 18: Memory map -> calib00..calib25 | 0x88 to 0xA1
    uint8_t calibData2[7];

    SPI_Read(CALIBMEMADD1, calibData1, CALIBDATASIZE1); // 8-bit temperature calibration value
 800164e:	f107 030c 	add.w	r3, r7, #12
 8001652:	2219      	movs	r2, #25
 8001654:	4619      	mov	r1, r3
 8001656:	2088      	movs	r0, #136	@ 0x88
 8001658:	f7ff ffbc 	bl	80015d4 <SPI_Read>
    SPI_Read(CALIBMEMADD2, calibData2, CALIBDATASIZE2); // 8-bit humidity calibration value
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2207      	movs	r2, #7
 8001660:	4619      	mov	r1, r3
 8001662:	20e1      	movs	r0, #225	@ 0xe1
 8001664:	f7ff ffb6 	bl	80015d4 <SPI_Read>

    // Combine the bytes read from the calibration memory into 16-bit integers.
    dig_T1 = (calibData1[1] << 8) | calibData1[0];
 8001668:	7b7b      	ldrb	r3, [r7, #13]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	7b3b      	ldrb	r3, [r7, #12]
 8001670:	b21b      	sxth	r3, r3
 8001672:	4313      	orrs	r3, r2
 8001674:	b21b      	sxth	r3, r3
 8001676:	b29a      	uxth	r2, r3
 8001678:	4b4d      	ldr	r3, [pc, #308]	@ (80017b0 <trimmingParametersRead+0x168>)
 800167a:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calibData1[3] << 8) | calibData1[2];
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	b21a      	sxth	r2, r3
 8001682:	7bbb      	ldrb	r3, [r7, #14]
 8001684:	b21b      	sxth	r3, r3
 8001686:	4313      	orrs	r3, r2
 8001688:	b21a      	sxth	r2, r3
 800168a:	4b4a      	ldr	r3, [pc, #296]	@ (80017b4 <trimmingParametersRead+0x16c>)
 800168c:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calibData1[5] << 8) | calibData1[4];
 800168e:	7c7b      	ldrb	r3, [r7, #17]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21a      	sxth	r2, r3
 8001694:	7c3b      	ldrb	r3, [r7, #16]
 8001696:	b21b      	sxth	r3, r3
 8001698:	4313      	orrs	r3, r2
 800169a:	b21a      	sxth	r2, r3
 800169c:	4b46      	ldr	r3, [pc, #280]	@ (80017b8 <trimmingParametersRead+0x170>)
 800169e:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calibData1[7] << 8) | calibData1[6];
 80016a0:	7cfb      	ldrb	r3, [r7, #19]
 80016a2:	021b      	lsls	r3, r3, #8
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	7cbb      	ldrb	r3, [r7, #18]
 80016a8:	b21b      	sxth	r3, r3
 80016aa:	4313      	orrs	r3, r2
 80016ac:	b21b      	sxth	r3, r3
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b42      	ldr	r3, [pc, #264]	@ (80017bc <trimmingParametersRead+0x174>)
 80016b2:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calibData1[9] << 8) | calibData1[8];
 80016b4:	7d7b      	ldrb	r3, [r7, #21]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	7d3b      	ldrb	r3, [r7, #20]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <trimmingParametersRead+0x178>)
 80016c4:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calibData1[11] << 8) | calibData1[10];
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7dbb      	ldrb	r3, [r7, #22]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <trimmingParametersRead+0x17c>)
 80016d6:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calibData1[13] << 8) | calibData1[12];
 80016d8:	7e7b      	ldrb	r3, [r7, #25]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7e3b      	ldrb	r3, [r7, #24]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <trimmingParametersRead+0x180>)
 80016e8:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calibData1[15] << 8) | calibData1[14];
 80016ea:	7efb      	ldrb	r3, [r7, #27]
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	b21a      	sxth	r2, r3
 80016f0:	7ebb      	ldrb	r3, [r7, #26]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21a      	sxth	r2, r3
 80016f8:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <trimmingParametersRead+0x184>)
 80016fa:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calibData1[17] << 8) | calibData1[16];
 80016fc:	7f7b      	ldrb	r3, [r7, #29]
 80016fe:	021b      	lsls	r3, r3, #8
 8001700:	b21a      	sxth	r2, r3
 8001702:	7f3b      	ldrb	r3, [r7, #28]
 8001704:	b21b      	sxth	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b21a      	sxth	r2, r3
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <trimmingParametersRead+0x188>)
 800170c:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calibData1[19] << 8) | calibData1[18];
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	021b      	lsls	r3, r3, #8
 8001712:	b21a      	sxth	r2, r3
 8001714:	7fbb      	ldrb	r3, [r7, #30]
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21a      	sxth	r2, r3
 800171c:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <trimmingParametersRead+0x18c>)
 800171e:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calibData1[21] << 8) | calibData1[20];
 8001720:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	b21a      	sxth	r2, r3
 8001728:	f897 3020 	ldrb.w	r3, [r7, #32]
 800172c:	b21b      	sxth	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b21a      	sxth	r2, r3
 8001732:	4b29      	ldr	r3, [pc, #164]	@ (80017d8 <trimmingParametersRead+0x190>)
 8001734:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calibData1[23] << 8) | calibData1[22];
 8001736:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800173a:	021b      	lsls	r3, r3, #8
 800173c:	b21a      	sxth	r2, r3
 800173e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001742:	b21b      	sxth	r3, r3
 8001744:	4313      	orrs	r3, r2
 8001746:	b21a      	sxth	r2, r3
 8001748:	4b24      	ldr	r3, [pc, #144]	@ (80017dc <trimmingParametersRead+0x194>)
 800174a:	801a      	strh	r2, [r3, #0]

    dig_H1 = calibData1[24];
 800174c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001750:	461a      	mov	r2, r3
 8001752:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <trimmingParametersRead+0x198>)
 8001754:	801a      	strh	r2, [r3, #0]
    dig_H2 = (calibData2[1] << 8) | calibData2[0];
 8001756:	797b      	ldrb	r3, [r7, #5]
 8001758:	021b      	lsls	r3, r3, #8
 800175a:	b21a      	sxth	r2, r3
 800175c:	793b      	ldrb	r3, [r7, #4]
 800175e:	b21b      	sxth	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b21a      	sxth	r2, r3
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <trimmingParametersRead+0x19c>)
 8001766:	801a      	strh	r2, [r3, #0]
    dig_H3 = calibData2[2];
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	461a      	mov	r2, r3
 800176c:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <trimmingParametersRead+0x1a0>)
 800176e:	801a      	strh	r2, [r3, #0]
    dig_H4 = (calibData2[3] << 4) | (calibData2[4] & 0x0F);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	b21a      	sxth	r2, r3
 8001776:	7a3b      	ldrb	r3, [r7, #8]
 8001778:	b21b      	sxth	r3, r3
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	b21b      	sxth	r3, r3
 8001780:	4313      	orrs	r3, r2
 8001782:	b21a      	sxth	r2, r3
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <trimmingParametersRead+0x1a4>)
 8001786:	801a      	strh	r2, [r3, #0]
    dig_H5 = (calibData2[4] << 4) | (calibData2[5] >> 4);
 8001788:	7a3b      	ldrb	r3, [r7, #8]
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	b21a      	sxth	r2, r3
 800178e:	7a7b      	ldrb	r3, [r7, #9]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	b2db      	uxtb	r3, r3
 8001794:	b21b      	sxth	r3, r3
 8001796:	4313      	orrs	r3, r2
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <trimmingParametersRead+0x1a8>)
 800179c:	801a      	strh	r2, [r3, #0]
    dig_H6 = calibData2[6];
 800179e:	7abb      	ldrb	r3, [r7, #10]
 80017a0:	b21a      	sxth	r2, r3
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <trimmingParametersRead+0x1ac>)
 80017a4:	801a      	strh	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	@ 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2000011a 	.word	0x2000011a
 80017b4:	20000122 	.word	0x20000122
 80017b8:	20000124 	.word	0x20000124
 80017bc:	2000011c 	.word	0x2000011c
 80017c0:	20000126 	.word	0x20000126
 80017c4:	20000128 	.word	0x20000128
 80017c8:	2000012a 	.word	0x2000012a
 80017cc:	2000012c 	.word	0x2000012c
 80017d0:	2000012e 	.word	0x2000012e
 80017d4:	20000130 	.word	0x20000130
 80017d8:	20000132 	.word	0x20000132
 80017dc:	20000134 	.word	0x20000134
 80017e0:	2000011e 	.word	0x2000011e
 80017e4:	20000136 	.word	0x20000136
 80017e8:	20000120 	.word	0x20000120
 80017ec:	20000138 	.word	0x20000138
 80017f0:	2000013a 	.word	0x2000013a
 80017f4:	2000013c 	.word	0x2000013c

080017f8 <BME280_init>:

// Function to initialize the BME280 sensor
void BME280_init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
    clock_init_code();
 80017fe:	f7ff fe7d 	bl	80014fc <clock_init_code>

    tempFSM_init();
 8001802:	f7ff ff15 	bl	8001630 <tempFSM_init>

    // Read trimming parameters from the sensor
    trimmingParametersRead();
 8001806:	f7ff ff1f 	bl	8001648 <trimmingParametersRead>
    /*
    5.4.2 The "reset" register contains the soft reset word reset[7:0].
    If the value 0xB6 is written to the register, the device is reset using the complete power-on-reset procedure.
    The readout value is 0x00.
    */
    uint8_t resetSeq = 0xB6;
 800180a:	23b6      	movs	r3, #182	@ 0xb6
 800180c:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrlHum = 0x01;
 800180e:	2301      	movs	r3, #1
 8001810:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrlMeas = 0xA3; // 0b10100011 in hexadecimal
 8001812:	23a3      	movs	r3, #163	@ 0xa3
 8001814:	717b      	strb	r3, [r7, #5]
    uint8_t config = 0x10;   // 0b00010000 in hexadecimal
 8001816:	2310      	movs	r3, #16
 8001818:	713b      	strb	r3, [r7, #4]

    // Write reset sequence to the reset register
    SPI_Write(RESET_REG, &resetSeq, CMDWRITESIZE);
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	2201      	movs	r2, #1
 800181e:	4619      	mov	r1, r3
 8001820:	20e0      	movs	r0, #224	@ 0xe0
 8001822:	f7ff fea9 	bl	8001578 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001826:	2064      	movs	r0, #100	@ 0x64
 8001828:	f000 fde2 	bl	80023f0 <HAL_Delay>

    // Write control settings to the control registers
    SPI_Write(CTRL_HUM, &ctrlHum, CMDWRITESIZE);
 800182c:	1dbb      	adds	r3, r7, #6
 800182e:	2201      	movs	r2, #1
 8001830:	4619      	mov	r1, r3
 8001832:	20f2      	movs	r0, #242	@ 0xf2
 8001834:	f7ff fea0 	bl	8001578 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 8001838:	2064      	movs	r0, #100	@ 0x64
 800183a:	f000 fdd9 	bl	80023f0 <HAL_Delay>

    SPI_Write(CTRL_MEAS, &ctrlMeas, CMDWRITESIZE);
 800183e:	1d7b      	adds	r3, r7, #5
 8001840:	2201      	movs	r2, #1
 8001842:	4619      	mov	r1, r3
 8001844:	20f4      	movs	r0, #244	@ 0xf4
 8001846:	f7ff fe97 	bl	8001578 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 800184a:	2064      	movs	r0, #100	@ 0x64
 800184c:	f000 fdd0 	bl	80023f0 <HAL_Delay>

    SPI_Write(CONFIG_REG, &config, CMDWRITESIZE);
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2201      	movs	r2, #1
 8001854:	4619      	mov	r1, r3
 8001856:	20f5      	movs	r0, #245	@ 0xf5
 8001858:	f7ff fe8e 	bl	8001578 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 800185c:	2064      	movs	r0, #100	@ 0x64
 800185e:	f000 fdc7 	bl	80023f0 <HAL_Delay>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <BME280_compensate_T_int32>:
// Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
static BME280_S32_t t_fine; // t_fine carries fine temperature as global value

// Temperature compensation formula taken from datasheet (please check page 25/60 for reference).
static BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T)
{
 800186c:	b480      	push	{r7}
 800186e:	b087      	sub	sp, #28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
    BME280_S32_t var1, var2, T;
    var1 = ((((adc_T >> 3) - ((BME280_S32_t)dig_T1 << 1))) * ((BME280_S32_t)dig_T2)) >> 11;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	10da      	asrs	r2, r3, #3
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <BME280_compensate_T_int32+0x74>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	4a18      	ldr	r2, [pc, #96]	@ (80018e4 <BME280_compensate_T_int32+0x78>)
 8001882:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	12db      	asrs	r3, r3, #11
 800188c:	617b      	str	r3, [r7, #20]
    var2 = (((((adc_T >> 4) - ((BME280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BME280_S32_t)dig_T1))) >> 12) * ((BME280_S32_t)dig_T3)) >> 14;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	111b      	asrs	r3, r3, #4
 8001892:	4a13      	ldr	r2, [pc, #76]	@ (80018e0 <BME280_compensate_T_int32+0x74>)
 8001894:	8812      	ldrh	r2, [r2, #0]
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	1112      	asrs	r2, r2, #4
 800189c:	4910      	ldr	r1, [pc, #64]	@ (80018e0 <BME280_compensate_T_int32+0x74>)
 800189e:	8809      	ldrh	r1, [r1, #0]
 80018a0:	1a52      	subs	r2, r2, r1
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	131b      	asrs	r3, r3, #12
 80018a8:	4a0f      	ldr	r2, [pc, #60]	@ (80018e8 <BME280_compensate_T_int32+0x7c>)
 80018aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	139b      	asrs	r3, r3, #14
 80018b4:	613b      	str	r3, [r7, #16]
    t_fine = var1 + var2;
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <BME280_compensate_T_int32+0x80>)
 80018be:	6013      	str	r3, [r2, #0]
    T = (t_fine * 5 + 128) >> 8;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <BME280_compensate_T_int32+0x80>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3380      	adds	r3, #128	@ 0x80
 80018cc:	121b      	asrs	r3, r3, #8
 80018ce:	60fb      	str	r3, [r7, #12]
    return T;
 80018d0:	68fb      	ldr	r3, [r7, #12]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	371c      	adds	r7, #28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	2000011a 	.word	0x2000011a
 80018e4:	20000122 	.word	0x20000122
 80018e8:	20000124 	.word	0x20000124
 80018ec:	20000150 	.word	0x20000150

080018f0 <bme280_compensate_H_int32>:

// Humidity compensation formula taken from datasheet (please check page 25/60 for reference).
// Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
// Output value of “47445” represents 47445/1024 = 46.333 %RH.
static BME280_U32_t bme280_compensate_H_int32(BME280_S32_t adc_H)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    BME280_S32_t v_x1_u32r;
    v_x1_u32r = (t_fine - ((BME280_S32_t)76800));
 80018f8:	4b2c      	ldr	r3, [pc, #176]	@ (80019ac <bme280_compensate_H_int32+0xbc>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001900:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) * v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) * ((BME280_S32_t)dig_H2) + 8192) >> 14));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	039a      	lsls	r2, r3, #14
 8001906:	4b2a      	ldr	r3, [pc, #168]	@ (80019b0 <bme280_compensate_H_int32+0xc0>)
 8001908:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190c:	051b      	lsls	r3, r3, #20
 800190e:	1ad2      	subs	r2, r2, r3
 8001910:	4b28      	ldr	r3, [pc, #160]	@ (80019b4 <bme280_compensate_H_int32+0xc4>)
 8001912:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001916:	4619      	mov	r1, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001924:	13db      	asrs	r3, r3, #15
 8001926:	4a24      	ldr	r2, [pc, #144]	@ (80019b8 <bme280_compensate_H_int32+0xc8>)
 8001928:	f9b2 2000 	ldrsh.w	r2, [r2]
 800192c:	4611      	mov	r1, r2
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	fb01 f202 	mul.w	r2, r1, r2
 8001934:	1292      	asrs	r2, r2, #10
 8001936:	4921      	ldr	r1, [pc, #132]	@ (80019bc <bme280_compensate_H_int32+0xcc>)
 8001938:	8809      	ldrh	r1, [r1, #0]
 800193a:	4608      	mov	r0, r1
 800193c:	68f9      	ldr	r1, [r7, #12]
 800193e:	fb00 f101 	mul.w	r1, r0, r1
 8001942:	12c9      	asrs	r1, r1, #11
 8001944:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001948:	fb01 f202 	mul.w	r2, r1, r2
 800194c:	1292      	asrs	r2, r2, #10
 800194e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001952:	491b      	ldr	r1, [pc, #108]	@ (80019c0 <bme280_compensate_H_int32+0xd0>)
 8001954:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001958:	fb01 f202 	mul.w	r2, r1, r2
 800195c:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001960:	1392      	asrs	r2, r2, #14
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((BME280_S32_t)dig_H1)) >> 4));
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	13db      	asrs	r3, r3, #15
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	13d2      	asrs	r2, r2, #15
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	11db      	asrs	r3, r3, #7
 8001976:	4a13      	ldr	r2, [pc, #76]	@ (80019c4 <bme280_compensate_H_int32+0xd4>)
 8001978:	8812      	ldrh	r2, [r2, #0]
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	111b      	asrs	r3, r3, #4
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800198c:	60fb      	str	r3, [r7, #12]
    v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001994:	bfa8      	it	ge
 8001996:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 800199a:	60fb      	str	r3, [r7, #12]
    return (BME280_U32_t)(v_x1_u32r >> 12);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	131b      	asrs	r3, r3, #12
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	20000150 	.word	0x20000150
 80019b0:	20000138 	.word	0x20000138
 80019b4:	2000013a 	.word	0x2000013a
 80019b8:	2000013c 	.word	0x2000013c
 80019bc:	20000120 	.word	0x20000120
 80019c0:	20000136 	.word	0x20000136
 80019c4:	2000011e 	.word	0x2000011e

080019c8 <BME280_read>:
{
    return hum;
}

static uint8_t BME280_read(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
    uint8_t sensorData[8];
    uint8_t chipID;

    SPI_Read(CHIPIDREG, &chipID, MEMADDRESSSIZE);
 80019ce:	1cfb      	adds	r3, r7, #3
 80019d0:	2201      	movs	r2, #1
 80019d2:	4619      	mov	r1, r3
 80019d4:	20d0      	movs	r0, #208	@ 0xd0
 80019d6:	f7ff fdfd 	bl	80015d4 <SPI_Read>

    if (chipID == 0x60)
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	2b60      	cmp	r3, #96	@ 0x60
 80019de:	d118      	bne.n	8001a12 <BME280_read+0x4a>
        {
            BSP_LED_Toggle(LED2); // sensor ID OK
            HAL_Delay(100);
        }
#endif
        SPI_Read(RAWDATAREG1, sensorData, RAWDATASIZE);
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2208      	movs	r2, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	20f7      	movs	r0, #247	@ 0xf7
 80019e8:	f7ff fdf4 	bl	80015d4 <SPI_Read>

        /* Data readout is done by starting a burst read from 0xF7 to 0xFC (temperature and pressure) or from 0xF7 to 0xFE
         * (temperature, pressure and humidity). The data are read out in an unsigned 20-bit format both for pressure and
         * for temperature and in an unsigned 16-bit format for humidity. */

        tADC = (sensorData[3] << 12) | (sensorData[4] << 4) | (sensorData[5] >> 4); // WE CAN RETURN THIS WITH * & in the function signature
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	031a      	lsls	r2, r3, #12
 80019f0:	7a3b      	ldrb	r3, [r7, #8]
 80019f2:	011b      	lsls	r3, r3, #4
 80019f4:	4313      	orrs	r3, r2
 80019f6:	7a7a      	ldrb	r2, [r7, #9]
 80019f8:	0912      	lsrs	r2, r2, #4
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	4313      	orrs	r3, r2
 80019fe:	4a0f      	ldr	r2, [pc, #60]	@ (8001a3c <BME280_read+0x74>)
 8001a00:	6013      	str	r3, [r2, #0]
        hADC = (sensorData[6] << 8) | sensorData[7];
 8001a02:	7abb      	ldrb	r3, [r7, #10]
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	7afa      	ldrb	r2, [r7, #11]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001a40 <BME280_read+0x78>)
 8001a0c:	6013      	str	r3, [r2, #0]

        return 0; // check state of the function return and pass the data with pointer * & for the return of tADC hADC
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e00f      	b.n	8001a32 <BME280_read+0x6a>
    }
    else
    {
        for (int i = 0; i <= 2; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e008      	b.n	8001a2a <BME280_read+0x62>
        {
            BSP_LED_Toggle(LED3); // sensor ID ERROR
 8001a18:	2002      	movs	r0, #2
 8001a1a:	f000 fc5d 	bl	80022d8 <BSP_LED_Toggle>
            HAL_Delay(100);
 8001a1e:	2064      	movs	r0, #100	@ 0x64
 8001a20:	f000 fce6 	bl	80023f0 <HAL_Delay>
        for (int i = 0; i <= 2; i++)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	3301      	adds	r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	ddf3      	ble.n	8001a18 <BME280_read+0x50>
        }

        return 1;
 8001a30:	2301      	movs	r3, #1
    }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000140 	.word	0x20000140
 8001a40:	20000144 	.word	0x20000144

08001a44 <eval_data>:

void eval_data()
{
 8001a44:	b5b0      	push	{r4, r5, r7, lr}
 8001a46:	b08e      	sub	sp, #56	@ 0x38
 8001a48:	af00      	add	r7, sp, #0
    uint8_t message[50];
    if (temp > THRESHOLD_TEMP)
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <eval_data+0x70>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	eeb3 7a08 	vmov.f32	s14, #56	@ 0x41c00000  24.0
 8001a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	dd14      	ble.n	8001a88 <eval_data+0x44>
    {
        currentTempState = TEMP_ALARM;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <eval_data+0x74>)
 8001a60:	2201      	movs	r2, #1
 8001a62:	701a      	strb	r2, [r3, #0]
        strcpy((char *)message, "Temperature Alarm State.\r\n");
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	4a15      	ldr	r2, [pc, #84]	@ (8001abc <eval_data+0x78>)
 8001a68:	461c      	mov	r4, r3
 8001a6a:	4615      	mov	r5, r2
 8001a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a74:	c403      	stmia	r4!, {r0, r1}
 8001a76:	8022      	strh	r2, [r4, #0]
 8001a78:	3402      	adds	r4, #2
 8001a7a:	0c13      	lsrs	r3, r2, #16
 8001a7c:	7023      	strb	r3, [r4, #0]
        uartSendString(message);
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fbad 	bl	80021e0 <uartSendString>
    {
        currentTempState = TEMP_NORMAL;
        strcpy((char *)message, "Temperature Normal State.\r\n");
        uartSendString(message);
    }
}
 8001a86:	e010      	b.n	8001aaa <eval_data+0x66>
        currentTempState = TEMP_NORMAL;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab8 <eval_data+0x74>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
        strcpy((char *)message, "Temperature Normal State.\r\n");
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4a0b      	ldr	r2, [pc, #44]	@ (8001ac0 <eval_data+0x7c>)
 8001a92:	461c      	mov	r4, r3
 8001a94:	4615      	mov	r5, r2
 8001a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uartSendString(message);
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f000 fb9b 	bl	80021e0 <uartSendString>
}
 8001aaa:	bf00      	nop
 8001aac:	3738      	adds	r7, #56	@ 0x38
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000148 	.word	0x20000148
 8001ab8:	20000118 	.word	0x20000118
 8001abc:	08005bc8 	.word	0x08005bc8
 8001ac0:	08005be4 	.word	0x08005be4

08001ac4 <BME280_calculate>:

void BME280_calculate(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
    temp = ((float)BME280_compensate_T_int32(tADC)) / 100.0; // from integer to float
 8001ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <BME280_calculate+0x74>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fecd 	bl	800186c <BME280_compensate_T_int32>
 8001ad2:	ee07 0a90 	vmov	s15, r0
 8001ad6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fcf1 	bl	80004c4 <__aeabi_f2d>
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <BME280_calculate+0x78>)
 8001ae8:	f7fe fe6e 	bl	80007c8 <__aeabi_ddiv>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	4610      	mov	r0, r2
 8001af2:	4619      	mov	r1, r3
 8001af4:	f7fe ff50 	bl	8000998 <__aeabi_d2f>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <BME280_calculate+0x7c>)
 8001afc:	6013      	str	r3, [r2, #0]
    hum = ((float)bme280_compensate_H_int32(hADC)) / 1024.0; // WATCHOUT FOR IMPLICIT TYPECASTS!!!!!!!!!
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <BME280_calculate+0x80>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff fef4 	bl	80018f0 <bme280_compensate_H_int32>
 8001b08:	ee07 0a90 	vmov	s15, r0
 8001b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b10:	ee17 0a90 	vmov	r0, s15
 8001b14:	f7fe fcd6 	bl	80004c4 <__aeabi_f2d>
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <BME280_calculate+0x84>)
 8001b1e:	f7fe fe53 	bl	80007c8 <__aeabi_ddiv>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4610      	mov	r0, r2
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f7fe ff35 	bl	8000998 <__aeabi_d2f>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	4a06      	ldr	r2, [pc, #24]	@ (8001b4c <BME280_calculate+0x88>)
 8001b32:	6013      	str	r3, [r2, #0]
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000140 	.word	0x20000140
 8001b3c:	40590000 	.word	0x40590000
 8001b40:	20000148 	.word	0x20000148
 8001b44:	20000144 	.word	0x20000144
 8001b48:	40900000 	.word	0x40900000
 8001b4c:	2000014c 	.word	0x2000014c

08001b50 <prepare_sensor_data_for_uart>:

char tempStr[20];
char humStr[20];

void prepare_sensor_data_for_uart(uint8_t *message_1, uint8_t *message_2)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
    int intPart = (int)temp;
 8001b5a:	4b51      	ldr	r3, [pc, #324]	@ (8001ca0 <prepare_sensor_data_for_uart+0x150>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b64:	ee17 3a90 	vmov	r3, s15
 8001b68:	60fb      	str	r3, [r7, #12]
    int fracPart = (int)((temp - intPart) * 100);
 8001b6a:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca0 <prepare_sensor_data_for_uart+0x150>)
 8001b6c:	ed93 7a00 	vldr	s14, [r3]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	ee07 3a90 	vmov	s15, r3
 8001b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001ca4 <prepare_sensor_data_for_uart+0x154>
 8001b82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b8a:	ee17 3a90 	vmov	r3, s15
 8001b8e:	60bb      	str	r3, [r7, #8]
    strcpy((char *)message_1, "Temperature: ");
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a45      	ldr	r2, [pc, #276]	@ (8001ca8 <prepare_sensor_data_for_uart+0x158>)
 8001b94:	461c      	mov	r4, r3
 8001b96:	4613      	mov	r3, r2
 8001b98:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b9a:	6020      	str	r0, [r4, #0]
 8001b9c:	6061      	str	r1, [r4, #4]
 8001b9e:	60a2      	str	r2, [r4, #8]
 8001ba0:	881b      	ldrh	r3, [r3, #0]
 8001ba2:	81a3      	strh	r3, [r4, #12]
    itoa(intPart, tempStr, 10);
 8001ba4:	220a      	movs	r2, #10
 8001ba6:	4941      	ldr	r1, [pc, #260]	@ (8001cac <prepare_sensor_data_for_uart+0x15c>)
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f003 ff81 	bl	8005ab0 <itoa>
    strcat((char *)message_1, tempStr);
 8001bae:	493f      	ldr	r1, [pc, #252]	@ (8001cac <prepare_sensor_data_for_uart+0x15c>)
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f003 ffc9 	bl	8005b48 <strcat>
    strcat((char *)message_1, ".");
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fb18 	bl	80001ec <strlen>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	493a      	ldr	r1, [pc, #232]	@ (8001cb0 <prepare_sensor_data_for_uart+0x160>)
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	460b      	mov	r3, r1
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	8013      	strh	r3, [r2, #0]
    itoa(fracPart, tempStr, 10);
 8001bce:	220a      	movs	r2, #10
 8001bd0:	4936      	ldr	r1, [pc, #216]	@ (8001cac <prepare_sensor_data_for_uart+0x15c>)
 8001bd2:	68b8      	ldr	r0, [r7, #8]
 8001bd4:	f003 ff6c 	bl	8005ab0 <itoa>
    strcat((char *)message_1, tempStr);
 8001bd8:	4934      	ldr	r1, [pc, #208]	@ (8001cac <prepare_sensor_data_for_uart+0x15c>)
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f003 ffb4 	bl	8005b48 <strcat>
    strcat((char *)message_1, " C\r\n");
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7fe fb03 	bl	80001ec <strlen>
 8001be6:	4603      	mov	r3, r0
 8001be8:	461a      	mov	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4413      	add	r3, r2
 8001bee:	4a31      	ldr	r2, [pc, #196]	@ (8001cb4 <prepare_sensor_data_for_uart+0x164>)
 8001bf0:	6810      	ldr	r0, [r2, #0]
 8001bf2:	6018      	str	r0, [r3, #0]
 8001bf4:	7912      	ldrb	r2, [r2, #4]
 8001bf6:	711a      	strb	r2, [r3, #4]

    strcpy((char *)message_2, "Humidity: ");
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	492f      	ldr	r1, [pc, #188]	@ (8001cb8 <prepare_sensor_data_for_uart+0x168>)
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	460b      	mov	r3, r1
 8001c00:	cb03      	ldmia	r3!, {r0, r1}
 8001c02:	6010      	str	r0, [r2, #0]
 8001c04:	6051      	str	r1, [r2, #4]
 8001c06:	8819      	ldrh	r1, [r3, #0]
 8001c08:	789b      	ldrb	r3, [r3, #2]
 8001c0a:	8111      	strh	r1, [r2, #8]
 8001c0c:	7293      	strb	r3, [r2, #10]
    intPart = (int)hum;
 8001c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <prepare_sensor_data_for_uart+0x16c>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c18:	ee17 3a90 	vmov	r3, s15
 8001c1c:	60fb      	str	r3, [r7, #12]
    fracPart = (int)((hum - intPart) * 100);
 8001c1e:	4b27      	ldr	r3, [pc, #156]	@ (8001cbc <prepare_sensor_data_for_uart+0x16c>)
 8001c20:	ed93 7a00 	vldr	s14, [r3]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c32:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001ca4 <prepare_sensor_data_for_uart+0x154>
 8001c36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	60bb      	str	r3, [r7, #8]
    itoa(intPart, humStr, 10);
 8001c44:	220a      	movs	r2, #10
 8001c46:	491e      	ldr	r1, [pc, #120]	@ (8001cc0 <prepare_sensor_data_for_uart+0x170>)
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f003 ff31 	bl	8005ab0 <itoa>
    strcat((char *)message_2, humStr);
 8001c4e:	491c      	ldr	r1, [pc, #112]	@ (8001cc0 <prepare_sensor_data_for_uart+0x170>)
 8001c50:	6838      	ldr	r0, [r7, #0]
 8001c52:	f003 ff79 	bl	8005b48 <strcat>
    strcat((char *)message_2, ".");
 8001c56:	6838      	ldr	r0, [r7, #0]
 8001c58:	f7fe fac8 	bl	80001ec <strlen>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	461a      	mov	r2, r3
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4912      	ldr	r1, [pc, #72]	@ (8001cb0 <prepare_sensor_data_for_uart+0x160>)
 8001c66:	461a      	mov	r2, r3
 8001c68:	460b      	mov	r3, r1
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	8013      	strh	r3, [r2, #0]
    itoa(fracPart, humStr, 10);
 8001c6e:	220a      	movs	r2, #10
 8001c70:	4913      	ldr	r1, [pc, #76]	@ (8001cc0 <prepare_sensor_data_for_uart+0x170>)
 8001c72:	68b8      	ldr	r0, [r7, #8]
 8001c74:	f003 ff1c 	bl	8005ab0 <itoa>
    strcat((char *)message_2, humStr);
 8001c78:	4911      	ldr	r1, [pc, #68]	@ (8001cc0 <prepare_sensor_data_for_uart+0x170>)
 8001c7a:	6838      	ldr	r0, [r7, #0]
 8001c7c:	f003 ff64 	bl	8005b48 <strcat>
    strcat((char *)message_2, " %\r\n");
 8001c80:	6838      	ldr	r0, [r7, #0]
 8001c82:	f7fe fab3 	bl	80001ec <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <prepare_sensor_data_for_uart+0x174>)
 8001c90:	6810      	ldr	r0, [r2, #0]
 8001c92:	6018      	str	r0, [r3, #0]
 8001c94:	7912      	ldrb	r2, [r2, #4]
 8001c96:	711a      	strb	r2, [r3, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd90      	pop	{r4, r7, pc}
 8001ca0:	20000148 	.word	0x20000148
 8001ca4:	42c80000 	.word	0x42c80000
 8001ca8:	08005c00 	.word	0x08005c00
 8001cac:	20000154 	.word	0x20000154
 8001cb0:	08005c10 	.word	0x08005c10
 8001cb4:	08005c14 	.word	0x08005c14
 8001cb8:	08005c1c 	.word	0x08005c1c
 8001cbc:	2000014c 	.word	0x2000014c
 8001cc0:	20000168 	.word	0x20000168
 8001cc4:	08005c28 	.word	0x08005c28

08001cc8 <uart_display_data>:

void uart_display_data(uint8_t *message_1, uint8_t *message_2)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
    uartSendString(message_1);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa84 	bl	80021e0 <uartSendString>
    uartSendString(message_2);
 8001cd8:	6838      	ldr	r0, [r7, #0]
 8001cda:	f000 fa81 	bl	80021e0 <uartSendString>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <prepare_sensor_data_for_lcd>:

char lcdTempStr[20];
char lcdHumStr[20];

void prepare_sensor_data_for_lcd(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	ed2d 8b02 	vpush	{d8}
 8001cee:	af00      	add	r7, sp, #0
    // Prepare temperature string for LCD
    itoa((int)temp, lcdTempStr, 10);
 8001cf0:	4b37      	ldr	r3, [pc, #220]	@ (8001dd0 <prepare_sensor_data_for_lcd+0xe8>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfa:	220a      	movs	r2, #10
 8001cfc:	4935      	ldr	r1, [pc, #212]	@ (8001dd4 <prepare_sensor_data_for_lcd+0xec>)
 8001cfe:	ee17 0a90 	vmov	r0, s15
 8001d02:	f003 fed5 	bl	8005ab0 <itoa>
    strcat(lcdTempStr, ".");
 8001d06:	4833      	ldr	r0, [pc, #204]	@ (8001dd4 <prepare_sensor_data_for_lcd+0xec>)
 8001d08:	f7fe fa70 	bl	80001ec <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b30      	ldr	r3, [pc, #192]	@ (8001dd4 <prepare_sensor_data_for_lcd+0xec>)
 8001d12:	4413      	add	r3, r2
 8001d14:	4930      	ldr	r1, [pc, #192]	@ (8001dd8 <prepare_sensor_data_for_lcd+0xf0>)
 8001d16:	461a      	mov	r2, r3
 8001d18:	460b      	mov	r3, r1
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	8013      	strh	r3, [r2, #0]
    itoa((int)((temp - (int)temp) * 100), lcdTempStr + strlen(lcdTempStr), 10);
 8001d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd0 <prepare_sensor_data_for_lcd+0xe8>)
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <prepare_sensor_data_for_lcd+0xe8>)
 8001d26:	edd3 7a00 	vldr	s15, [r3]
 8001d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d36:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001ddc <prepare_sensor_data_for_lcd+0xf4>
 8001d3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3e:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001d42:	4824      	ldr	r0, [pc, #144]	@ (8001dd4 <prepare_sensor_data_for_lcd+0xec>)
 8001d44:	f7fe fa52 	bl	80001ec <strlen>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a22      	ldr	r2, [pc, #136]	@ (8001dd4 <prepare_sensor_data_for_lcd+0xec>)
 8001d4c:	4413      	add	r3, r2
 8001d4e:	220a      	movs	r2, #10
 8001d50:	4619      	mov	r1, r3
 8001d52:	ee18 0a10 	vmov	r0, s16
 8001d56:	f003 feab 	bl	8005ab0 <itoa>

    // Prepare humidity string for LCD
    itoa((int)hum, lcdHumStr, 10);
 8001d5a:	4b21      	ldr	r3, [pc, #132]	@ (8001de0 <prepare_sensor_data_for_lcd+0xf8>)
 8001d5c:	edd3 7a00 	vldr	s15, [r3]
 8001d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d64:	220a      	movs	r2, #10
 8001d66:	491f      	ldr	r1, [pc, #124]	@ (8001de4 <prepare_sensor_data_for_lcd+0xfc>)
 8001d68:	ee17 0a90 	vmov	r0, s15
 8001d6c:	f003 fea0 	bl	8005ab0 <itoa>
    strcat(lcdHumStr, ".");
 8001d70:	481c      	ldr	r0, [pc, #112]	@ (8001de4 <prepare_sensor_data_for_lcd+0xfc>)
 8001d72:	f7fe fa3b 	bl	80001ec <strlen>
 8001d76:	4603      	mov	r3, r0
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001de4 <prepare_sensor_data_for_lcd+0xfc>)
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4916      	ldr	r1, [pc, #88]	@ (8001dd8 <prepare_sensor_data_for_lcd+0xf0>)
 8001d80:	461a      	mov	r2, r3
 8001d82:	460b      	mov	r3, r1
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	8013      	strh	r3, [r2, #0]
    itoa((int)((hum - (int)hum) * 100), lcdHumStr + strlen(lcdHumStr), 10);
 8001d88:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <prepare_sensor_data_for_lcd+0xf8>)
 8001d8a:	ed93 7a00 	vldr	s14, [r3]
 8001d8e:	4b14      	ldr	r3, [pc, #80]	@ (8001de0 <prepare_sensor_data_for_lcd+0xf8>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001da0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001ddc <prepare_sensor_data_for_lcd+0xf4>
 8001da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001dac:	480d      	ldr	r0, [pc, #52]	@ (8001de4 <prepare_sensor_data_for_lcd+0xfc>)
 8001dae:	f7fe fa1d 	bl	80001ec <strlen>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4a0b      	ldr	r2, [pc, #44]	@ (8001de4 <prepare_sensor_data_for_lcd+0xfc>)
 8001db6:	4413      	add	r3, r2
 8001db8:	220a      	movs	r2, #10
 8001dba:	4619      	mov	r1, r3
 8001dbc:	ee18 0a10 	vmov	r0, s16
 8001dc0:	f003 fe76 	bl	8005ab0 <itoa>
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	ecbd 8b02 	vpop	{d8}
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000148 	.word	0x20000148
 8001dd4:	2000017c 	.word	0x2000017c
 8001dd8:	08005c10 	.word	0x08005c10
 8001ddc:	42c80000 	.word	0x42c80000
 8001de0:	2000014c 	.word	0x2000014c
 8001de4:	20000190 	.word	0x20000190

08001de8 <lcd_display_sensor_data>:

void lcd_display_sensor_data(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    // Display temperature on the LCD
    PosCaracLLcd(9); // Assuming position 0 on the upper line
 8001dec:	2009      	movs	r0, #9
 8001dee:	f000 f99c 	bl	800212a <PosCaracLLcd>
    SacaTextoLcd((uint8_t *)"T:");
 8001df2:	4808      	ldr	r0, [pc, #32]	@ (8001e14 <lcd_display_sensor_data+0x2c>)
 8001df4:	f000 f974 	bl	80020e0 <SacaTextoLcd>
    SacaTextoLcd((uint8_t *)lcdTempStr);
 8001df8:	4807      	ldr	r0, [pc, #28]	@ (8001e18 <lcd_display_sensor_data+0x30>)
 8001dfa:	f000 f971 	bl	80020e0 <SacaTextoLcd>

    // Display humidity on the LCD
    PosCaracHLcd(9); // Assuming position 0 on the lower line
 8001dfe:	2009      	movs	r0, #9
 8001e00:	f000 f983 	bl	800210a <PosCaracHLcd>
    SacaTextoLcd((uint8_t *)"H:");
 8001e04:	4805      	ldr	r0, [pc, #20]	@ (8001e1c <lcd_display_sensor_data+0x34>)
 8001e06:	f000 f96b 	bl	80020e0 <SacaTextoLcd>
    SacaTextoLcd((uint8_t *)lcdHumStr);
 8001e0a:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <lcd_display_sensor_data+0x38>)
 8001e0c:	f000 f968 	bl	80020e0 <SacaTextoLcd>
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	08005c30 	.word	0x08005c30
 8001e18:	2000017c 	.word	0x2000017c
 8001e1c:	08005c34 	.word	0x08005c34
 8001e20:	20000190 	.word	0x20000190

08001e24 <lcd_alarm>:

void lcd_alarm()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
    PosCaracLLcd(0);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f000 f97e 	bl	800212a <PosCaracLLcd>
    SacaTextoLcd((uint8_t *)"ALARMA! ");
 8001e2e:	4802      	ldr	r0, [pc, #8]	@ (8001e38 <lcd_alarm+0x14>)
 8001e30:	f000 f956 	bl	80020e0 <SacaTextoLcd>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	08005c38 	.word	0x08005c38

08001e3c <lcd_display_clock>:

void lcd_display_clock()
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    PosCaracHLcd(0);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f000 f962 	bl	800210a <PosCaracHLcd>
    DatoBCD(sTime.Hours);
 8001e46:	4b0b      	ldr	r3, [pc, #44]	@ (8001e74 <lcd_display_clock+0x38>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f8f1 	bl	8002032 <DatoBCD>
    DatoLcd(':');
 8001e50:	203a      	movs	r0, #58	@ 0x3a
 8001e52:	f000 f8d0 	bl	8001ff6 <DatoLcd>
    DatoBCD(sTime.Minutes);
 8001e56:	4b07      	ldr	r3, [pc, #28]	@ (8001e74 <lcd_display_clock+0x38>)
 8001e58:	785b      	ldrb	r3, [r3, #1]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f8e9 	bl	8002032 <DatoBCD>
    DatoLcd(':');
 8001e60:	203a      	movs	r0, #58	@ 0x3a
 8001e62:	f000 f8c8 	bl	8001ff6 <DatoLcd>
    DatoBCD(sTime.Seconds);
 8001e66:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <lcd_display_clock+0x38>)
 8001e68:	789b      	ldrb	r3, [r3, #2]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f8e1 	bl	8002032 <DatoBCD>
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20000100 	.word	0x20000100

08001e78 <lcd_display_date>:

void lcd_display_date()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
    PosCaracLLcd(0);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f000 f954 	bl	800212a <PosCaracLLcd>
    DatoBCD(sDate.Date);
 8001e82:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <lcd_display_date+0x38>)
 8001e84:	789b      	ldrb	r3, [r3, #2]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 f8d3 	bl	8002032 <DatoBCD>
    DatoLcd('/');
 8001e8c:	202f      	movs	r0, #47	@ 0x2f
 8001e8e:	f000 f8b2 	bl	8001ff6 <DatoLcd>
    DatoBCD(sDate.Month);
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <lcd_display_date+0x38>)
 8001e94:	785b      	ldrb	r3, [r3, #1]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f8cb 	bl	8002032 <DatoBCD>
    DatoLcd('/');
 8001e9c:	202f      	movs	r0, #47	@ 0x2f
 8001e9e:	f000 f8aa 	bl	8001ff6 <DatoLcd>
    DatoBCD(sDate.Year);
 8001ea2:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <lcd_display_date+0x38>)
 8001ea4:	78db      	ldrb	r3, [r3, #3]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f8c3 	bl	8002032 <DatoBCD>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000114 	.word	0x20000114

08001eb4 <FSM_update>:

void FSM_update()
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    eval_data();
 8001eb8:	f7ff fdc4 	bl	8001a44 <eval_data>

    switch (currentTempState)
 8001ebc:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <FSM_update+0x28>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <FSM_update+0x1a>
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d105      	bne.n	8001ed4 <FSM_update+0x20>
    {
    case TEMP_ALARM:
        lcd_alarm();
 8001ec8:	f7ff ffac 	bl	8001e24 <lcd_alarm>
        break;
 8001ecc:	e003      	b.n	8001ed6 <FSM_update+0x22>
    case TEMP_NORMAL:
        lcd_display_date();
 8001ece:	f7ff ffd3 	bl	8001e78 <lcd_display_date>
        break;
 8001ed2:	e000      	b.n	8001ed6 <FSM_update+0x22>
    default:
        break;
 8001ed4:	bf00      	nop
    }
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000118 	.word	0x20000118

08001ee0 <APP_init>:

void APP_init()
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    uartInit();
 8001ee4:	f000 f94c 	bl	8002180 <uartInit>
    BME280_init();
 8001ee8:	f7ff fc86 	bl	80017f8 <BME280_init>
    Init_Lcd();
 8001eec:	f000 f826 	bl	8001f3c <Init_Lcd>
}
 8001ef0:	bf00      	nop
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <APP_update>:

void APP_update()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b09a      	sub	sp, #104	@ 0x68
 8001ef8:	af00      	add	r7, sp, #0
    update_lcd_clock();
 8001efa:	f7ff faeb 	bl	80014d4 <update_lcd_clock>
    lcd_display_clock();
 8001efe:	f7ff ff9d 	bl	8001e3c <lcd_display_clock>

    BME280_read();
 8001f02:	f7ff fd61 	bl	80019c8 <BME280_read>

    FSM_update();
 8001f06:	f7ff ffd5 	bl	8001eb4 <FSM_update>

    BME280_calculate();
 8001f0a:	f7ff fddb 	bl	8001ac4 <BME280_calculate>

    uint8_t message_tem[50];
    uint8_t message_hum[50];
    prepare_sensor_data_for_uart(message_tem, message_hum);
 8001f0e:	463a      	mov	r2, r7
 8001f10:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f14:	4611      	mov	r1, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fe1a 	bl	8001b50 <prepare_sensor_data_for_uart>
    uart_display_data(message_tem, message_hum);
 8001f1c:	463a      	mov	r2, r7
 8001f1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fecf 	bl	8001cc8 <uart_display_data>

    prepare_sensor_data_for_lcd();
 8001f2a:	f7ff fedd 	bl	8001ce8 <prepare_sensor_data_for_lcd>
    lcd_display_sensor_data();
 8001f2e:	f7ff ff5b 	bl	8001de8 <lcd_display_sensor_data>
}
 8001f32:	bf00      	nop
 8001f34:	3768      	adds	r7, #104	@ 0x68
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <Init_Lcd>:

static const uint8_t LCD_INIT_CMD[]={
		_4BIT_MODE,DISPLAY_CONTROL,RETURN_HOME,ENTRY_MODE+AUTOINCREMENT,DISPLAY_CONTROL+DISPLAY_ON,CLR_LCD
};

_Bool Init_Lcd(void){
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
   SleepLcdBlocking(millisecond*20);
 8001f42:	2014      	movs	r0, #20
 8001f44:	f000 f83e 	bl	8001fc4 <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8001f48:	2100      	movs	r1, #0
 8001f4a:	2030      	movs	r0, #48	@ 0x30
 8001f4c:	f000 f8a4 	bl	8002098 <Envia4bitsLcd>
   SleepLcdBlocking(millisecond*10);
 8001f50:	200a      	movs	r0, #10
 8001f52:	f000 f837 	bl	8001fc4 <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8001f56:	2100      	movs	r1, #0
 8001f58:	2030      	movs	r0, #48	@ 0x30
 8001f5a:	f000 f89d 	bl	8002098 <Envia4bitsLcd>
   SleepLcdBlocking(millisecond*1);
 8001f5e:	2001      	movs	r0, #1
 8001f60:	f000 f830 	bl	8001fc4 <SleepLcdBlocking>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8001f64:	2100      	movs	r1, #0
 8001f66:	2030      	movs	r0, #48	@ 0x30
 8001f68:	f000 f896 	bl	8002098 <Envia4bitsLcd>
   Envia4bitsLcd(COMANDO_INI2,CONTROL);
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	2020      	movs	r0, #32
 8001f70:	f000 f892 	bl	8002098 <Envia4bitsLcd>
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
 8001f74:	2300      	movs	r3, #0
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	e008      	b.n	8001f8c <Init_Lcd+0x50>
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	4a10      	ldr	r2, [pc, #64]	@ (8001fc0 <Init_Lcd+0x84>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f82a 	bl	8001fda <ControlLcd>
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	71fb      	strb	r3, [r7, #7]
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	2b05      	cmp	r3, #5
 8001f90:	d9f3      	bls.n	8001f7a <Init_Lcd+0x3e>
   SleepLcdBlocking(millisecond*2);
 8001f92:	2002      	movs	r0, #2
 8001f94:	f000 f816 	bl	8001fc4 <SleepLcdBlocking>

   for (int i = 0; i <= 4; i++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	e008      	b.n	8001fb0 <Init_Lcd+0x74>
    {
 	   BSP_LED_Toggle(LED1); // init LCD OK
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f000 f99a 	bl	80022d8 <BSP_LED_Toggle>
 	   SleepLcdBlocking(millisecond*1);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f000 f80d 	bl	8001fc4 <SleepLcdBlocking>
   for (int i = 0; i <= 4; i++)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	ddf3      	ble.n	8001f9e <Init_Lcd+0x62>
    }
   return 0;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	08005cac 	.word	0x08005cac

08001fc4 <SleepLcdBlocking>:

static void SleepLcdBlocking(uint32_t demora){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	  HAL_Delay(demora);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fa0f 	bl	80023f0 <HAL_Delay>
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <ControlLcd>:

static void ControlLcd(uint8_t valor){
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b082      	sub	sp, #8
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(valor,CONTROL);
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f838 	bl	800205e <Envia8bitsLcd>
}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <DatoLcd>:

void DatoLcd (uint8_t dato){
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato,DATOS);
 8002000:	79fb      	ldrb	r3, [r7, #7]
 8002002:	2101      	movs	r1, #1
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f82a 	bl	800205e <Envia8bitsLcd>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <DatoAsciiLcd>:

void DatoAsciiLcd (uint8_t dato){
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	4603      	mov	r3, r0
 800201a:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato+ '0',DATOS);
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	3330      	adds	r3, #48	@ 0x30
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2101      	movs	r1, #1
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f81a 	bl	800205e <Envia8bitsLcd>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <DatoBCD>:

void DatoBCD (uint8_t dato){
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	4603      	mov	r3, r0
 800203a:	71fb      	strb	r3, [r7, #7]
	  DatoAsciiLcd((((dato)&0xf0)>>4));
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	091b      	lsrs	r3, r3, #4
 8002040:	b2db      	uxtb	r3, r3
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffe5 	bl	8002012 <DatoAsciiLcd>
	  DatoAsciiLcd(((dato)&0x0f));
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	b2db      	uxtb	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ffde 	bl	8002012 <DatoAsciiLcd>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <Envia8bitsLcd>:

void Envia8bitsLcd (uint8_t valor,_Bool tipo){
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	460a      	mov	r2, r1
 8002068:	71fb      	strb	r3, [r7, #7]
 800206a:	4613      	mov	r3, r2
 800206c:	71bb      	strb	r3, [r7, #6]
	Envia4bitsLcd(valor&HIGH_NIBBLE,tipo);
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f023 030f 	bic.w	r3, r3, #15
 8002074:	b2db      	uxtb	r3, r3
 8002076:	79ba      	ldrb	r2, [r7, #6]
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f80c 	bl	8002098 <Envia4bitsLcd>
	Envia4bitsLcd(valor<<LOW_NIBBLE,tipo);
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	b2db      	uxtb	r3, r3
 8002086:	79ba      	ldrb	r2, [r7, #6]
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f804 	bl	8002098 <Envia4bitsLcd>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <Envia4bitsLcd>:

static void Envia4bitsLcd (uint8_t valor,_Bool tipo){
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	460a      	mov	r2, r1
 80020a2:	71fb      	strb	r3, [r7, #7]
 80020a4:	4613      	mov	r3, r2
 80020a6:	71bb      	strb	r3, [r7, #6]
	LCD_HAL_I2C_Write(valor+tipo+EN+BL);
 80020a8:	79ba      	ldrb	r2, [r7, #6]
 80020aa:	79fb      	ldrb	r3, [r7, #7]
 80020ac:	4413      	add	r3, r2
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	330c      	adds	r3, #12
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 f849 	bl	800214c <LCD_HAL_I2C_Write>
	SleepLcdBlocking(millisecond);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff ff82 	bl	8001fc4 <SleepLcdBlocking>
	LCD_HAL_I2C_Write(valor+tipo+BL);
 80020c0:	79ba      	ldrb	r2, [r7, #6]
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	4413      	add	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	3308      	adds	r3, #8
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f000 f83d 	bl	800214c <LCD_HAL_I2C_Write>
	SleepLcdBlocking(millisecond);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7ff ff76 	bl	8001fc4 <SleepLcdBlocking>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <SacaTextoLcd>:

void SacaTextoLcd (uint8_t *texto){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	while(*texto)DatoLcd(*texto++);
 80020e8:	e006      	b.n	80020f8 <SacaTextoLcd+0x18>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff ff7f 	bl	8001ff6 <DatoLcd>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f4      	bne.n	80020ea <SacaTextoLcd+0xa>
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <PosCaracHLcd>:
void ClrLcd(void){
   ControlLcd(CLR_LCD);
   SleepLcdBlocking(millisecond*2);
}

void PosCaracHLcd(uint8_t posH){
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posH | LINEA1);
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800211a:	b2db      	uxtb	r3, r3
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5c 	bl	8001fda <ControlLcd>
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <PosCaracLLcd>:

void PosCaracLLcd(uint8_t posL){
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posL | LINEA2);
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800213a:	b2db      	uxtb	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff4c 	bl	8001fda <ControlLcd>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <LCD_HAL_I2C_Write>:
#include"API_lcd_port.h"

extern I2C_HandleTypeDef hi2c1;

void LCD_HAL_I2C_Write(uint8_t valor){
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af02      	add	r7, sp, #8
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit (&hi2c1,LCD_DIR<<1,&valor, sizeof(valor),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 8002156:	1dfa      	adds	r2, r7, #7
 8002158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	2301      	movs	r3, #1
 8002160:	214e      	movs	r1, #78	@ 0x4e
 8002162:	4806      	ldr	r0, [pc, #24]	@ (800217c <LCD_HAL_I2C_Write+0x30>)
 8002164:	f000 fd72 	bl	8002c4c <HAL_I2C_Master_Transmit>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <LCD_HAL_I2C_Write+0x26>
 800216e:	f7fe fff5 	bl	800115c <Error_Handler>

}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000034 	.word	0x20000034

08002180 <uartInit>:
  * @param  None
  * @retval bool_t: returns true if initialization is successful, otherwise false
  */

bool_t uartInit(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  UartHandle.Instance        = USARTx;
 8002184:	4b13      	ldr	r3, [pc, #76]	@ (80021d4 <uartInit+0x54>)
 8002186:	4a14      	ldr	r2, [pc, #80]	@ (80021d8 <uartInit+0x58>)
 8002188:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 9600;
 800218a:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <uartInit+0x54>)
 800218c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002190:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <uartInit+0x54>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8002198:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <uartInit+0x54>)
 800219a:	2200      	movs	r2, #0
 800219c:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <uartInit+0x54>)
 80021a0:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80021a4:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <uartInit+0x54>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <uartInit+0x54>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <uartInit+0x54>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80021b8:	4806      	ldr	r0, [pc, #24]	@ (80021d4 <uartInit+0x54>)
 80021ba:	f003 f855 	bl	8005268 <HAL_UART_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <uartInit+0x48>
  {
    /* Initialization Error */
   return false;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e003      	b.n	80021d0 <uartInit+0x50>
  }

  uartSendString((uint8_t*)"UART init OK -> baud rate configured = 9600 | stopbits = 1 | parity = odd.\r\n");
 80021c8:	4804      	ldr	r0, [pc, #16]	@ (80021dc <uartInit+0x5c>)
 80021ca:	f000 f809 	bl	80021e0 <uartSendString>

  return true;
 80021ce:	2301      	movs	r3, #1
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	200001a4 	.word	0x200001a4
 80021d8:	40004800 	.word	0x40004800
 80021dc:	08005c44 	.word	0x08005c44

080021e0 <uartSendString>:
  * @brief  Send a null-terminated string via UART
  * @param  uint8_t * pstring: pointer to the null-terminated string
  * @retval None
  */
void uartSendString(uint8_t * pstring)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(NULL != pstring && MAXbUFFER > strlen((char*)pstring))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d016      	beq.n	800221c <uartSendString+0x3c>
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7fd fffc 	bl	80001ec <strlen>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2bff      	cmp	r3, #255	@ 0xff
 80021f8:	d810      	bhi.n	800221c <uartSendString+0x3c>
  {
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7fd fff6 	bl	80001ec <strlen>
 8002200:	4603      	mov	r3, r0
 8002202:	b29a      	uxth	r2, r3
 8002204:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4808      	ldr	r0, [pc, #32]	@ (800222c <uartSendString+0x4c>)
 800220c:	f003 f87c 	bl	8005308 <HAL_UART_Transmit>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <uartSendString+0x42>
      Error_Handler();
 8002216:	f000 f80b 	bl	8002230 <Error_Handler>
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 800221a:	e002      	b.n	8002222 <uartSendString+0x42>
  }
  else
    Error_Handler();
 800221c:	f000 f808 	bl	8002230 <Error_Handler>
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	200001a4 	.word	0x200001a4

08002230 <Error_Handler>:
  * @brief  Handles errors by entering an infinite loop
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <Error_Handler+0x4>

08002238 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d10e      	bne.n	8002266 <BSP_LED_Init+0x2e>
 8002248:	2300      	movs	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	4b1f      	ldr	r3, [pc, #124]	@ (80022cc <BSP_LED_Init+0x94>)
 800224e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002250:	4a1e      	ldr	r2, [pc, #120]	@ (80022cc <BSP_LED_Init+0x94>)
 8002252:	f043 0302 	orr.w	r3, r3, #2
 8002256:	6313      	str	r3, [r2, #48]	@ 0x30
 8002258:	4b1c      	ldr	r3, [pc, #112]	@ (80022cc <BSP_LED_Init+0x94>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	e00d      	b.n	8002282 <BSP_LED_Init+0x4a>
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <BSP_LED_Init+0x94>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <BSP_LED_Init+0x94>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	@ 0x30
 8002276:	4b15      	ldr	r3, [pc, #84]	@ (80022cc <BSP_LED_Init+0x94>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <BSP_LED_Init+0x98>)
 8002286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800228a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002294:	2302      	movs	r3, #2
 8002296:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	4a0e      	ldr	r2, [pc, #56]	@ (80022d4 <BSP_LED_Init+0x9c>)
 800229c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a0:	f107 0214 	add.w	r2, r7, #20
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 f9ac 	bl	8002604 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	4a09      	ldr	r2, [pc, #36]	@ (80022d4 <BSP_LED_Init+0x9c>)
 80022b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4a06      	ldr	r2, [pc, #24]	@ (80022d0 <BSP_LED_Init+0x98>)
 80022b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022bc:	2200      	movs	r2, #0
 80022be:	4619      	mov	r1, r3
 80022c0:	f000 fb4c 	bl	800295c <HAL_GPIO_WritePin>
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	@ 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	08005cb4 	.word	0x08005cb4
 80022d4:	20000004 	.word	0x20000004

080022d8 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	4a07      	ldr	r2, [pc, #28]	@ (8002304 <BSP_LED_Toggle+0x2c>)
 80022e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4906      	ldr	r1, [pc, #24]	@ (8002308 <BSP_LED_Toggle+0x30>)
 80022ee:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80022f2:	4619      	mov	r1, r3
 80022f4:	4610      	mov	r0, r2
 80022f6:	f000 fb4a 	bl	800298e <HAL_GPIO_TogglePin>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000004 	.word	0x20000004
 8002308:	08005cb4 	.word	0x08005cb4

0800230c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_Init+0x40>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	@ (800234c <HAL_Init+0x40>)
 8002316:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800231a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800231c:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <HAL_Init+0x40>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_Init+0x40>)
 8002322:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002328:	4b08      	ldr	r3, [pc, #32]	@ (800234c <HAL_Init+0x40>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a07      	ldr	r2, [pc, #28]	@ (800234c <HAL_Init+0x40>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002334:	2003      	movs	r0, #3
 8002336:	f000 f931 	bl	800259c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 f808 	bl	8002350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002340:	f7fe ff12 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00

08002350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_InitTick+0x54>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_InitTick+0x58>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002366:	fbb3 f3f1 	udiv	r3, r3, r1
 800236a:	fbb2 f3f3 	udiv	r3, r2, r3
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f93b 	bl	80025ea <HAL_SYSTICK_Config>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e00e      	b.n	800239c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b0f      	cmp	r3, #15
 8002382:	d80a      	bhi.n	800239a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002384:	2200      	movs	r2, #0
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800238c:	f000 f911 	bl	80025b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002390:	4a06      	ldr	r2, [pc, #24]	@ (80023ac <HAL_InitTick+0x5c>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
}
 800239c:	4618      	mov	r0, r3
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000000 	.word	0x20000000
 80023a8:	20000014 	.word	0x20000014
 80023ac:	20000010 	.word	0x20000010

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b06      	ldr	r3, [pc, #24]	@ (80023d0 <HAL_IncTick+0x20>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	461a      	mov	r2, r3
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_IncTick+0x24>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4413      	add	r3, r2
 80023c0:	4a04      	ldr	r2, [pc, #16]	@ (80023d4 <HAL_IncTick+0x24>)
 80023c2:	6013      	str	r3, [r2, #0]
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000014 	.word	0x20000014
 80023d4:	200001ec 	.word	0x200001ec

080023d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return uwTick;
 80023dc:	4b03      	ldr	r3, [pc, #12]	@ (80023ec <HAL_GetTick+0x14>)
 80023de:	681b      	ldr	r3, [r3, #0]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	200001ec 	.word	0x200001ec

080023f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff ffee 	bl	80023d8 <HAL_GetTick>
 80023fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002408:	d005      	beq.n	8002416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240a:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <HAL_Delay+0x44>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4413      	add	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002416:	bf00      	nop
 8002418:	f7ff ffde 	bl	80023d8 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	429a      	cmp	r2, r3
 8002426:	d8f7      	bhi.n	8002418 <HAL_Delay+0x28>
  {
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000014 	.word	0x20000014

08002438 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002454:	4013      	ands	r3, r2
 8002456:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002460:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002464:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002468:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800246a:	4a04      	ldr	r2, [pc, #16]	@ (800247c <__NVIC_SetPriorityGrouping+0x44>)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	60d3      	str	r3, [r2, #12]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002484:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <__NVIC_GetPriorityGrouping+0x18>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	0a1b      	lsrs	r3, r3, #8
 800248a:	f003 0307 	and.w	r3, r3, #7
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	6039      	str	r1, [r7, #0]
 80024a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	db0a      	blt.n	80024c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	490c      	ldr	r1, [pc, #48]	@ (80024e8 <__NVIC_SetPriority+0x4c>)
 80024b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	440b      	add	r3, r1
 80024c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024c4:	e00a      	b.n	80024dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4908      	ldr	r1, [pc, #32]	@ (80024ec <__NVIC_SetPriority+0x50>)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	3b04      	subs	r3, #4
 80024d4:	0112      	lsls	r2, r2, #4
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	440b      	add	r3, r1
 80024da:	761a      	strb	r2, [r3, #24]
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr
 80024e8:	e000e100 	.word	0xe000e100
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b089      	sub	sp, #36	@ 0x24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f1c3 0307 	rsb	r3, r3, #7
 800250a:	2b04      	cmp	r3, #4
 800250c:	bf28      	it	cs
 800250e:	2304      	movcs	r3, #4
 8002510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3304      	adds	r3, #4
 8002516:	2b06      	cmp	r3, #6
 8002518:	d902      	bls.n	8002520 <NVIC_EncodePriority+0x30>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3b03      	subs	r3, #3
 800251e:	e000      	b.n	8002522 <NVIC_EncodePriority+0x32>
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002524:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	43da      	mvns	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	401a      	ands	r2, r3
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002538:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa01 f303 	lsl.w	r3, r1, r3
 8002542:	43d9      	mvns	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002548:	4313      	orrs	r3, r2
         );
}
 800254a:	4618      	mov	r0, r3
 800254c:	3724      	adds	r7, #36	@ 0x24
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
	...

08002558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3b01      	subs	r3, #1
 8002564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002568:	d301      	bcc.n	800256e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800256a:	2301      	movs	r3, #1
 800256c:	e00f      	b.n	800258e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <SysTick_Config+0x40>)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3b01      	subs	r3, #1
 8002574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002576:	210f      	movs	r1, #15
 8002578:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800257c:	f7ff ff8e 	bl	800249c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <SysTick_Config+0x40>)
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002586:	4b04      	ldr	r3, [pc, #16]	@ (8002598 <SysTick_Config+0x40>)
 8002588:	2207      	movs	r2, #7
 800258a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	e000e010 	.word	0xe000e010

0800259c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff47 	bl	8002438 <__NVIC_SetPriorityGrouping>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
 80025be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025c4:	f7ff ff5c 	bl	8002480 <__NVIC_GetPriorityGrouping>
 80025c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	6978      	ldr	r0, [r7, #20]
 80025d0:	f7ff ff8e 	bl	80024f0 <NVIC_EncodePriority>
 80025d4:	4602      	mov	r2, r0
 80025d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff5d 	bl	800249c <__NVIC_SetPriority>
}
 80025e2:	bf00      	nop
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b082      	sub	sp, #8
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f7ff ffb0 	bl	8002558 <SysTick_Config>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	e177      	b.n	8002910 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002620:	2201      	movs	r2, #1
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4013      	ands	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	f040 8166 	bne.w	800290a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b01      	cmp	r3, #1
 8002648:	d005      	beq.n	8002656 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002652:	2b02      	cmp	r3, #2
 8002654:	d130      	bne.n	80026b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	2203      	movs	r2, #3
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800268c:	2201      	movs	r2, #1
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	091b      	lsrs	r3, r3, #4
 80026a2:	f003 0201 	and.w	r2, r3, #1
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2b03      	cmp	r3, #3
 80026c2:	d017      	beq.n	80026f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d123      	bne.n	8002748 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	08da      	lsrs	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3208      	adds	r2, #8
 8002708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800270c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4313      	orrs	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	08da      	lsrs	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3208      	adds	r2, #8
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	2203      	movs	r2, #3
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43db      	mvns	r3, r3
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	4013      	ands	r3, r2
 800275e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0203 	and.w	r2, r3, #3
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80c0 	beq.w	800290a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	4b66      	ldr	r3, [pc, #408]	@ (8002928 <HAL_GPIO_Init+0x324>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	4a65      	ldr	r2, [pc, #404]	@ (8002928 <HAL_GPIO_Init+0x324>)
 8002794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002798:	6453      	str	r3, [r2, #68]	@ 0x44
 800279a:	4b63      	ldr	r3, [pc, #396]	@ (8002928 <HAL_GPIO_Init+0x324>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a6:	4a61      	ldr	r2, [pc, #388]	@ (800292c <HAL_GPIO_Init+0x328>)
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	220f      	movs	r2, #15
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a58      	ldr	r2, [pc, #352]	@ (8002930 <HAL_GPIO_Init+0x32c>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d037      	beq.n	8002842 <HAL_GPIO_Init+0x23e>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a57      	ldr	r2, [pc, #348]	@ (8002934 <HAL_GPIO_Init+0x330>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d031      	beq.n	800283e <HAL_GPIO_Init+0x23a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a56      	ldr	r2, [pc, #344]	@ (8002938 <HAL_GPIO_Init+0x334>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d02b      	beq.n	800283a <HAL_GPIO_Init+0x236>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a55      	ldr	r2, [pc, #340]	@ (800293c <HAL_GPIO_Init+0x338>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d025      	beq.n	8002836 <HAL_GPIO_Init+0x232>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a54      	ldr	r2, [pc, #336]	@ (8002940 <HAL_GPIO_Init+0x33c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01f      	beq.n	8002832 <HAL_GPIO_Init+0x22e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a53      	ldr	r2, [pc, #332]	@ (8002944 <HAL_GPIO_Init+0x340>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d019      	beq.n	800282e <HAL_GPIO_Init+0x22a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a52      	ldr	r2, [pc, #328]	@ (8002948 <HAL_GPIO_Init+0x344>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <HAL_GPIO_Init+0x226>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a51      	ldr	r2, [pc, #324]	@ (800294c <HAL_GPIO_Init+0x348>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_GPIO_Init+0x222>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a50      	ldr	r2, [pc, #320]	@ (8002950 <HAL_GPIO_Init+0x34c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d007      	beq.n	8002822 <HAL_GPIO_Init+0x21e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a4f      	ldr	r2, [pc, #316]	@ (8002954 <HAL_GPIO_Init+0x350>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d101      	bne.n	800281e <HAL_GPIO_Init+0x21a>
 800281a:	2309      	movs	r3, #9
 800281c:	e012      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800281e:	230a      	movs	r3, #10
 8002820:	e010      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002822:	2308      	movs	r3, #8
 8002824:	e00e      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002826:	2307      	movs	r3, #7
 8002828:	e00c      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800282a:	2306      	movs	r3, #6
 800282c:	e00a      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800282e:	2305      	movs	r3, #5
 8002830:	e008      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002832:	2304      	movs	r3, #4
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002836:	2303      	movs	r3, #3
 8002838:	e004      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800283a:	2302      	movs	r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_Init+0x240>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_GPIO_Init+0x240>
 8002842:	2300      	movs	r3, #0
 8002844:	69fa      	ldr	r2, [r7, #28]
 8002846:	f002 0203 	and.w	r2, r2, #3
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	4093      	lsls	r3, r2
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002854:	4935      	ldr	r1, [pc, #212]	@ (800292c <HAL_GPIO_Init+0x328>)
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002862:	4b3d      	ldr	r3, [pc, #244]	@ (8002958 <HAL_GPIO_Init+0x354>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002886:	4a34      	ldr	r2, [pc, #208]	@ (8002958 <HAL_GPIO_Init+0x354>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800288c:	4b32      	ldr	r3, [pc, #200]	@ (8002958 <HAL_GPIO_Init+0x354>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b0:	4a29      	ldr	r2, [pc, #164]	@ (8002958 <HAL_GPIO_Init+0x354>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b6:	4b28      	ldr	r3, [pc, #160]	@ (8002958 <HAL_GPIO_Init+0x354>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028da:	4a1f      	ldr	r2, [pc, #124]	@ (8002958 <HAL_GPIO_Init+0x354>)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002958 <HAL_GPIO_Init+0x354>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002904:	4a14      	ldr	r2, [pc, #80]	@ (8002958 <HAL_GPIO_Init+0x354>)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3301      	adds	r3, #1
 800290e:	61fb      	str	r3, [r7, #28]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	2b0f      	cmp	r3, #15
 8002914:	f67f ae84 	bls.w	8002620 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002918:	bf00      	nop
 800291a:	bf00      	nop
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800
 800292c:	40013800 	.word	0x40013800
 8002930:	40020000 	.word	0x40020000
 8002934:	40020400 	.word	0x40020400
 8002938:	40020800 	.word	0x40020800
 800293c:	40020c00 	.word	0x40020c00
 8002940:	40021000 	.word	0x40021000
 8002944:	40021400 	.word	0x40021400
 8002948:	40021800 	.word	0x40021800
 800294c:	40021c00 	.word	0x40021c00
 8002950:	40022000 	.word	0x40022000
 8002954:	40022400 	.word	0x40022400
 8002958:	40013c00 	.word	0x40013c00

0800295c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
 8002968:	4613      	mov	r3, r2
 800296a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800296c:	787b      	ldrb	r3, [r7, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002978:	e003      	b.n	8002982 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800297a:	887b      	ldrh	r3, [r7, #2]
 800297c:	041a      	lsls	r2, r3, #16
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	619a      	str	r2, [r3, #24]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800298e:	b480      	push	{r7}
 8002990:	b085      	sub	sp, #20
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029a0:	887a      	ldrh	r2, [r7, #2]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	041a      	lsls	r2, r3, #16
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	43d9      	mvns	r1, r3
 80029ac:	887b      	ldrh	r3, [r7, #2]
 80029ae:	400b      	ands	r3, r1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	619a      	str	r2, [r3, #24]
}
 80029b6:	bf00      	nop
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e12b      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d106      	bne.n	80029f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7fe fbe4 	bl	80011b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a28:	f001 f954 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8002a2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a81      	ldr	r2, [pc, #516]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d807      	bhi.n	8002a48 <HAL_I2C_Init+0x84>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a80      	ldr	r2, [pc, #512]	@ (8002c3c <HAL_I2C_Init+0x278>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	bf94      	ite	ls
 8002a40:	2301      	movls	r3, #1
 8002a42:	2300      	movhi	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	e006      	b.n	8002a56 <HAL_I2C_Init+0x92>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c40 <HAL_I2C_Init+0x27c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e0e7      	b.n	8002c2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	4a78      	ldr	r2, [pc, #480]	@ (8002c44 <HAL_I2C_Init+0x280>)
 8002a62:	fba2 2303 	umull	r2, r3, r2, r3
 8002a66:	0c9b      	lsrs	r3, r3, #18
 8002a68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d802      	bhi.n	8002a98 <HAL_I2C_Init+0xd4>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	3301      	adds	r3, #1
 8002a96:	e009      	b.n	8002aac <HAL_I2C_Init+0xe8>
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
 8002aa2:	4a69      	ldr	r2, [pc, #420]	@ (8002c48 <HAL_I2C_Init+0x284>)
 8002aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	3301      	adds	r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	430b      	orrs	r3, r1
 8002ab2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002abe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	495c      	ldr	r1, [pc, #368]	@ (8002c38 <HAL_I2C_Init+0x274>)
 8002ac8:	428b      	cmp	r3, r1
 8002aca:	d819      	bhi.n	8002b00 <HAL_I2C_Init+0x13c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e59      	subs	r1, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ada:	1c59      	adds	r1, r3, #1
 8002adc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ae0:	400b      	ands	r3, r1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00a      	beq.n	8002afc <HAL_I2C_Init+0x138>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e59      	subs	r1, r3, #1
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afa:	e051      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002afc:	2304      	movs	r3, #4
 8002afe:	e04f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <HAL_I2C_Init+0x168>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1e58      	subs	r0, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	440b      	add	r3, r1
 8002b16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	bf0c      	ite	eq
 8002b24:	2301      	moveq	r3, #1
 8002b26:	2300      	movne	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e012      	b.n	8002b52 <HAL_I2C_Init+0x18e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1e58      	subs	r0, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6859      	ldr	r1, [r3, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	0099      	lsls	r1, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b42:	3301      	adds	r3, #1
 8002b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <HAL_I2C_Init+0x196>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d10e      	bne.n	8002b80 <HAL_I2C_Init+0x1bc>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1e58      	subs	r0, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	440b      	add	r3, r1
 8002b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b7e:	e00f      	b.n	8002ba0 <HAL_I2C_Init+0x1dc>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	0099      	lsls	r1, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	6809      	ldr	r1, [r1, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	431a      	orrs	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6911      	ldr	r1, [r2, #16]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	68d2      	ldr	r2, [r2, #12]
 8002bda:	4311      	orrs	r1, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6812      	ldr	r2, [r2, #0]
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2220      	movs	r2, #32
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	000186a0 	.word	0x000186a0
 8002c3c:	001e847f 	.word	0x001e847f
 8002c40:	003d08ff 	.word	0x003d08ff
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	10624dd3 	.word	0x10624dd3

08002c4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	461a      	mov	r2, r3
 8002c58:	460b      	mov	r3, r1
 8002c5a:	817b      	strh	r3, [r7, #10]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f7ff fbba 	bl	80023d8 <HAL_GetTick>
 8002c64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	f040 80e0 	bne.w	8002e34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2319      	movs	r3, #25
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	4970      	ldr	r1, [pc, #448]	@ (8002e40 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f964 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e0d3      	b.n	8002e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_I2C_Master_Transmit+0x50>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e0cc      	b.n	8002e36 <HAL_I2C_Master_Transmit+0x1ea>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d007      	beq.n	8002cc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2221      	movs	r2, #33	@ 0x21
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2210      	movs	r2, #16
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	893a      	ldrh	r2, [r7, #8]
 8002cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4a50      	ldr	r2, [pc, #320]	@ (8002e44 <HAL_I2C_Master_Transmit+0x1f8>)
 8002d02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f89c 	bl	8002e48 <I2C_MasterRequestWrite>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e08d      	b.n	8002e36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d30:	e066      	b.n	8002e00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	6a39      	ldr	r1, [r7, #32]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fa22 	bl	8003180 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00d      	beq.n	8002d5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d107      	bne.n	8002d5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06b      	b.n	8002e36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d62:	781a      	ldrb	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_I2C_Master_Transmit+0x188>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d017      	beq.n	8002dd4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	781a      	ldrb	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	6a39      	ldr	r1, [r7, #32]
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 fa19 	bl	8003210 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d107      	bne.n	8002dfc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dfa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e01a      	b.n	8002e36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d194      	bne.n	8002d32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e000      	b.n	8002e36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2302      	movs	r3, #2
  }
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	00100002 	.word	0x00100002
 8002e44:	ffff0000 	.word	0xffff0000

08002e48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607a      	str	r2, [r7, #4]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	460b      	mov	r3, r1
 8002e56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d006      	beq.n	8002e72 <I2C_MasterRequestWrite+0x2a>
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d003      	beq.n	8002e72 <I2C_MasterRequestWrite+0x2a>
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e70:	d108      	bne.n	8002e84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	e00b      	b.n	8002e9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e88:	2b12      	cmp	r3, #18
 8002e8a:	d107      	bne.n	8002e9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f84f 	bl	8002f4c <I2C_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ebe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ec2:	d103      	bne.n	8002ecc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e035      	b.n	8002f3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ed8:	d108      	bne.n	8002eec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eda:	897b      	ldrh	r3, [r7, #10]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ee8:	611a      	str	r2, [r3, #16]
 8002eea:	e01b      	b.n	8002f24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eec:	897b      	ldrh	r3, [r7, #10]
 8002eee:	11db      	asrs	r3, r3, #7
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f003 0306 	and.w	r3, r3, #6
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f063 030f 	orn	r3, r3, #15
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	490e      	ldr	r1, [pc, #56]	@ (8002f44 <I2C_MasterRequestWrite+0xfc>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f898 	bl	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e010      	b.n	8002f3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f1a:	897b      	ldrh	r3, [r7, #10]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4907      	ldr	r1, [pc, #28]	@ (8002f48 <I2C_MasterRequestWrite+0x100>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 f888 	bl	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	00010008 	.word	0x00010008
 8002f48:	00010002 	.word	0x00010002

08002f4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	603b      	str	r3, [r7, #0]
 8002f58:	4613      	mov	r3, r2
 8002f5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f5c:	e048      	b.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f64:	d044      	beq.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7ff fa37 	bl	80023d8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d139      	bne.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10d      	bne.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	e00c      	b.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d116      	bne.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e023      	b.n	8003038 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d10d      	bne.n	8003016 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	43da      	mvns	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	4013      	ands	r3, r2
 8003006:	b29b      	uxth	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	461a      	mov	r2, r3
 8003014:	e00c      	b.n	8003030 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	43da      	mvns	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	4013      	ands	r3, r2
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	429a      	cmp	r2, r3
 8003034:	d093      	beq.n	8002f5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800304e:	e071      	b.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800305e:	d123      	bne.n	80030a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003078:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f043 0204 	orr.w	r2, r3, #4
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e067      	b.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ae:	d041      	beq.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7ff f992 	bl	80023d8 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d136      	bne.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10c      	bne.n	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	43da      	mvns	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4013      	ands	r3, r2
 80030dc:	b29b      	uxth	r3, r3
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e00b      	b.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	43da      	mvns	r2, r3
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e021      	b.n	8003178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	0c1b      	lsrs	r3, r3, #16
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d10c      	bne.n	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	43da      	mvns	r2, r3
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	4013      	ands	r3, r2
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e00b      	b.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	4013      	ands	r3, r2
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	f47f af6d 	bne.w	8003050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800318c:	e034      	b.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f000 f886 	bl	80032a0 <I2C_IsAcknowledgeFailed>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e034      	b.n	8003208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031a4:	d028      	beq.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a6:	f7ff f917 	bl	80023d8 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d302      	bcc.n	80031bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d11d      	bne.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c6:	2b80      	cmp	r3, #128	@ 0x80
 80031c8:	d016      	beq.n	80031f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2220      	movs	r2, #32
 80031d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e007      	b.n	8003208 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003202:	2b80      	cmp	r3, #128	@ 0x80
 8003204:	d1c3      	bne.n	800318e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800321c:	e034      	b.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f83e 	bl	80032a0 <I2C_IsAcknowledgeFailed>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e034      	b.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003234:	d028      	beq.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003236:	f7ff f8cf 	bl	80023d8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	429a      	cmp	r2, r3
 8003244:	d302      	bcc.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d11d      	bne.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b04      	cmp	r3, #4
 8003258:	d016      	beq.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	f043 0220 	orr.w	r2, r3, #32
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e007      	b.n	8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b04      	cmp	r3, #4
 8003294:	d1c3      	bne.n	800321e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b6:	d11b      	bne.n	80032f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	f043 0204 	orr.w	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b20      	cmp	r3, #32
 8003312:	d129      	bne.n	8003368 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	@ 0x24
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 0210 	bic.w	r2, r2, #16
 800333a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e000      	b.n	800336a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003368:	2302      	movs	r3, #2
  }
}
 800336a:	4618      	mov	r0, r3
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b20      	cmp	r3, #32
 800338e:	d12a      	bne.n	80033e6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	@ 0x24
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80033b0:	89fb      	ldrh	r3, [r7, #14]
 80033b2:	f023 030f 	bic.w	r3, r3, #15
 80033b6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	89fb      	ldrh	r3, [r7, #14]
 80033be:	4313      	orrs	r3, r2
 80033c0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	89fa      	ldrh	r2, [r7, #14]
 80033c8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0201 	orr.w	r2, r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e000      	b.n	80033e8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80033e6:	2302      	movs	r3, #2
  }
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e267      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d075      	beq.n	80034fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003412:	4b88      	ldr	r3, [pc, #544]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b04      	cmp	r3, #4
 800341c:	d00c      	beq.n	8003438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800341e:	4b85      	ldr	r3, [pc, #532]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003426:	2b08      	cmp	r3, #8
 8003428:	d112      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b82      	ldr	r3, [pc, #520]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003436:	d10b      	bne.n	8003450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	4b7e      	ldr	r3, [pc, #504]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d05b      	beq.n	80034fc <HAL_RCC_OscConfig+0x108>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d157      	bne.n	80034fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e242      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x74>
 800345a:	4b76      	ldr	r3, [pc, #472]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a75      	ldr	r2, [pc, #468]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0x98>
 8003472:	4b70      	ldr	r3, [pc, #448]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6f      	ldr	r2, [pc, #444]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b6d      	ldr	r3, [pc, #436]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6c      	ldr	r2, [pc, #432]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xb0>
 800348c:	4b69      	ldr	r3, [pc, #420]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a68      	ldr	r2, [pc, #416]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b66      	ldr	r3, [pc, #408]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a65      	ldr	r2, [pc, #404]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe ff94 	bl	80023d8 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe ff90 	bl	80023d8 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e207      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xc0>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe ff80 	bl	80023d8 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe ff7c 	bl	80023d8 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1f3      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b51      	ldr	r3, [pc, #324]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0xe8>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350a:	4b4a      	ldr	r3, [pc, #296]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003516:	4b47      	ldr	r3, [pc, #284]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b44      	ldr	r3, [pc, #272]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b41      	ldr	r3, [pc, #260]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1c7      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4937      	ldr	r1, [pc, #220]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b34      	ldr	r3, [pc, #208]	@ (8003638 <HAL_RCC_OscConfig+0x244>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356a:	f7fe ff35 	bl	80023d8 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003572:	f7fe ff31 	bl	80023d8 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1a8      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2b      	ldr	r3, [pc, #172]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b28      	ldr	r3, [pc, #160]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4925      	ldr	r1, [pc, #148]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_RCC_OscConfig+0x244>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe ff14 	bl	80023d8 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fe ff10 	bl	80023d8 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e187      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d036      	beq.n	800364c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b15      	ldr	r3, [pc, #84]	@ (800363c <HAL_RCC_OscConfig+0x248>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ec:	f7fe fef4 	bl	80023d8 <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe fef0 	bl	80023d8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e167      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_OscConfig+0x240>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x200>
 8003612:	e01b      	b.n	800364c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003614:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_OscConfig+0x248>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361a:	f7fe fedd 	bl	80023d8 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003620:	e00e      	b.n	8003640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003622:	f7fe fed9 	bl	80023d8 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d907      	bls.n	8003640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e150      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003640:	4b88      	ldr	r3, [pc, #544]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003642:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1ea      	bne.n	8003622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8097 	beq.w	8003788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800365e:	4b81      	ldr	r3, [pc, #516]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10f      	bne.n	800368a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	4b7d      	ldr	r3, [pc, #500]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	4a7c      	ldr	r2, [pc, #496]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003678:	6413      	str	r3, [r2, #64]	@ 0x40
 800367a:	4b7a      	ldr	r3, [pc, #488]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003686:	2301      	movs	r3, #1
 8003688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368a:	4b77      	ldr	r3, [pc, #476]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d118      	bne.n	80036c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003696:	4b74      	ldr	r3, [pc, #464]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a73      	ldr	r2, [pc, #460]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 800369c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a2:	f7fe fe99 	bl	80023d8 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036aa:	f7fe fe95 	bl	80023d8 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e10c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003868 <HAL_RCC_OscConfig+0x474>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d106      	bne.n	80036de <HAL_RCC_OscConfig+0x2ea>
 80036d0:	4b64      	ldr	r3, [pc, #400]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a63      	ldr	r2, [pc, #396]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	2b05      	cmp	r3, #5
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x30c>
 80036e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036ec:	f043 0304 	orr.w	r3, r3, #4
 80036f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0x324>
 8003700:	4b58      	ldr	r3, [pc, #352]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003704:	4a57      	ldr	r2, [pc, #348]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003706:	f023 0301 	bic.w	r3, r3, #1
 800370a:	6713      	str	r3, [r2, #112]	@ 0x70
 800370c:	4b55      	ldr	r3, [pc, #340]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a54      	ldr	r2, [pc, #336]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 0304 	bic.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d015      	beq.n	800374c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003720:	f7fe fe5a 	bl	80023d8 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003726:	e00a      	b.n	800373e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003728:	f7fe fe56 	bl	80023d8 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e0cb      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373e:	4b49      	ldr	r3, [pc, #292]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0ee      	beq.n	8003728 <HAL_RCC_OscConfig+0x334>
 800374a:	e014      	b.n	8003776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374c:	f7fe fe44 	bl	80023d8 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fe fe40 	bl	80023d8 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0b5      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800376a:	4b3e      	ldr	r3, [pc, #248]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800376c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003776:	7dfb      	ldrb	r3, [r7, #23]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b39      	ldr	r3, [pc, #228]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	4a38      	ldr	r2, [pc, #224]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003786:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 80a1 	beq.w	80038d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003792:	4b34      	ldr	r3, [pc, #208]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b08      	cmp	r3, #8
 800379c:	d05c      	beq.n	8003858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d141      	bne.n	800382a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a6:	4b31      	ldr	r3, [pc, #196]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ac:	f7fe fe14 	bl	80023d8 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fe10 	bl	80023d8 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e087      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c6:	4b27      	ldr	r3, [pc, #156]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f0      	bne.n	80037b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	431a      	orrs	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	085b      	lsrs	r3, r3, #1
 80037ea:	3b01      	subs	r3, #1
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	491b      	ldr	r1, [pc, #108]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037fc:	4b1b      	ldr	r3, [pc, #108]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003802:	f7fe fde9 	bl	80023d8 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800380a:	f7fe fde5 	bl	80023d8 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e05c      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x416>
 8003828:	e054      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b10      	ldr	r3, [pc, #64]	@ (800386c <HAL_RCC_OscConfig+0x478>)
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003830:	f7fe fdd2 	bl	80023d8 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe fdce 	bl	80023d8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e045      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b06      	ldr	r3, [pc, #24]	@ (8003864 <HAL_RCC_OscConfig+0x470>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x444>
 8003856:	e03d      	b.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d107      	bne.n	8003870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e038      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
 8003864:	40023800 	.word	0x40023800
 8003868:	40007000 	.word	0x40007000
 800386c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003870:	4b1b      	ldr	r3, [pc, #108]	@ (80038e0 <HAL_RCC_OscConfig+0x4ec>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d028      	beq.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003888:	429a      	cmp	r2, r3
 800388a:	d121      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	429a      	cmp	r2, r3
 8003898:	d11a      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038a0:	4013      	ands	r3, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d111      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	3b01      	subs	r3, #1
 80038ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d107      	bne.n	80038d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e000      	b.n	80038d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0cc      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b68      	ldr	r3, [pc, #416]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d90c      	bls.n	8003920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b65      	ldr	r3, [pc, #404]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800390e:	4b63      	ldr	r3, [pc, #396]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	683a      	ldr	r2, [r7, #0]
 8003918:	429a      	cmp	r2, r3
 800391a:	d001      	beq.n	8003920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0b8      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d020      	beq.n	800396e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	d005      	beq.n	8003944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003938:	4b59      	ldr	r3, [pc, #356]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	4a58      	ldr	r2, [pc, #352]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800393e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d005      	beq.n	800395c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003950:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	4a52      	ldr	r2, [pc, #328]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800395a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395c:	4b50      	ldr	r3, [pc, #320]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	494d      	ldr	r1, [pc, #308]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d044      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	4b47      	ldr	r3, [pc, #284]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d119      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e07f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d003      	beq.n	80039a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	2b03      	cmp	r3, #3
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b3b      	ldr	r3, [pc, #236]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e067      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b37      	ldr	r3, [pc, #220]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4934      	ldr	r1, [pc, #208]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d4:	f7fe fd00 	bl	80023d8 <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe fcfc 	bl	80023d8 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e04f      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b2b      	ldr	r3, [pc, #172]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b25      	ldr	r3, [pc, #148]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d20c      	bcs.n	8003a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b22      	ldr	r3, [pc, #136]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1a:	4b20      	ldr	r3, [pc, #128]	@ (8003a9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	683a      	ldr	r2, [r7, #0]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e032      	b.n	8003a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d008      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4916      	ldr	r1, [pc, #88]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d009      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a56:	4b12      	ldr	r3, [pc, #72]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	490e      	ldr	r1, [pc, #56]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a6a:	f000 f821 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b0b      	ldr	r3, [pc, #44]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	490a      	ldr	r1, [pc, #40]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
 8003a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a82:	4a09      	ldr	r2, [pc, #36]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a86:	4b09      	ldr	r3, [pc, #36]	@ (8003aac <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fc60 	bl	8002350 <HAL_InitTick>

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40023c00 	.word	0x40023c00
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	08005c94 	.word	0x08005c94
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	20000010 	.word	0x20000010

08003ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab4:	b094      	sub	sp, #80	@ 0x50
 8003ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003abc:	2300      	movs	r3, #0
 8003abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac8:	4b79      	ldr	r3, [pc, #484]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 030c 	and.w	r3, r3, #12
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d00d      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	f200 80e1 	bhi.w	8003c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d003      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x3a>
 8003ae2:	e0db      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae4:	4b73      	ldr	r3, [pc, #460]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003ae8:	e0db      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aea:	4b73      	ldr	r3, [pc, #460]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003aec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003aee:	e0d8      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af0:	4b6f      	ldr	r3, [pc, #444]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003afa:	4b6d      	ldr	r3, [pc, #436]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d063      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b06:	4b6a      	ldr	r3, [pc, #424]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b22:	4622      	mov	r2, r4
 8003b24:	462b      	mov	r3, r5
 8003b26:	f04f 0000 	mov.w	r0, #0
 8003b2a:	f04f 0100 	mov.w	r1, #0
 8003b2e:	0159      	lsls	r1, r3, #5
 8003b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b34:	0150      	lsls	r0, r2, #5
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	1a51      	subs	r1, r2, r1
 8003b3e:	6139      	str	r1, [r7, #16]
 8003b40:	4629      	mov	r1, r5
 8003b42:	eb63 0301 	sbc.w	r3, r3, r1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b54:	4659      	mov	r1, fp
 8003b56:	018b      	lsls	r3, r1, #6
 8003b58:	4651      	mov	r1, sl
 8003b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b5e:	4651      	mov	r1, sl
 8003b60:	018a      	lsls	r2, r1, #6
 8003b62:	4651      	mov	r1, sl
 8003b64:	ebb2 0801 	subs.w	r8, r2, r1
 8003b68:	4659      	mov	r1, fp
 8003b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b82:	4690      	mov	r8, r2
 8003b84:	4699      	mov	r9, r3
 8003b86:	4623      	mov	r3, r4
 8003b88:	eb18 0303 	adds.w	r3, r8, r3
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	462b      	mov	r3, r5
 8003b90:	eb49 0303 	adc.w	r3, r9, r3
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	f04f 0300 	mov.w	r3, #0
 8003b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ba2:	4629      	mov	r1, r5
 8003ba4:	024b      	lsls	r3, r1, #9
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bac:	4621      	mov	r1, r4
 8003bae:	024a      	lsls	r2, r1, #9
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bc0:	f7fc ff3a 	bl	8000a38 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4613      	mov	r3, r2
 8003bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bcc:	e058      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bce:	4b38      	ldr	r3, [pc, #224]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	099b      	lsrs	r3, r3, #6
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4611      	mov	r1, r2
 8003bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	2300      	movs	r3, #0
 8003be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003be8:	4642      	mov	r2, r8
 8003bea:	464b      	mov	r3, r9
 8003bec:	f04f 0000 	mov.w	r0, #0
 8003bf0:	f04f 0100 	mov.w	r1, #0
 8003bf4:	0159      	lsls	r1, r3, #5
 8003bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bfa:	0150      	lsls	r0, r2, #5
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4641      	mov	r1, r8
 8003c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c20:	ebb2 040a 	subs.w	r4, r2, sl
 8003c24:	eb63 050b 	sbc.w	r5, r3, fp
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	00eb      	lsls	r3, r5, #3
 8003c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c36:	00e2      	lsls	r2, r4, #3
 8003c38:	4614      	mov	r4, r2
 8003c3a:	461d      	mov	r5, r3
 8003c3c:	4643      	mov	r3, r8
 8003c3e:	18e3      	adds	r3, r4, r3
 8003c40:	603b      	str	r3, [r7, #0]
 8003c42:	464b      	mov	r3, r9
 8003c44:	eb45 0303 	adc.w	r3, r5, r3
 8003c48:	607b      	str	r3, [r7, #4]
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c56:	4629      	mov	r1, r5
 8003c58:	028b      	lsls	r3, r1, #10
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c60:	4621      	mov	r1, r4
 8003c62:	028a      	lsls	r2, r1, #10
 8003c64:	4610      	mov	r0, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	61fa      	str	r2, [r7, #28]
 8003c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c74:	f7fc fee0 	bl	8000a38 <__aeabi_uldivmod>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003c90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c9a:	e002      	b.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c9c:	4b05      	ldr	r3, [pc, #20]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3750      	adds	r7, #80	@ 0x50
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cae:	bf00      	nop
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	00f42400 	.word	0x00f42400
 8003cb8:	007a1200 	.word	0x007a1200

08003cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc0:	4b03      	ldr	r3, [pc, #12]	@ (8003cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000000 	.word	0x20000000

08003cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	f7ff fff0 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	@ (8003cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0a9b      	lsrs	r3, r3, #10
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4903      	ldr	r1, [pc, #12]	@ (8003cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	08005ca4 	.word	0x08005ca4

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d00:	f7ff ffdc 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003d04:	4602      	mov	r2, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	0b5b      	lsrs	r3, r3, #13
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4903      	ldr	r1, [pc, #12]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d12:	5ccb      	ldrb	r3, [r1, r3]
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	08005ca4 	.word	0x08005ca4

08003d24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d105      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d075      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d58:	4b91      	ldr	r3, [pc, #580]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5e:	f7fe fb3b 	bl	80023d8 <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d66:	f7fe fb37 	bl	80023d8 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e189      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d78:	4b8a      	ldr	r3, [pc, #552]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f0      	bne.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	019a      	lsls	r2, r3, #6
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	071b      	lsls	r3, r3, #28
 8003d9c:	4981      	ldr	r1, [pc, #516]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003db0:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003db6:	0f1b      	lsrs	r3, r3, #28
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	019a      	lsls	r2, r3, #6
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	071b      	lsls	r3, r3, #28
 8003dd0:	4974      	ldr	r1, [pc, #464]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003dd8:	4b72      	ldr	r3, [pc, #456]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003dde:	f023 021f 	bic.w	r2, r3, #31
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	496e      	ldr	r1, [pc, #440]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00d      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	019a      	lsls	r2, r3, #6
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	071b      	lsls	r3, r3, #28
 8003e10:	4964      	ldr	r1, [pc, #400]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003e18:	4b61      	ldr	r3, [pc, #388]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e1e:	f7fe fadb 	bl	80023d8 <HAL_GetTick>
 8003e22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003e26:	f7fe fad7 	bl	80023d8 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e129      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e38:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d079      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e5c:	4b52      	ldr	r3, [pc, #328]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e62:	f7fe fab9 	bl	80023d8 <HAL_GetTick>
 8003e66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e68:	e008      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e6a:	f7fe fab5 	bl	80023d8 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e107      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e7c:	4b49      	ldr	r3, [pc, #292]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e88:	d0ef      	beq.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d020      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e96:	4b43      	ldr	r3, [pc, #268]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e9c:	0f1b      	lsrs	r3, r3, #28
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	019a      	lsls	r2, r3, #6
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	061b      	lsls	r3, r3, #24
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	071b      	lsls	r3, r3, #28
 8003eb6:	493b      	ldr	r1, [pc, #236]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003ebe:	4b39      	ldr	r3, [pc, #228]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ec4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	4934      	ldr	r1, [pc, #208]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0308 	and.w	r3, r3, #8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01e      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ee4:	4b2f      	ldr	r3, [pc, #188]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eea:	0e1b      	lsrs	r3, r3, #24
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	019a      	lsls	r2, r3, #6
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	071b      	lsls	r3, r3, #28
 8003f04:	4927      	ldr	r1, [pc, #156]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003f0c:	4b25      	ldr	r3, [pc, #148]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	4922      	ldr	r1, [pc, #136]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003f22:	4b21      	ldr	r3, [pc, #132]	@ (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003f24:	2201      	movs	r2, #1
 8003f26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f28:	f7fe fa56 	bl	80023d8 <HAL_GetTick>
 8003f2c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f30:	f7fe fa52 	bl	80023d8 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0a4      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f42:	4b18      	ldr	r3, [pc, #96]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f4e:	d1ef      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 808b 	beq.w	8004074 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f66:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	60fb      	str	r3, [r7, #12]
 8003f78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8003fac <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f86:	f7fe fa27 	bl	80023d8 <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f8c:	e010      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f8e:	f7fe fa23 	bl	80023d8 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d909      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	e075      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003fa0:	42470068 	.word	0x42470068
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	42470070 	.word	0x42470070
 8003fac:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003fb0:	4b38      	ldr	r3, [pc, #224]	@ (8004094 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0e8      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fbc:	4b36      	ldr	r3, [pc, #216]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d02f      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d028      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fda:	4b2f      	ldr	r3, [pc, #188]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fea:	4b2c      	ldr	r3, [pc, #176]	@ (800409c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003ff0:	4a29      	ldr	r2, [pc, #164]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ff6:	4b28      	ldr	r3, [pc, #160]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d114      	bne.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe f9e9 	bl	80023d8 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe f9e5 	bl	80023d8 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e035      	b.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004020:	4b1d      	ldr	r3, [pc, #116]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ee      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004030:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004034:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004038:	d10d      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800403a:	4b17      	ldr	r3, [pc, #92]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800404a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800404e:	4912      	ldr	r1, [pc, #72]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004050:	4313      	orrs	r3, r2
 8004052:	608b      	str	r3, [r1, #8]
 8004054:	e005      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004056:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	4a0f      	ldr	r2, [pc, #60]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800405c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004060:	6093      	str	r3, [r2, #8]
 8004062:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004064:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406e:	490a      	ldr	r1, [pc, #40]	@ (8004098 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004070:	4313      	orrs	r3, r2
 8004072:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d004      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004086:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004088:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40007000 	.word	0x40007000
 8004098:	40023800 	.word	0x40023800
 800409c:	42470e40 	.word	0x42470e40
 80040a0:	424711e0 	.word	0x424711e0

080040a4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e073      	b.n	80041a2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	7f5b      	ldrb	r3, [r3, #29]
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d105      	bne.n	80040d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fd f8bc 	bl	8001248 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b10      	cmp	r3, #16
 80040e2:	d055      	beq.n	8004190 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	22ca      	movs	r2, #202	@ 0xca
 80040ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2253      	movs	r2, #83	@ 0x53
 80040f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fa49 	bl	800458c <RTC_EnterInitMode>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d12c      	bne.n	800415e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004116:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	68d2      	ldr	r2, [r2, #12]
 800413e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6919      	ldr	r1, [r3, #16]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	041a      	lsls	r2, r3, #16
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fa50 	bl	80045fa <RTC_ExitInitMode>
 800415a:	4603      	mov	r3, r0
 800415c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d110      	bne.n	8004186 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	22ff      	movs	r2, #255	@ 0xff
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24
 800418e:	e001      	b.n	8004194 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004194:	7bfb      	ldrb	r3, [r7, #15]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d102      	bne.n	80041a0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041aa:	b590      	push	{r4, r7, lr}
 80041ac:	b087      	sub	sp, #28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	7f1b      	ldrb	r3, [r3, #28]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_RTC_SetTime+0x1c>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e087      	b.n	80042d6 <HAL_RTC_SetTime+0x12c>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2201      	movs	r2, #1
 80041ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2202      	movs	r2, #2
 80041d0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d126      	bne.n	8004226 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2200      	movs	r2, #0
 80041ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fa27 	bl	8004644 <RTC_ByteToBcd2>
 80041f6:	4603      	mov	r3, r0
 80041f8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	785b      	ldrb	r3, [r3, #1]
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fa20 	bl	8004644 <RTC_ByteToBcd2>
 8004204:	4603      	mov	r3, r0
 8004206:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004208:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	789b      	ldrb	r3, [r3, #2]
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fa18 	bl	8004644 <RTC_ByteToBcd2>
 8004214:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004216:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	78db      	ldrb	r3, [r3, #3]
 800421e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	e018      	b.n	8004258 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2200      	movs	r2, #0
 8004238:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	785b      	ldrb	r3, [r3, #1]
 8004244:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004246:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800424c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	78db      	ldrb	r3, [r3, #3]
 8004252:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004254:	4313      	orrs	r3, r2
 8004256:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	22ca      	movs	r2, #202	@ 0xca
 800425e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2253      	movs	r2, #83	@ 0x53
 8004266:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f98f 	bl	800458c <RTC_EnterInitMode>
 800426e:	4603      	mov	r3, r0
 8004270:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004272:	7cfb      	ldrb	r3, [r7, #19]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d120      	bne.n	80042ba <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004282:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004286:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004296:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6899      	ldr	r1, [r3, #8]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f9a2 	bl	80045fa <RTC_ExitInitMode>
 80042b6:	4603      	mov	r3, r0
 80042b8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80042ba:	7cfb      	ldrb	r3, [r7, #19]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d102      	bne.n	80042c6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	22ff      	movs	r2, #255	@ 0xff
 80042cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	771a      	strb	r2, [r3, #28]

  return status;
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd90      	pop	{r4, r7, pc}

080042de <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004310:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004314:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	0a1b      	lsrs	r3, r3, #8
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004330:	b2da      	uxtb	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800433e:	b2da      	uxtb	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	0d9b      	lsrs	r3, r3, #22
 8004348:	b2db      	uxtb	r3, r3
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	b2da      	uxtb	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d11a      	bne.n	8004390 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f98e 	bl	8004680 <RTC_Bcd2ToByte>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	785b      	ldrb	r3, [r3, #1]
 8004370:	4618      	mov	r0, r3
 8004372:	f000 f985 	bl	8004680 <RTC_Bcd2ToByte>
 8004376:	4603      	mov	r3, r0
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	789b      	ldrb	r3, [r3, #2]
 8004382:	4618      	mov	r0, r3
 8004384:	f000 f97c 	bl	8004680 <RTC_Bcd2ToByte>
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800439a:	b590      	push	{r4, r7, lr}
 800439c:	b087      	sub	sp, #28
 800439e:	af00      	add	r7, sp, #0
 80043a0:	60f8      	str	r0, [r7, #12]
 80043a2:	60b9      	str	r1, [r7, #8]
 80043a4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	7f1b      	ldrb	r3, [r3, #28]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_RTC_SetDate+0x1c>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e071      	b.n	800449a <HAL_RTC_SetDate+0x100>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2202      	movs	r2, #2
 80043c0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10e      	bne.n	80043e6 <HAL_RTC_SetDate+0x4c>
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	785b      	ldrb	r3, [r3, #1]
 80043cc:	f003 0310 	and.w	r3, r3, #16
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	785b      	ldrb	r3, [r3, #1]
 80043d8:	f023 0310 	bic.w	r3, r3, #16
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	330a      	adds	r3, #10
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d11c      	bne.n	8004426 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	78db      	ldrb	r3, [r3, #3]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f927 	bl	8004644 <RTC_ByteToBcd2>
 80043f6:	4603      	mov	r3, r0
 80043f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	785b      	ldrb	r3, [r3, #1]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f920 	bl	8004644 <RTC_ByteToBcd2>
 8004404:	4603      	mov	r3, r0
 8004406:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004408:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	789b      	ldrb	r3, [r3, #2]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 f918 	bl	8004644 <RTC_ByteToBcd2>
 8004414:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004416:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e00e      	b.n	8004444 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	78db      	ldrb	r3, [r3, #3]
 800442a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004432:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004438:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	22ca      	movs	r2, #202	@ 0xca
 800444a:	625a      	str	r2, [r3, #36]	@ 0x24
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2253      	movs	r2, #83	@ 0x53
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f899 	bl	800458c <RTC_EnterInitMode>
 800445a:	4603      	mov	r3, r0
 800445c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800445e:	7cfb      	ldrb	r3, [r7, #19]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10c      	bne.n	800447e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800446e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004472:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f8c0 	bl	80045fa <RTC_ExitInitMode>
 800447a:	4603      	mov	r3, r0
 800447c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800447e:	7cfb      	ldrb	r3, [r7, #19]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d102      	bne.n	800448a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2201      	movs	r2, #1
 8004488:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	22ff      	movs	r2, #255	@ 0xff
 8004490:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]

  return status;
 8004498:	7cfb      	ldrb	r3, [r7, #19]
}
 800449a:	4618      	mov	r0, r3
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd90      	pop	{r4, r7, pc}

080044a2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b086      	sub	sp, #24
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60f8      	str	r0, [r7, #12]
 80044aa:	60b9      	str	r1, [r7, #8]
 80044ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80044bc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80044c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	0b5b      	lsrs	r3, r3, #13
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11a      	bne.n	8004536 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	78db      	ldrb	r3, [r3, #3]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 f8bb 	bl	8004680 <RTC_Bcd2ToByte>
 800450a:	4603      	mov	r3, r0
 800450c:	461a      	mov	r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	785b      	ldrb	r3, [r3, #1]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f8b2 	bl	8004680 <RTC_Bcd2ToByte>
 800451c:	4603      	mov	r3, r0
 800451e:	461a      	mov	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	789b      	ldrb	r3, [r3, #2]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f8a9 	bl	8004680 <RTC_Bcd2ToByte>
 800452e:	4603      	mov	r3, r0
 8004530:	461a      	mov	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3718      	adds	r7, #24
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a0d      	ldr	r2, [pc, #52]	@ (8004588 <HAL_RTC_WaitForSynchro+0x48>)
 8004552:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004554:	f7fd ff40 	bl	80023d8 <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800455a:	e009      	b.n	8004570 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800455c:	f7fd ff3c 	bl	80023d8 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800456a:	d901      	bls.n	8004570 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e007      	b.n	8004580 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ee      	beq.n	800455c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	00017f5f 	.word	0x00017f5f

0800458c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d122      	bne.n	80045f0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80045b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045ba:	f7fd ff0d 	bl	80023d8 <HAL_GetTick>
 80045be:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045c0:	e00c      	b.n	80045dc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045c2:	f7fd ff09 	bl	80023d8 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045d0:	d904      	bls.n	80045dc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2204      	movs	r2, #4
 80045d6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d102      	bne.n	80045f0 <RTC_EnterInitMode+0x64>
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d1e8      	bne.n	80045c2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004614:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ff8b 	bl	8004540 <HAL_RTC_WaitForSynchro>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2204      	movs	r2, #4
 8004634:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800463a:	7bfb      	ldrb	r3, [r7, #15]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	4603      	mov	r3, r0
 800464c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004652:	e005      	b.n	8004660 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3301      	adds	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	3b0a      	subs	r3, #10
 800465e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	2b09      	cmp	r3, #9
 8004664:	d8f6      	bhi.n	8004654 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	b2da      	uxtb	r2, r3
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	4313      	orrs	r3, r2
 8004672:	b2db      	uxtb	r3, r3
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	b2db      	uxtb	r3, r3
 8004694:	461a      	mov	r2, r3
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	b2db      	uxtb	r3, r3
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e07b      	b.n	80047c6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046de:	d009      	beq.n	80046f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	61da      	str	r2, [r3, #28]
 80046e6:	e005      	b.n	80046f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004700:	b2db      	uxtb	r3, r3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d106      	bne.n	8004714 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f7fc fdc4 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800472a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800476e:	431a      	orrs	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004778:	ea42 0103 	orr.w	r1, r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	0c1b      	lsrs	r3, r3, #16
 8004792:	f003 0104 	and.w	r1, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	f003 0210 	and.w	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b088      	sub	sp, #32
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80047de:	2300      	movs	r3, #0
 80047e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_SPI_Transmit+0x22>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e12d      	b.n	8004a4c <HAL_SPI_Transmit+0x27e>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f8:	f7fd fdee 	bl	80023d8 <HAL_GetTick>
 80047fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	d002      	beq.n	8004814 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800480e:	2302      	movs	r3, #2
 8004810:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004812:	e116      	b.n	8004a42 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d002      	beq.n	8004820 <HAL_SPI_Transmit+0x52>
 800481a:	88fb      	ldrh	r3, [r7, #6]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d102      	bne.n	8004826 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004824:	e10d      	b.n	8004a42 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2203      	movs	r2, #3
 800482a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2200      	movs	r2, #0
 8004832:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	88fa      	ldrh	r2, [r7, #6]
 800483e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	88fa      	ldrh	r2, [r7, #6]
 8004844:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800486c:	d10f      	bne.n	800488e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800487c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800488c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004898:	2b40      	cmp	r3, #64	@ 0x40
 800489a:	d007      	beq.n	80048ac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048b4:	d14f      	bne.n	8004956 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <HAL_SPI_Transmit+0xf6>
 80048be:	8afb      	ldrh	r3, [r7, #22]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d142      	bne.n	800494a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c8:	881a      	ldrh	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	1c9a      	adds	r2, r3, #2
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80048e8:	e02f      	b.n	800494a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d112      	bne.n	800491e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048fc:	881a      	ldrh	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004908:	1c9a      	adds	r2, r3, #2
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800491c:	e015      	b.n	800494a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800491e:	f7fd fd5b 	bl	80023d8 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d803      	bhi.n	8004936 <HAL_SPI_Transmit+0x168>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004934:	d102      	bne.n	800493c <HAL_SPI_Transmit+0x16e>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004948:	e07b      	b.n	8004a42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ca      	bne.n	80048ea <HAL_SPI_Transmit+0x11c>
 8004954:	e050      	b.n	80049f8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Transmit+0x196>
 800495e:	8afb      	ldrh	r3, [r7, #22]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d144      	bne.n	80049ee <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	330c      	adds	r3, #12
 800496e:	7812      	ldrb	r2, [r2, #0]
 8004970:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004976:	1c5a      	adds	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004980:	b29b      	uxth	r3, r3
 8004982:	3b01      	subs	r3, #1
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800498a:	e030      	b.n	80049ee <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d113      	bne.n	80049c2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	330c      	adds	r3, #12
 80049a4:	7812      	ldrb	r2, [r2, #0]
 80049a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	86da      	strh	r2, [r3, #54]	@ 0x36
 80049c0:	e015      	b.n	80049ee <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049c2:	f7fd fd09 	bl	80023d8 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d803      	bhi.n	80049da <HAL_SPI_Transmit+0x20c>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049d8:	d102      	bne.n	80049e0 <HAL_SPI_Transmit+0x212>
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80049ec:	e029      	b.n	8004a42 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1c9      	bne.n	800498c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	6839      	ldr	r1, [r7, #0]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 fbdf 	bl	80051c0 <SPI_EndRxTxTransaction>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10a      	bne.n	8004a2c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	613b      	str	r3, [r7, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	613b      	str	r3, [r7, #16]
 8004a2a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e003      	b.n	8004a42 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3720      	adds	r7, #32
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	4613      	mov	r3, r2
 8004a62:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d002      	beq.n	8004a7a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a74:	2302      	movs	r3, #2
 8004a76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a78:	e0fb      	b.n	8004c72 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a82:	d112      	bne.n	8004aaa <HAL_SPI_Receive+0x56>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10e      	bne.n	8004aaa <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2204      	movs	r2, #4
 8004a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f8ef 	bl	8004c84 <HAL_SPI_TransmitReceive>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	e0e8      	b.n	8004c7c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_SPI_Receive+0x64>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e0e1      	b.n	8004c7c <HAL_SPI_Receive+0x228>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ac0:	f7fd fc8a 	bl	80023d8 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_SPI_Receive+0x7e>
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d102      	bne.n	8004ad8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ad6:	e0cc      	b.n	8004c72 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2204      	movs	r2, #4
 8004adc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	88fa      	ldrh	r2, [r7, #6]
 8004af0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2200      	movs	r2, #0
 8004b14:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b1e:	d10f      	bne.n	8004b40 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b3e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4a:	2b40      	cmp	r3, #64	@ 0x40
 8004b4c:	d007      	beq.n	8004b5e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d16a      	bne.n	8004c3c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b66:	e032      	b.n	8004bce <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d115      	bne.n	8004ba2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f103 020c 	add.w	r2, r3, #12
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b82:	7812      	ldrb	r2, [r2, #0]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004ba0:	e015      	b.n	8004bce <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba2:	f7fd fc19 	bl	80023d8 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d803      	bhi.n	8004bba <HAL_SPI_Receive+0x166>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bb8:	d102      	bne.n	8004bc0 <HAL_SPI_Receive+0x16c>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d106      	bne.n	8004bce <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004bcc:	e051      	b.n	8004c72 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1c7      	bne.n	8004b68 <HAL_SPI_Receive+0x114>
 8004bd8:	e035      	b.n	8004c46 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 0301 	and.w	r3, r3, #1
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d113      	bne.n	8004c10 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf2:	b292      	uxth	r2, r2
 8004bf4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfa:	1c9a      	adds	r2, r3, #2
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c0e:	e015      	b.n	8004c3c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c10:	f7fd fbe2 	bl	80023d8 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d803      	bhi.n	8004c28 <HAL_SPI_Receive+0x1d4>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c26:	d102      	bne.n	8004c2e <HAL_SPI_Receive+0x1da>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004c3a:	e01a      	b.n	8004c72 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1c9      	bne.n	8004bda <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fa52 	bl	80050f4 <SPI_EndRxTransaction>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	75fb      	strb	r3, [r7, #23]
 8004c68:	e003      	b.n	8004c72 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3718      	adds	r7, #24
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08c      	sub	sp, #48	@ 0x30
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c92:	2301      	movs	r3, #1
 8004c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_TransmitReceive+0x26>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e198      	b.n	8004fdc <HAL_SPI_TransmitReceive+0x358>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cb2:	f7fd fb91 	bl	80023d8 <HAL_GetTick>
 8004cb6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cc8:	887b      	ldrh	r3, [r7, #2]
 8004cca:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d00f      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x70>
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004cda:	d107      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d103      	bne.n	8004cec <HAL_SPI_TransmitReceive+0x68>
 8004ce4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d003      	beq.n	8004cf4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004cf2:	e16d      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x82>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_SPI_TransmitReceive+0x82>
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004d0c:	e160      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d003      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	887a      	ldrh	r2, [r7, #2]
 8004d32:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	887a      	ldrh	r2, [r7, #2]
 8004d38:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	887a      	ldrh	r2, [r7, #2]
 8004d4a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d62:	2b40      	cmp	r3, #64	@ 0x40
 8004d64:	d007      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d7e:	d17c      	bne.n	8004e7a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_TransmitReceive+0x10a>
 8004d88:	8b7b      	ldrh	r3, [r7, #26]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d16a      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d92:	881a      	ldrh	r2, [r3, #0]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d9e:	1c9a      	adds	r2, r3, #2
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b01      	subs	r3, #1
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db2:	e057      	b.n	8004e64 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d11b      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d016      	beq.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
 8004dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d113      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd6:	881a      	ldrh	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de2:	1c9a      	adds	r2, r3, #2
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	3b01      	subs	r3, #1
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df6:	2300      	movs	r3, #0
 8004df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d119      	bne.n	8004e3c <HAL_SPI_TransmitReceive+0x1b8>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d014      	beq.n	8004e3c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e1c:	b292      	uxth	r2, r2
 8004e1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	1c9a      	adds	r2, r3, #2
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	3b01      	subs	r3, #1
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e3c:	f7fd facc 	bl	80023d8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d80b      	bhi.n	8004e64 <HAL_SPI_TransmitReceive+0x1e0>
 8004e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e52:	d007      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004e62:	e0b5      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1a2      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x130>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d19d      	bne.n	8004db4 <HAL_SPI_TransmitReceive+0x130>
 8004e78:	e080      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x204>
 8004e82:	8b7b      	ldrh	r3, [r7, #26]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d16f      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	7812      	ldrb	r2, [r2, #0]
 8004e94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eae:	e05b      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d11c      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x274>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d017      	beq.n	8004ef8 <HAL_SPI_TransmitReceive+0x274>
 8004ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d114      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	330c      	adds	r3, #12
 8004ed8:	7812      	ldrb	r2, [r2, #0]
 8004eda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d119      	bne.n	8004f3a <HAL_SPI_TransmitReceive+0x2b6>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d014      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f36:	2301      	movs	r3, #1
 8004f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f3a:	f7fd fa4d 	bl	80023d8 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d803      	bhi.n	8004f52 <HAL_SPI_TransmitReceive+0x2ce>
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f50:	d102      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x2d4>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d107      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004f66:	e033      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d19e      	bne.n	8004eb0 <HAL_SPI_TransmitReceive+0x22c>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d199      	bne.n	8004eb0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f91d 	bl	80051c0 <SPI_EndRxTxTransaction>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d006      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004f98:	e01a      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fc6:	e003      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3730      	adds	r7, #48	@ 0x30
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ff4:	f7fd f9f0 	bl	80023d8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ffc:	1a9b      	subs	r3, r3, r2
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	4413      	add	r3, r2
 8005002:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005004:	f7fd f9e8 	bl	80023d8 <HAL_GetTick>
 8005008:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800500a:	4b39      	ldr	r3, [pc, #228]	@ (80050f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	015b      	lsls	r3, r3, #5
 8005010:	0d1b      	lsrs	r3, r3, #20
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800501a:	e054      	b.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005022:	d050      	beq.n	80050c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005024:	f7fd f9d8 	bl	80023d8 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	429a      	cmp	r2, r3
 8005032:	d902      	bls.n	800503a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d13d      	bne.n	80050b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005048:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005052:	d111      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800505c:	d004      	beq.n	8005068 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005066:	d107      	bne.n	8005078 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005076:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005080:	d10f      	bne.n	80050a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e017      	b.n	80050e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	3b01      	subs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4013      	ands	r3, r2
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d19b      	bne.n	800501c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3720      	adds	r7, #32
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000000 	.word	0x20000000

080050f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af02      	add	r7, sp, #8
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005108:	d111      	bne.n	800512e <SPI_EndRxTransaction+0x3a>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005112:	d004      	beq.n	800511e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800511c:	d107      	bne.n	800512e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800512c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005136:	d12a      	bne.n	800518e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005140:	d012      	beq.n	8005168 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2200      	movs	r2, #0
 800514a:	2180      	movs	r1, #128	@ 0x80
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f7ff ff49 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d02d      	beq.n	80051b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515c:	f043 0220 	orr.w	r2, r3, #32
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e026      	b.n	80051b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2200      	movs	r2, #0
 8005170:	2101      	movs	r1, #1
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff ff36 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d01a      	beq.n	80051b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e013      	b.n	80051b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2200      	movs	r2, #0
 8005196:	2101      	movs	r1, #1
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff ff23 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e000      	b.n	80051b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	9300      	str	r3, [sp, #0]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2201      	movs	r2, #1
 80051d4:	2102      	movs	r1, #2
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f7ff ff04 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d007      	beq.n	80051f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	f043 0220 	orr.w	r2, r3, #32
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e032      	b.n	8005258 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005260 <SPI_EndRxTxTransaction+0xa0>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005264 <SPI_EndRxTxTransaction+0xa4>)
 80051f8:	fba2 2303 	umull	r2, r3, r2, r3
 80051fc:	0d5b      	lsrs	r3, r3, #21
 80051fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005202:	fb02 f303 	mul.w	r3, r2, r3
 8005206:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005210:	d112      	bne.n	8005238 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2200      	movs	r2, #0
 800521a:	2180      	movs	r1, #128	@ 0x80
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f7ff fee1 	bl	8004fe4 <SPI_WaitFlagStateUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d016      	beq.n	8005256 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800522c:	f043 0220 	orr.w	r2, r3, #32
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e00f      	b.n	8005258 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	3b01      	subs	r3, #1
 8005242:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800524e:	2b80      	cmp	r3, #128	@ 0x80
 8005250:	d0f2      	beq.n	8005238 <SPI_EndRxTxTransaction+0x78>
 8005252:	e000      	b.n	8005256 <SPI_EndRxTxTransaction+0x96>
        break;
 8005254:	bf00      	nop
  }

  return HAL_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3718      	adds	r7, #24
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000000 	.word	0x20000000
 8005264:	165e9f81 	.word	0x165e9f81

08005268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e042      	b.n	8005300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fc f86c 	bl	800136c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2224      	movs	r2, #36	@ 0x24
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f973 	bl	8005598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	@ 0x28
 800530c:	af02      	add	r7, sp, #8
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	4613      	mov	r3, r2
 8005316:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b20      	cmp	r3, #32
 8005326:	d175      	bne.n	8005414 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_UART_Transmit+0x2c>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e06e      	b.n	8005416 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2221      	movs	r2, #33	@ 0x21
 8005342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005346:	f7fd f847 	bl	80023d8 <HAL_GetTick>
 800534a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	88fa      	ldrh	r2, [r7, #6]
 8005350:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005360:	d108      	bne.n	8005374 <HAL_UART_Transmit+0x6c>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d104      	bne.n	8005374 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e003      	b.n	800537c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005378:	2300      	movs	r3, #0
 800537a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800537c:	e02e      	b.n	80053dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	2200      	movs	r2, #0
 8005386:	2180      	movs	r1, #128	@ 0x80
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 f848 	bl	800541e <UART_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d005      	beq.n	80053a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e03a      	b.n	8005416 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10b      	bne.n	80053be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	3302      	adds	r3, #2
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	e007      	b.n	80053ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	781a      	ldrb	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	3301      	adds	r3, #1
 80053cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1cb      	bne.n	800537e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2200      	movs	r2, #0
 80053ee:	2140      	movs	r1, #64	@ 0x40
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f814 	bl	800541e <UART_WaitOnFlagUntilTimeout>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e006      	b.n	8005416 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005414:	2302      	movs	r3, #2
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542e:	e03b      	b.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005436:	d037      	beq.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005438:	f7fc ffce 	bl	80023d8 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	6a3a      	ldr	r2, [r7, #32]
 8005444:	429a      	cmp	r2, r3
 8005446:	d302      	bcc.n	800544e <UART_WaitOnFlagUntilTimeout+0x30>
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e03a      	b.n	80054c8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f003 0304 	and.w	r3, r3, #4
 800545c:	2b00      	cmp	r3, #0
 800545e:	d023      	beq.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b80      	cmp	r3, #128	@ 0x80
 8005464:	d020      	beq.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	d01d      	beq.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b08      	cmp	r3, #8
 8005478:	d116      	bne.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800547a:	2300      	movs	r3, #0
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f81d 	bl	80054d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2208      	movs	r2, #8
 800549a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e00f      	b.n	80054c8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	bf0c      	ite	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2300      	movne	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d0b4      	beq.n	8005430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b095      	sub	sp, #84	@ 0x54
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	330c      	adds	r3, #12
 80054de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e2:	e853 3f00 	ldrex	r3, [r3]
 80054e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	330c      	adds	r3, #12
 80054f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054f8:	643a      	str	r2, [r7, #64]	@ 0x40
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005500:	e841 2300 	strex	r3, r2, [r1]
 8005504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1e5      	bne.n	80054d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3314      	adds	r3, #20
 8005512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	e853 3f00 	ldrex	r3, [r3]
 800551a:	61fb      	str	r3, [r7, #28]
   return(result);
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	f023 0301 	bic.w	r3, r3, #1
 8005522:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	3314      	adds	r3, #20
 800552a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800552c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800552e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005534:	e841 2300 	strex	r3, r2, [r1]
 8005538:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800553a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1e5      	bne.n	800550c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005544:	2b01      	cmp	r3, #1
 8005546:	d119      	bne.n	800557c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	330c      	adds	r3, #12
 800554e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	e853 3f00 	ldrex	r3, [r3]
 8005556:	60bb      	str	r3, [r7, #8]
   return(result);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f023 0310 	bic.w	r3, r3, #16
 800555e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	330c      	adds	r3, #12
 8005566:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005568:	61ba      	str	r2, [r7, #24]
 800556a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556c:	6979      	ldr	r1, [r7, #20]
 800556e:	69ba      	ldr	r2, [r7, #24]
 8005570:	e841 2300 	strex	r3, r2, [r1]
 8005574:	613b      	str	r3, [r7, #16]
   return(result);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1e5      	bne.n	8005548 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2220      	movs	r2, #32
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800558a:	bf00      	nop
 800558c:	3754      	adds	r7, #84	@ 0x54
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800559c:	b0c0      	sub	sp, #256	@ 0x100
 800559e:	af00      	add	r7, sp, #0
 80055a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b4:	68d9      	ldr	r1, [r3, #12]
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	ea40 0301 	orr.w	r3, r0, r1
 80055c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	695b      	ldr	r3, [r3, #20]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055f0:	f021 010c 	bic.w	r1, r1, #12
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055fe:	430b      	orrs	r3, r1
 8005600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005612:	6999      	ldr	r1, [r3, #24]
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	ea40 0301 	orr.w	r3, r0, r1
 800561e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b8f      	ldr	r3, [pc, #572]	@ (8005864 <UART_SetConfig+0x2cc>)
 8005628:	429a      	cmp	r2, r3
 800562a:	d005      	beq.n	8005638 <UART_SetConfig+0xa0>
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	4b8d      	ldr	r3, [pc, #564]	@ (8005868 <UART_SetConfig+0x2d0>)
 8005634:	429a      	cmp	r2, r3
 8005636:	d104      	bne.n	8005642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005638:	f7fe fb60 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 800563c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005640:	e003      	b.n	800564a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005642:	f7fe fb47 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8005646:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005654:	f040 810c 	bne.w	8005870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800565c:	2200      	movs	r2, #0
 800565e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005662:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800566a:	4622      	mov	r2, r4
 800566c:	462b      	mov	r3, r5
 800566e:	1891      	adds	r1, r2, r2
 8005670:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005672:	415b      	adcs	r3, r3
 8005674:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800567a:	4621      	mov	r1, r4
 800567c:	eb12 0801 	adds.w	r8, r2, r1
 8005680:	4629      	mov	r1, r5
 8005682:	eb43 0901 	adc.w	r9, r3, r1
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800569a:	4690      	mov	r8, r2
 800569c:	4699      	mov	r9, r3
 800569e:	4623      	mov	r3, r4
 80056a0:	eb18 0303 	adds.w	r3, r8, r3
 80056a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80056a8:	462b      	mov	r3, r5
 80056aa:	eb49 0303 	adc.w	r3, r9, r3
 80056ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056c6:	460b      	mov	r3, r1
 80056c8:	18db      	adds	r3, r3, r3
 80056ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80056cc:	4613      	mov	r3, r2
 80056ce:	eb42 0303 	adc.w	r3, r2, r3
 80056d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80056d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056dc:	f7fb f9ac 	bl	8000a38 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4b61      	ldr	r3, [pc, #388]	@ (800586c <UART_SetConfig+0x2d4>)
 80056e6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ea:	095b      	lsrs	r3, r3, #5
 80056ec:	011c      	lsls	r4, r3, #4
 80056ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056f2:	2200      	movs	r2, #0
 80056f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005700:	4642      	mov	r2, r8
 8005702:	464b      	mov	r3, r9
 8005704:	1891      	adds	r1, r2, r2
 8005706:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005708:	415b      	adcs	r3, r3
 800570a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800570c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005710:	4641      	mov	r1, r8
 8005712:	eb12 0a01 	adds.w	sl, r2, r1
 8005716:	4649      	mov	r1, r9
 8005718:	eb43 0b01 	adc.w	fp, r3, r1
 800571c:	f04f 0200 	mov.w	r2, #0
 8005720:	f04f 0300 	mov.w	r3, #0
 8005724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800572c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005730:	4692      	mov	sl, r2
 8005732:	469b      	mov	fp, r3
 8005734:	4643      	mov	r3, r8
 8005736:	eb1a 0303 	adds.w	r3, sl, r3
 800573a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800573e:	464b      	mov	r3, r9
 8005740:	eb4b 0303 	adc.w	r3, fp, r3
 8005744:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005754:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800575c:	460b      	mov	r3, r1
 800575e:	18db      	adds	r3, r3, r3
 8005760:	643b      	str	r3, [r7, #64]	@ 0x40
 8005762:	4613      	mov	r3, r2
 8005764:	eb42 0303 	adc.w	r3, r2, r3
 8005768:	647b      	str	r3, [r7, #68]	@ 0x44
 800576a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800576e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005772:	f7fb f961 	bl	8000a38 <__aeabi_uldivmod>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	4611      	mov	r1, r2
 800577c:	4b3b      	ldr	r3, [pc, #236]	@ (800586c <UART_SetConfig+0x2d4>)
 800577e:	fba3 2301 	umull	r2, r3, r3, r1
 8005782:	095b      	lsrs	r3, r3, #5
 8005784:	2264      	movs	r2, #100	@ 0x64
 8005786:	fb02 f303 	mul.w	r3, r2, r3
 800578a:	1acb      	subs	r3, r1, r3
 800578c:	00db      	lsls	r3, r3, #3
 800578e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005792:	4b36      	ldr	r3, [pc, #216]	@ (800586c <UART_SetConfig+0x2d4>)
 8005794:	fba3 2302 	umull	r2, r3, r3, r2
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80057a0:	441c      	add	r4, r3
 80057a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057b4:	4642      	mov	r2, r8
 80057b6:	464b      	mov	r3, r9
 80057b8:	1891      	adds	r1, r2, r2
 80057ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057bc:	415b      	adcs	r3, r3
 80057be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057c4:	4641      	mov	r1, r8
 80057c6:	1851      	adds	r1, r2, r1
 80057c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80057ca:	4649      	mov	r1, r9
 80057cc:	414b      	adcs	r3, r1
 80057ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80057d0:	f04f 0200 	mov.w	r2, #0
 80057d4:	f04f 0300 	mov.w	r3, #0
 80057d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057dc:	4659      	mov	r1, fp
 80057de:	00cb      	lsls	r3, r1, #3
 80057e0:	4651      	mov	r1, sl
 80057e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057e6:	4651      	mov	r1, sl
 80057e8:	00ca      	lsls	r2, r1, #3
 80057ea:	4610      	mov	r0, r2
 80057ec:	4619      	mov	r1, r3
 80057ee:	4603      	mov	r3, r0
 80057f0:	4642      	mov	r2, r8
 80057f2:	189b      	adds	r3, r3, r2
 80057f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057f8:	464b      	mov	r3, r9
 80057fa:	460a      	mov	r2, r1
 80057fc:	eb42 0303 	adc.w	r3, r2, r3
 8005800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005810:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005818:	460b      	mov	r3, r1
 800581a:	18db      	adds	r3, r3, r3
 800581c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800581e:	4613      	mov	r3, r2
 8005820:	eb42 0303 	adc.w	r3, r2, r3
 8005824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800582a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800582e:	f7fb f903 	bl	8000a38 <__aeabi_uldivmod>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4b0d      	ldr	r3, [pc, #52]	@ (800586c <UART_SetConfig+0x2d4>)
 8005838:	fba3 1302 	umull	r1, r3, r3, r2
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	2164      	movs	r1, #100	@ 0x64
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	3332      	adds	r3, #50	@ 0x32
 800584a:	4a08      	ldr	r2, [pc, #32]	@ (800586c <UART_SetConfig+0x2d4>)
 800584c:	fba2 2303 	umull	r2, r3, r2, r3
 8005850:	095b      	lsrs	r3, r3, #5
 8005852:	f003 0207 	and.w	r2, r3, #7
 8005856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4422      	add	r2, r4
 800585e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005860:	e106      	b.n	8005a70 <UART_SetConfig+0x4d8>
 8005862:	bf00      	nop
 8005864:	40011000 	.word	0x40011000
 8005868:	40011400 	.word	0x40011400
 800586c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005874:	2200      	movs	r2, #0
 8005876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800587a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800587e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005882:	4642      	mov	r2, r8
 8005884:	464b      	mov	r3, r9
 8005886:	1891      	adds	r1, r2, r2
 8005888:	6239      	str	r1, [r7, #32]
 800588a:	415b      	adcs	r3, r3
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
 800588e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005892:	4641      	mov	r1, r8
 8005894:	1854      	adds	r4, r2, r1
 8005896:	4649      	mov	r1, r9
 8005898:	eb43 0501 	adc.w	r5, r3, r1
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	00eb      	lsls	r3, r5, #3
 80058a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058aa:	00e2      	lsls	r2, r4, #3
 80058ac:	4614      	mov	r4, r2
 80058ae:	461d      	mov	r5, r3
 80058b0:	4643      	mov	r3, r8
 80058b2:	18e3      	adds	r3, r4, r3
 80058b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058b8:	464b      	mov	r3, r9
 80058ba:	eb45 0303 	adc.w	r3, r5, r3
 80058be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058d2:	f04f 0200 	mov.w	r2, #0
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058de:	4629      	mov	r1, r5
 80058e0:	008b      	lsls	r3, r1, #2
 80058e2:	4621      	mov	r1, r4
 80058e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058e8:	4621      	mov	r1, r4
 80058ea:	008a      	lsls	r2, r1, #2
 80058ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058f0:	f7fb f8a2 	bl	8000a38 <__aeabi_uldivmod>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4b60      	ldr	r3, [pc, #384]	@ (8005a7c <UART_SetConfig+0x4e4>)
 80058fa:	fba3 2302 	umull	r2, r3, r3, r2
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	011c      	lsls	r4, r3, #4
 8005902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005906:	2200      	movs	r2, #0
 8005908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800590c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005914:	4642      	mov	r2, r8
 8005916:	464b      	mov	r3, r9
 8005918:	1891      	adds	r1, r2, r2
 800591a:	61b9      	str	r1, [r7, #24]
 800591c:	415b      	adcs	r3, r3
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005924:	4641      	mov	r1, r8
 8005926:	1851      	adds	r1, r2, r1
 8005928:	6139      	str	r1, [r7, #16]
 800592a:	4649      	mov	r1, r9
 800592c:	414b      	adcs	r3, r1
 800592e:	617b      	str	r3, [r7, #20]
 8005930:	f04f 0200 	mov.w	r2, #0
 8005934:	f04f 0300 	mov.w	r3, #0
 8005938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800593c:	4659      	mov	r1, fp
 800593e:	00cb      	lsls	r3, r1, #3
 8005940:	4651      	mov	r1, sl
 8005942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005946:	4651      	mov	r1, sl
 8005948:	00ca      	lsls	r2, r1, #3
 800594a:	4610      	mov	r0, r2
 800594c:	4619      	mov	r1, r3
 800594e:	4603      	mov	r3, r0
 8005950:	4642      	mov	r2, r8
 8005952:	189b      	adds	r3, r3, r2
 8005954:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005958:	464b      	mov	r3, r9
 800595a:	460a      	mov	r2, r1
 800595c:	eb42 0303 	adc.w	r3, r2, r3
 8005960:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800596e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800597c:	4649      	mov	r1, r9
 800597e:	008b      	lsls	r3, r1, #2
 8005980:	4641      	mov	r1, r8
 8005982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005986:	4641      	mov	r1, r8
 8005988:	008a      	lsls	r2, r1, #2
 800598a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800598e:	f7fb f853 	bl	8000a38 <__aeabi_uldivmod>
 8005992:	4602      	mov	r2, r0
 8005994:	460b      	mov	r3, r1
 8005996:	4611      	mov	r1, r2
 8005998:	4b38      	ldr	r3, [pc, #224]	@ (8005a7c <UART_SetConfig+0x4e4>)
 800599a:	fba3 2301 	umull	r2, r3, r3, r1
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	2264      	movs	r2, #100	@ 0x64
 80059a2:	fb02 f303 	mul.w	r3, r2, r3
 80059a6:	1acb      	subs	r3, r1, r3
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	3332      	adds	r3, #50	@ 0x32
 80059ac:	4a33      	ldr	r2, [pc, #204]	@ (8005a7c <UART_SetConfig+0x4e4>)
 80059ae:	fba2 2303 	umull	r2, r3, r2, r3
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059b8:	441c      	add	r4, r3
 80059ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059be:	2200      	movs	r2, #0
 80059c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80059c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80059c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059c8:	4642      	mov	r2, r8
 80059ca:	464b      	mov	r3, r9
 80059cc:	1891      	adds	r1, r2, r2
 80059ce:	60b9      	str	r1, [r7, #8]
 80059d0:	415b      	adcs	r3, r3
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059d8:	4641      	mov	r1, r8
 80059da:	1851      	adds	r1, r2, r1
 80059dc:	6039      	str	r1, [r7, #0]
 80059de:	4649      	mov	r1, r9
 80059e0:	414b      	adcs	r3, r1
 80059e2:	607b      	str	r3, [r7, #4]
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059f0:	4659      	mov	r1, fp
 80059f2:	00cb      	lsls	r3, r1, #3
 80059f4:	4651      	mov	r1, sl
 80059f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059fa:	4651      	mov	r1, sl
 80059fc:	00ca      	lsls	r2, r1, #3
 80059fe:	4610      	mov	r0, r2
 8005a00:	4619      	mov	r1, r3
 8005a02:	4603      	mov	r3, r0
 8005a04:	4642      	mov	r2, r8
 8005a06:	189b      	adds	r3, r3, r2
 8005a08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	460a      	mov	r2, r1
 8005a0e:	eb42 0303 	adc.w	r3, r2, r3
 8005a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a2c:	4649      	mov	r1, r9
 8005a2e:	008b      	lsls	r3, r1, #2
 8005a30:	4641      	mov	r1, r8
 8005a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a36:	4641      	mov	r1, r8
 8005a38:	008a      	lsls	r2, r1, #2
 8005a3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a3e:	f7fa fffb 	bl	8000a38 <__aeabi_uldivmod>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <UART_SetConfig+0x4e4>)
 8005a48:	fba3 1302 	umull	r1, r3, r3, r2
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	2164      	movs	r1, #100	@ 0x64
 8005a50:	fb01 f303 	mul.w	r3, r1, r3
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	011b      	lsls	r3, r3, #4
 8005a58:	3332      	adds	r3, #50	@ 0x32
 8005a5a:	4a08      	ldr	r2, [pc, #32]	@ (8005a7c <UART_SetConfig+0x4e4>)
 8005a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a60:	095b      	lsrs	r3, r3, #5
 8005a62:	f003 020f 	and.w	r2, r3, #15
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4422      	add	r2, r4
 8005a6e:	609a      	str	r2, [r3, #8]
}
 8005a70:	bf00      	nop
 8005a72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a76:	46bd      	mov	sp, r7
 8005a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a7c:	51eb851f 	.word	0x51eb851f

08005a80 <__itoa>:
 8005a80:	1e93      	subs	r3, r2, #2
 8005a82:	2b22      	cmp	r3, #34	@ 0x22
 8005a84:	b510      	push	{r4, lr}
 8005a86:	460c      	mov	r4, r1
 8005a88:	d904      	bls.n	8005a94 <__itoa+0x14>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	700b      	strb	r3, [r1, #0]
 8005a8e:	461c      	mov	r4, r3
 8005a90:	4620      	mov	r0, r4
 8005a92:	bd10      	pop	{r4, pc}
 8005a94:	2a0a      	cmp	r2, #10
 8005a96:	d109      	bne.n	8005aac <__itoa+0x2c>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	da07      	bge.n	8005aac <__itoa+0x2c>
 8005a9c:	232d      	movs	r3, #45	@ 0x2d
 8005a9e:	700b      	strb	r3, [r1, #0]
 8005aa0:	4240      	negs	r0, r0
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	4421      	add	r1, r4
 8005aa6:	f000 f805 	bl	8005ab4 <__utoa>
 8005aaa:	e7f1      	b.n	8005a90 <__itoa+0x10>
 8005aac:	2100      	movs	r1, #0
 8005aae:	e7f9      	b.n	8005aa4 <__itoa+0x24>

08005ab0 <itoa>:
 8005ab0:	f7ff bfe6 	b.w	8005a80 <__itoa>

08005ab4 <__utoa>:
 8005ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ab6:	4c1f      	ldr	r4, [pc, #124]	@ (8005b34 <__utoa+0x80>)
 8005ab8:	b08b      	sub	sp, #44	@ 0x2c
 8005aba:	4605      	mov	r5, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	466e      	mov	r6, sp
 8005ac0:	f104 0c20 	add.w	ip, r4, #32
 8005ac4:	6820      	ldr	r0, [r4, #0]
 8005ac6:	6861      	ldr	r1, [r4, #4]
 8005ac8:	4637      	mov	r7, r6
 8005aca:	c703      	stmia	r7!, {r0, r1}
 8005acc:	3408      	adds	r4, #8
 8005ace:	4564      	cmp	r4, ip
 8005ad0:	463e      	mov	r6, r7
 8005ad2:	d1f7      	bne.n	8005ac4 <__utoa+0x10>
 8005ad4:	7921      	ldrb	r1, [r4, #4]
 8005ad6:	7139      	strb	r1, [r7, #4]
 8005ad8:	1e91      	subs	r1, r2, #2
 8005ada:	6820      	ldr	r0, [r4, #0]
 8005adc:	6038      	str	r0, [r7, #0]
 8005ade:	2922      	cmp	r1, #34	@ 0x22
 8005ae0:	f04f 0100 	mov.w	r1, #0
 8005ae4:	d904      	bls.n	8005af0 <__utoa+0x3c>
 8005ae6:	7019      	strb	r1, [r3, #0]
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4618      	mov	r0, r3
 8005aec:	b00b      	add	sp, #44	@ 0x2c
 8005aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af0:	1e58      	subs	r0, r3, #1
 8005af2:	4684      	mov	ip, r0
 8005af4:	fbb5 f7f2 	udiv	r7, r5, r2
 8005af8:	fb02 5617 	mls	r6, r2, r7, r5
 8005afc:	3628      	adds	r6, #40	@ 0x28
 8005afe:	446e      	add	r6, sp
 8005b00:	460c      	mov	r4, r1
 8005b02:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005b06:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005b0a:	462e      	mov	r6, r5
 8005b0c:	42b2      	cmp	r2, r6
 8005b0e:	f101 0101 	add.w	r1, r1, #1
 8005b12:	463d      	mov	r5, r7
 8005b14:	d9ee      	bls.n	8005af4 <__utoa+0x40>
 8005b16:	2200      	movs	r2, #0
 8005b18:	545a      	strb	r2, [r3, r1]
 8005b1a:	1919      	adds	r1, r3, r4
 8005b1c:	1aa5      	subs	r5, r4, r2
 8005b1e:	42aa      	cmp	r2, r5
 8005b20:	dae3      	bge.n	8005aea <__utoa+0x36>
 8005b22:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005b26:	780e      	ldrb	r6, [r1, #0]
 8005b28:	7006      	strb	r6, [r0, #0]
 8005b2a:	3201      	adds	r2, #1
 8005b2c:	f801 5901 	strb.w	r5, [r1], #-1
 8005b30:	e7f4      	b.n	8005b1c <__utoa+0x68>
 8005b32:	bf00      	nop
 8005b34:	08005cba 	.word	0x08005cba

08005b38 <memset>:
 8005b38:	4402      	add	r2, r0
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d100      	bne.n	8005b42 <memset+0xa>
 8005b40:	4770      	bx	lr
 8005b42:	f803 1b01 	strb.w	r1, [r3], #1
 8005b46:	e7f9      	b.n	8005b3c <memset+0x4>

08005b48 <strcat>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	7814      	ldrb	r4, [r2, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	3201      	adds	r2, #1
 8005b52:	2c00      	cmp	r4, #0
 8005b54:	d1fa      	bne.n	8005b4c <strcat+0x4>
 8005b56:	3b01      	subs	r3, #1
 8005b58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b60:	2a00      	cmp	r2, #0
 8005b62:	d1f9      	bne.n	8005b58 <strcat+0x10>
 8005b64:	bd10      	pop	{r4, pc}
	...

08005b68 <__libc_init_array>:
 8005b68:	b570      	push	{r4, r5, r6, lr}
 8005b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8005ba0 <__libc_init_array+0x38>)
 8005b6c:	4c0d      	ldr	r4, [pc, #52]	@ (8005ba4 <__libc_init_array+0x3c>)
 8005b6e:	1b64      	subs	r4, r4, r5
 8005b70:	10a4      	asrs	r4, r4, #2
 8005b72:	2600      	movs	r6, #0
 8005b74:	42a6      	cmp	r6, r4
 8005b76:	d109      	bne.n	8005b8c <__libc_init_array+0x24>
 8005b78:	4d0b      	ldr	r5, [pc, #44]	@ (8005ba8 <__libc_init_array+0x40>)
 8005b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8005bac <__libc_init_array+0x44>)
 8005b7c:	f000 f818 	bl	8005bb0 <_init>
 8005b80:	1b64      	subs	r4, r4, r5
 8005b82:	10a4      	asrs	r4, r4, #2
 8005b84:	2600      	movs	r6, #0
 8005b86:	42a6      	cmp	r6, r4
 8005b88:	d105      	bne.n	8005b96 <__libc_init_array+0x2e>
 8005b8a:	bd70      	pop	{r4, r5, r6, pc}
 8005b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b90:	4798      	blx	r3
 8005b92:	3601      	adds	r6, #1
 8005b94:	e7ee      	b.n	8005b74 <__libc_init_array+0xc>
 8005b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9a:	4798      	blx	r3
 8005b9c:	3601      	adds	r6, #1
 8005b9e:	e7f2      	b.n	8005b86 <__libc_init_array+0x1e>
 8005ba0:	08005ce8 	.word	0x08005ce8
 8005ba4:	08005ce8 	.word	0x08005ce8
 8005ba8:	08005ce8 	.word	0x08005ce8
 8005bac:	08005cec 	.word	0x08005cec

08005bb0 <_init>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	bf00      	nop
 8005bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bb6:	bc08      	pop	{r3}
 8005bb8:	469e      	mov	lr, r3
 8005bba:	4770      	bx	lr

08005bbc <_fini>:
 8005bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbe:	bf00      	nop
 8005bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc2:	bc08      	pop	{r3}
 8005bc4:	469e      	mov	lr, r3
 8005bc6:	4770      	bx	lr
