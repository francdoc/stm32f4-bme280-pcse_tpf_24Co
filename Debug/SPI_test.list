
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005228  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080053d4  080053d4  000063d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054e8  080054e8  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054f0  080054f0  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054f0  080054f0  000064f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054f4  080054f4  000064f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080054f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          000001c8  20000018  20000018  00007018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122e1  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c41  00000000  00000000  00019329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  0001bf70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf9  00000000  00000000  0001cef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000278e9  00000000  00000000  0001daf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015531  00000000  00000000  000453da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e56a0  00000000  00000000  0005a90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ffab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f6c  00000000  00000000  0013fff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00143f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080053bc 	.word	0x080053bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	080053bc 	.word	0x080053bc

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:

#define MAX_BUFFER 50 // Example buffer size
uint8_t uartBuffer[MAX_BUFFER];

int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f001 fb12 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f81a 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 80004f8:	f000 f884 	bl	8000604 <MX_I2C1_Init>
  MX_RTC_Init();
 80004fc:	f000 f9da 	bl	80008b4 <MX_RTC_Init>

  // Init GPIO & SPI
  MX_GPIO_Init();
 8000500:	f000 f92a 	bl	8000758 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000504:	f000 f8f2 	bl	80006ec <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
 8000508:	2000      	movs	r0, #0
 800050a:	f001 fa9b 	bl	8001a44 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 800050e:	2001      	movs	r0, #1
 8000510:	f001 fa98 	bl	8001a44 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000514:	2002      	movs	r0, #2
 8000516:	f001 fa95 	bl	8001a44 <BSP_LED_Init>

  APP_init();
 800051a:	f001 f893 	bl	8001644 <APP_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    APP_update();
 800051e:	f001 f8ca 	bl	80016b6 <APP_update>

    BSP_LED_Toggle(LED1); // Toggles LED1 to indicate system heartbeat, signaling the main event-loop is running.
 8000522:	2000      	movs	r0, #0
 8000524:	f001 fade 	bl	8001ae4 <BSP_LED_Toggle>
    APP_update();
 8000528:	bf00      	nop
 800052a:	e7f8      	b.n	800051e <main+0x32>

0800052c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	@ 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	@ 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 ff02 	bl	8005344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b29      	ldr	r3, [pc, #164]	@ (80005fc <SystemClock_Config+0xd0>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	4a28      	ldr	r2, [pc, #160]	@ (80005fc <SystemClock_Config+0xd0>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000560:	4b26      	ldr	r3, [pc, #152]	@ (80005fc <SystemClock_Config+0xd0>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b23      	ldr	r3, [pc, #140]	@ (8000600 <SystemClock_Config+0xd4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a22      	ldr	r2, [pc, #136]	@ (8000600 <SystemClock_Config+0xd4>)
 8000576:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b20      	ldr	r3, [pc, #128]	@ (8000600 <SystemClock_Config+0xd4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000588:	2309      	movs	r3, #9
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000592:	2301      	movs	r3, #1
 8000594:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a4:	23a8      	movs	r3, #168	@ 0xa8
 80005a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ac:	2307      	movs	r3, #7
 80005ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fb23 	bl	8002c00 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005c0:	f000 f99e 	bl	8000900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2105      	movs	r1, #5
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fd84 	bl	80030f0 <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ee:	f000 f987 	bl	8000900 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	@ 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060a:	4b33      	ldr	r3, [pc, #204]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 800060c:	4a33      	ldr	r2, [pc, #204]	@ (80006dc <MX_I2C1_Init+0xd8>)
 800060e:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000610:	4b31      	ldr	r3, [pc, #196]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 8000612:	4a33      	ldr	r2, [pc, #204]	@ (80006e0 <MX_I2C1_Init+0xdc>)
 8000614:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000616:	4b30      	ldr	r3, [pc, #192]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061c:	4b2e      	ldr	r3, [pc, #184]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000622:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 8000624:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062a:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000630:	4b29      	ldr	r3, [pc, #164]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000636:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063c:	4b26      	ldr	r3, [pc, #152]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]

  // I2C init code
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <MX_I2C1_Init+0xe0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	4a26      	ldr	r2, [pc, #152]	@ (80006e4 <MX_I2C1_Init+0xe0>)
 800064c:	f043 0302 	orr.w	r3, r3, #2
 8000650:	6313      	str	r3, [r2, #48]	@ 0x30
 8000652:	4b24      	ldr	r3, [pc, #144]	@ (80006e4 <MX_I2C1_Init+0xe0>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000656:	f003 0302 	and.w	r3, r3, #2
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800065e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000662:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000664:	2312      	movs	r3, #18
 8000666:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000670:	2304      	movs	r3, #4
 8000672:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	481b      	ldr	r0, [pc, #108]	@ (80006e8 <MX_I2C1_Init+0xe4>)
 800067c:	f001 fbc8 	bl	8001e10 <HAL_GPIO_Init>

	 /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_I2C1_Init+0xe0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <MX_I2C1_Init+0xe0>)
 800068a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_I2C1_Init+0xe0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069c:	480e      	ldr	r0, [pc, #56]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 800069e:	f001 fd97 	bl	80021d0 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0xa8>
  {
    Error_Handler();
 80006a8:	f000 f92a 	bl	8000900 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 80006b0:	f002 fa2b 	bl	8002b0a <HAL_I2CEx_ConfigAnalogFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C1_Init+0xba>
  {
    Error_Handler();
 80006ba:	f000 f921 	bl	8000900 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4805      	ldr	r0, [pc, #20]	@ (80006d8 <MX_I2C1_Init+0xd4>)
 80006c2:	f002 fa5e 	bl	8002b82 <HAL_I2CEx_ConfigDigitalFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0xcc>
  {
    Error_Handler();
 80006cc:	f000 f918 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000034 	.word	0x20000034
 80006dc:	40005400 	.word	0x40005400
 80006e0:	000186a0 	.word	0x000186a0
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020400 	.word	0x40020400

080006ec <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */

    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 80006f0:	4b17      	ldr	r3, [pc, #92]	@ (8000750 <MX_SPI1_Init+0x64>)
 80006f2:	4a18      	ldr	r2, [pc, #96]	@ (8000754 <MX_SPI1_Init+0x68>)
 80006f4:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 80006f6:	4b16      	ldr	r3, [pc, #88]	@ (8000750 <MX_SPI1_Init+0x64>)
 80006f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006fc:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000718:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800071c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000720:	2238      	movs	r2, #56	@ 0x38
 8000722:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000724:	4b0a      	ldr	r3, [pc, #40]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_SPI1_Init+0x64>)
 800072c:	2200      	movs	r2, #0
 800072e:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_SPI1_Init+0x64>)
 8000738:	220a      	movs	r2, #10
 800073a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	@ (8000750 <MX_SPI1_Init+0x64>)
 800073e:	f003 fbc3 	bl	8003ec8 <HAL_SPI_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_SPI1_Init+0x60>
    {
    	API_BME280_ErrorHandler();
 8000748:	f000 fc9e 	bl	8001088 <API_BME280_ErrorHandler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	20000088 	.word	0x20000088
 8000754:	40013000 	.word	0x40013000

08000758 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	@ 0x30
 800075c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b4c      	ldr	r3, [pc, #304]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a4b      	ldr	r2, [pc, #300]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b49      	ldr	r3, [pc, #292]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b45      	ldr	r3, [pc, #276]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a44      	ldr	r2, [pc, #272]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b42      	ldr	r3, [pc, #264]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b3e      	ldr	r3, [pc, #248]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a3d      	ldr	r2, [pc, #244]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b3b      	ldr	r3, [pc, #236]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b37      	ldr	r3, [pc, #220]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a36      	ldr	r2, [pc, #216]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b34      	ldr	r3, [pc, #208]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b30      	ldr	r3, [pc, #192]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a2f      	ldr	r2, [pc, #188]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b2d      	ldr	r3, [pc, #180]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a28      	ldr	r2, [pc, #160]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b26      	ldr	r3, [pc, #152]	@ (80008a4 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f244 0189 	movw	r1, #16521	@ 0x4089
 800081c:	4822      	ldr	r0, [pc, #136]	@ (80008a8 <MX_GPIO_Init+0x150>)
 800081e:	f001 fca3 	bl	8002168 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	@ 0x40
 8000826:	4821      	ldr	r0, [pc, #132]	@ (80008ac <MX_GPIO_Init+0x154>)
 8000828:	f001 fc9e 	bl	8002168 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481b      	ldr	r0, [pc, #108]	@ (80008b0 <MX_GPIO_Init+0x158>)
 8000844:	f001 fae4 	bl	8001e10 <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin CS_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin;
 8000848:	f244 0389 	movw	r3, #16521	@ 0x4089
 800084c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4811      	ldr	r0, [pc, #68]	@ (80008a8 <MX_GPIO_Init+0x150>)
 8000862:	f001 fad5 	bl	8001e10 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000866:	2340      	movs	r3, #64	@ 0x40
 8000868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <MX_GPIO_Init+0x154>)
 800087e:	f001 fac7 	bl	8001e10 <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000882:	2380      	movs	r3, #128	@ 0x80
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_GPIO_Init+0x154>)
 8000896:	f001 fabb 	bl	8001e10 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	@ 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40020800 	.word	0x40020800

080008b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_RTC_Init+0x44>)
 80008ba:	4a10      	ldr	r2, [pc, #64]	@ (80008fc <MX_RTC_Init+0x48>)
 80008bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <MX_RTC_Init+0x44>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <MX_RTC_Init+0x44>)
 80008c6:	227f      	movs	r2, #127	@ 0x7f
 80008c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	@ (80008f8 <MX_RTC_Init+0x44>)
 80008cc:	22ff      	movs	r2, #255	@ 0xff
 80008ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008d0:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <MX_RTC_Init+0x44>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <MX_RTC_Init+0x44>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <MX_RTC_Init+0x44>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <MX_RTC_Init+0x44>)
 80008e4:	f002 ffe4 	bl	80038b0 <HAL_RTC_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80008ee:	f000 f807 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000e0 	.word	0x200000e0
 80008fc:	40002800 	.word	0x40002800

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000904:	b672      	cpsid	i
}
 8000906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <Error_Handler+0x8>

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091a:	4a0f      	ldr	r2, [pc, #60]	@ (8000958 <HAL_MspInit+0x4c>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000920:	6453      	str	r3, [r2, #68]	@ 0x44
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <HAL_MspInit+0x4c>)
 8000924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_MspInit+0x4c>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x4c>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a19      	ldr	r2, [pc, #100]	@ (80009e0 <HAL_I2C_MspInit+0x84>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d12c      	bne.n	80009d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <HAL_I2C_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <HAL_I2C_MspInit+0x88>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <HAL_I2C_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800099a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a0:	2312      	movs	r3, #18
 80009a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a8:	2303      	movs	r3, #3
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ac:	2304      	movs	r3, #4
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	480c      	ldr	r0, [pc, #48]	@ (80009e8 <HAL_I2C_MspInit+0x8c>)
 80009b8:	f001 fa2a 	bl	8001e10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	4b08      	ldr	r3, [pc, #32]	@ (80009e4 <HAL_I2C_MspInit+0x88>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c4:	4a07      	ldr	r2, [pc, #28]	@ (80009e4 <HAL_I2C_MspInit+0x88>)
 80009c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80009cc:	4b05      	ldr	r3, [pc, #20]	@ (80009e4 <HAL_I2C_MspInit+0x88>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	@ 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40005400 	.word	0x40005400
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400

080009ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	@ 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2230      	movs	r2, #48	@ 0x30
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fca1 	bl	8005344 <memset>
  if(hrtc->Instance==RTC)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a0c      	ldr	r2, [pc, #48]	@ (8000a38 <HAL_RTC_MspInit+0x4c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d111      	bne.n	8000a30 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a14:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fd88 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a26:	f7ff ff6b 	bl	8000900 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a2a:	4b04      	ldr	r3, [pc, #16]	@ (8000a3c <HAL_RTC_MspInit+0x50>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a30:	bf00      	nop
 8000a32:	3738      	adds	r7, #56	@ 0x38
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40002800 	.word	0x40002800
 8000a3c:	42470e3c 	.word	0x42470e3c

08000a40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	@ 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <HAL_SPI_MspInit+0xc0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d149      	bne.n	8000af6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b27      	ldr	r3, [pc, #156]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	4a26      	ldr	r2, [pc, #152]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000a6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a72:	4b24      	ldr	r3, [pc, #144]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a1f      	ldr	r2, [pc, #124]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_SPI_MspInit+0xc4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ab6:	2360      	movs	r3, #96	@ 0x60
 8000ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aba:	2302      	movs	r3, #2
 8000abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	2303      	movs	r3, #3
 8000ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0314 	add.w	r3, r7, #20
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480d      	ldr	r0, [pc, #52]	@ (8000b08 <HAL_SPI_MspInit+0xc8>)
 8000ad2:	f001 f99d 	bl	8001e10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ad6:	2320      	movs	r3, #32
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ae6:	2305      	movs	r3, #5
 8000ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	4806      	ldr	r0, [pc, #24]	@ (8000b0c <HAL_SPI_MspInit+0xcc>)
 8000af2:	f001 f98d 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40013000 	.word	0x40013000
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400

08000b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	@ 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a19      	ldr	r2, [pc, #100]	@ (8000b94 <HAL_UART_MspInit+0x84>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d12c      	bne.n	8000b8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b18      	ldr	r3, [pc, #96]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3a:	4a17      	ldr	r2, [pc, #92]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b42:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b7c:	2307      	movs	r3, #7
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	4619      	mov	r1, r3
 8000b86:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <HAL_UART_MspInit+0x8c>)
 8000b88:	f001 f942 	bl	8001e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	@ 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40004800 	.word	0x40004800
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020c00 	.word	0x40020c00

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 ffe1 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c28:	f7ff ffea 	bl	8000c00 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2e:	490d      	ldr	r1, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c30:	4a0d      	ldr	r2, [pc, #52]	@ (8000c68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c34:	e002      	b.n	8000c3c <LoopCopyDataInit>

08000c36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3a:	3304      	adds	r3, #4

08000c3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c40:	d3f9      	bcc.n	8000c36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c44:	4c0a      	ldr	r4, [pc, #40]	@ (8000c70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c48:	e001      	b.n	8000c4e <LoopFillZerobss>

08000c4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c4c:	3204      	adds	r2, #4

08000c4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c50:	d3fb      	bcc.n	8000c4a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f004 fb8f 	bl	8005374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c56:	f7ff fc49 	bl	80004ec <main>
  bx  lr    
 8000c5a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c5c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c64:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000c68:	080054f8 	.word	0x080054f8
  ldr r2, =_sbss
 8000c6c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000c70:	200001e0 	.word	0x200001e0

08000c74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c74:	e7fe      	b.n	8000c74 <ADC_IRQHandler>

08000c76 <combineBytes>:
 * @param  uint8_t msb: Most significant byte.
 * @param  uint8_t lsb: Least significant byte.
 * @retval uint16_t: Combined 16-bit integer.
 */
static uint16_t combineBytes(uint8_t msb, uint8_t lsb)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	460a      	mov	r2, r1
 8000c80:	71fb      	strb	r3, [r7, #7]
 8000c82:	4613      	mov	r3, r2
 8000c84:	71bb      	strb	r3, [r7, #6]
  // Safety check to ensure that inputs are 8 bits wide and are not being potentially truncated if they were bigger than uint8_t. .
  if (msb > 0xFF || lsb > 0xFF)
  {
    API_BME280_ErrorHandler();
  }
  return ((uint16_t)msb << 8) | lsb;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	79bb      	ldrb	r3, [r7, #6]
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	b29b      	uxth	r3, r3
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <extractBits>:
 * @param  uint8_t mask: Mask to apply for bit extraction.
 * @param  uint8_t shift: Number of bits to shift after masking.
 * @retval uint8_t: Extracted bits as a byte.
 */
static uint8_t extractBits(uint8_t value, uint8_t mask, uint8_t shift)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	4603      	mov	r3, r0
 8000caa:	71fb      	strb	r3, [r7, #7]
 8000cac:	460b      	mov	r3, r1
 8000cae:	71bb      	strb	r3, [r7, #6]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	717b      	strb	r3, [r7, #5]
  // Safety check to ensure that inputs are 8 bits wide and are not being potentially truncated if they were bigger than uint8_t. .
  if (value > 0xFF || mask > 0xFF || shift > 7)
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	2b07      	cmp	r3, #7
 8000cb8:	d901      	bls.n	8000cbe <extractBits+0x1c>
  {
    API_BME280_ErrorHandler();
 8000cba:	f000 f9e5 	bl	8001088 <API_BME280_ErrorHandler>
  }
  return (value & mask) >> shift;
 8000cbe:	79fa      	ldrb	r2, [r7, #7]
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	797b      	ldrb	r3, [r7, #5]
 8000cca:	fa42 f303 	asr.w	r3, r2, r3
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <errorLedSignal>:
 * @brief  Flashes LED to signal an error in BME280 operations.
 * @param  None
 * @retval None
 */
static void errorLedSignal(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  for (int i = 0; i <= NumErrorRxBlinks; i++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	e008      	b.n	8000cf6 <errorLedSignal+0x1e>
  {
    BME280_HAL_Blink(LED3); // Sensor error.
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f000 fa3c 	bl	8001162 <BME280_HAL_Blink>
    BME280_HAL_Delay(BME280_HAL_DELAY);
 8000cea:	2064      	movs	r0, #100	@ 0x64
 8000cec:	f000 fa2e 	bl	800114c <BME280_HAL_Delay>
  for (int i = 0; i <= NumErrorRxBlinks; i++)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	607b      	str	r3, [r7, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	ddf3      	ble.n	8000ce4 <errorLedSignal+0xc>
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <calibrationParams>:
 *         Each compensation word is a 16-bit signed or unsigned integer value stored in two’s complement.
 * @param  None
 * @retval None
 */
static void calibrationParams(void)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b08b      	sub	sp, #44	@ 0x2c
 8000d0c:	af00      	add	r7, sp, #0
  uint8_t calibDataBuffer2[BME280_CALIBDATA_BLOCK2_SIZE];

  /* Read the first block of calibration data from the sensor, storing the data read from memory addresses 0x88 to 0xA1.
   * This block contains the calibration values for temperature and pressure, covering a 26-byte range.
   * Although the pressure values won't be used, they will be extracted anyways.*/
  BME280_HAL_SPI_Read(BME280_CALIB_00_ADDR, calibDataBuffer1, BME280_CALIBDATA_BLOCK1_SIZE);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	221a      	movs	r2, #26
 8000d14:	4619      	mov	r1, r3
 8000d16:	2088      	movs	r0, #136	@ 0x88
 8000d18:	f000 f9ea 	bl	80010f0 <BME280_HAL_SPI_Read>

  /* Read the second block of calibration data from the sensor, storing the data read from memory addresses 0x88 to 0xA1.
   * This block contains the calibration values for humidity, covering a 7-byte range.*/
  BME280_HAL_SPI_Read(BME280_CALIB_26_ADDR, calibDataBuffer2, BME280_CALIBDATA_BLOCK2_SIZE);
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2207      	movs	r2, #7
 8000d20:	4619      	mov	r1, r3
 8000d22:	20e1      	movs	r0, #225	@ 0xe1
 8000d24:	f000 f9e4 	bl	80010f0 <BME280_HAL_SPI_Read>

  // The next operations rely heavily on datasheet table 16: Compensation parameter storage, naming and data type.

  // Combine the bytes read from the calibration memory into 16-bit integers for temperature
  dig_T1 = combineBytes(calibDataBuffer1[DIG_T1_MSB_INDEX], calibDataBuffer1[DIG_T1_LSB_INDEX]);
 8000d28:	7b7b      	ldrb	r3, [r7, #13]
 8000d2a:	7b3a      	ldrb	r2, [r7, #12]
 8000d2c:	4611      	mov	r1, r2
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ffa1 	bl	8000c76 <combineBytes>
 8000d34:	4603      	mov	r3, r0
 8000d36:	461a      	mov	r2, r3
 8000d38:	4b24      	ldr	r3, [pc, #144]	@ (8000dcc <calibrationParams+0xc4>)
 8000d3a:	801a      	strh	r2, [r3, #0]
  dig_T2 = combineBytes(calibDataBuffer1[DIG_T2_MSB_INDEX], calibDataBuffer1[DIG_T2_LSB_INDEX]);
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
 8000d3e:	7bba      	ldrb	r2, [r7, #14]
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff97 	bl	8000c76 <combineBytes>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	b21a      	sxth	r2, r3
 8000d4c:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <calibrationParams+0xc8>)
 8000d4e:	801a      	strh	r2, [r3, #0]
  dig_T3 = combineBytes(calibDataBuffer1[DIG_T3_MSB_INDEX], calibDataBuffer1[DIG_T3_LSB_INDEX]);
 8000d50:	7c7b      	ldrb	r3, [r7, #17]
 8000d52:	7c3a      	ldrb	r2, [r7, #16]
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff ff8d 	bl	8000c76 <combineBytes>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <calibrationParams+0xcc>)
 8000d62:	801a      	strh	r2, [r3, #0]

  // Extract data for first trimming humidity value (dig_H1)
  dig_H1 = calibDataBuffer1[DIG_H1_INDEX];
 8000d64:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <calibrationParams+0xd0>)
 8000d6a:	701a      	strb	r2, [r3, #0]

  dig_H2 = combineBytes(calibDataBuffer2[DIG_H2_MSB_INDEX], calibDataBuffer2[DIG_H2_LSB_INDEX]);
 8000d6c:	797b      	ldrb	r3, [r7, #5]
 8000d6e:	793a      	ldrb	r2, [r7, #4]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ff7f 	bl	8000c76 <combineBytes>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	4b17      	ldr	r3, [pc, #92]	@ (8000ddc <calibrationParams+0xd4>)
 8000d7e:	801a      	strh	r2, [r3, #0]
  dig_H3 = calibDataBuffer2[DIG_H3_INDEX];
 8000d80:	79ba      	ldrb	r2, [r7, #6]
 8000d82:	4b17      	ldr	r3, [pc, #92]	@ (8000de0 <calibrationParams+0xd8>)
 8000d84:	701a      	strb	r2, [r3, #0]

  // For dig_H4, special bit manipulations are required to combine parts of two different bytes
  dig_H4 = (calibDataBuffer2[DIG_H4_MSB_INDEX] << 4) | extractBits(calibDataBuffer2[DIG_H4_LSB_INDEX], 0x0F, 0);
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	011b      	lsls	r3, r3, #4
 8000d8a:	b21c      	sxth	r4, r3
 8000d8c:	7a3b      	ldrb	r3, [r7, #8]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	210f      	movs	r1, #15
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff85 	bl	8000ca2 <extractBits>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	b21b      	sxth	r3, r3
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	b21a      	sxth	r2, r3
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <calibrationParams+0xdc>)
 8000da2:	801a      	strh	r2, [r3, #0]

  // For dig_H5, special bit manipulations are required to combine parts of two different bytes
  dig_H5 = (calibDataBuffer2[DIG_H5_MSB_INDEX] << 4) | (calibDataBuffer2[DIG_H5_LSB_INDEX] >> 4);
 8000da4:	7a3b      	ldrb	r3, [r7, #8]
 8000da6:	011b      	lsls	r3, r3, #4
 8000da8:	b21a      	sxth	r2, r3
 8000daa:	7a7b      	ldrb	r3, [r7, #9]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	b21b      	sxth	r3, r3
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b21a      	sxth	r2, r3
 8000db6:	4b0c      	ldr	r3, [pc, #48]	@ (8000de8 <calibrationParams+0xe0>)
 8000db8:	801a      	strh	r2, [r3, #0]

  // Store the final humidity calibration value directly from the corresponding byte
  dig_H6 = calibDataBuffer2[DIG_H6_INDEX];
 8000dba:	7abb      	ldrb	r3, [r7, #10]
 8000dbc:	b25a      	sxtb	r2, r3
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <calibrationParams+0xe4>)
 8000dc0:	701a      	strb	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	372c      	adds	r7, #44	@ 0x2c
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd90      	pop	{r4, r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000108 	.word	0x20000108
 8000dd0:	2000010a 	.word	0x2000010a
 8000dd4:	2000010c 	.word	0x2000010c
 8000dd8:	2000010e 	.word	0x2000010e
 8000ddc:	20000110 	.word	0x20000110
 8000de0:	20000112 	.word	0x20000112
 8000de4:	20000114 	.word	0x20000114
 8000de8:	20000116 	.word	0x20000116
 8000dec:	20000118 	.word	0x20000118

08000df0 <BME280_compensate_T_int32>:
 *         t_fine carries fine temperature as global value for BME280_compensate_H_int32 function to process its return humidity value.
 * @param  BME280_S32_t adc_T: Raw ADC temperature value.
 * @retval BME280_S32_t: Compensated temperature value.
 */
static BME280_S32_t BME280_compensate_T_int32(BME280_S32_t adc_T)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  // Ensure that adc_T is within the valid 20-bit range (since temperature is typically represented by a 20-bit value).
  if (adc_T < 0 || adc_T > 0xFFFFF) // 20-bit range check
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db03      	blt.n	8000e06 <BME280_compensate_T_int32+0x16>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8000e04:	db01      	blt.n	8000e0a <BME280_compensate_T_int32+0x1a>
  {
    API_BME280_ErrorHandler();
 8000e06:	f000 f93f 	bl	8001088 <API_BME280_ErrorHandler>
  }

  BME280_S32_t var1, var2, T;
  var1 = ((((adc_T >> 3) - ((BME280_S32_t)dig_T1 << 1))) * ((BME280_S32_t)dig_T2)) >> 11;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	10da      	asrs	r2, r3, #3
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <BME280_compensate_T_int32+0x80>)
 8000e10:	881b      	ldrh	r3, [r3, #0]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	4a17      	ldr	r2, [pc, #92]	@ (8000e74 <BME280_compensate_T_int32+0x84>)
 8000e18:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e1c:	fb02 f303 	mul.w	r3, r2, r3
 8000e20:	12db      	asrs	r3, r3, #11
 8000e22:	617b      	str	r3, [r7, #20]
  var2 = (((((adc_T >> 4) - ((BME280_S32_t)dig_T1)) * ((adc_T >> 4) - ((BME280_S32_t)dig_T1))) >> 12) * ((BME280_S32_t)dig_T3)) >> 14;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	111b      	asrs	r3, r3, #4
 8000e28:	4a11      	ldr	r2, [pc, #68]	@ (8000e70 <BME280_compensate_T_int32+0x80>)
 8000e2a:	8812      	ldrh	r2, [r2, #0]
 8000e2c:	1a9b      	subs	r3, r3, r2
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	1112      	asrs	r2, r2, #4
 8000e32:	490f      	ldr	r1, [pc, #60]	@ (8000e70 <BME280_compensate_T_int32+0x80>)
 8000e34:	8809      	ldrh	r1, [r1, #0]
 8000e36:	1a52      	subs	r2, r2, r1
 8000e38:	fb02 f303 	mul.w	r3, r2, r3
 8000e3c:	131b      	asrs	r3, r3, #12
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <BME280_compensate_T_int32+0x88>)
 8000e40:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e44:	fb02 f303 	mul.w	r3, r2, r3
 8000e48:	139b      	asrs	r3, r3, #14
 8000e4a:	613b      	str	r3, [r7, #16]
  t_fine = var1 + var2;
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4413      	add	r3, r2
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <BME280_compensate_T_int32+0x8c>)
 8000e54:	6013      	str	r3, [r2, #0]
  T = (t_fine * 5 + 128) >> 8;
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <BME280_compensate_T_int32+0x8c>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	4413      	add	r3, r2
 8000e60:	3380      	adds	r3, #128	@ 0x80
 8000e62:	121b      	asrs	r3, r3, #8
 8000e64:	60fb      	str	r3, [r7, #12]
  return T;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000108 	.word	0x20000108
 8000e74:	2000010a 	.word	0x2000010a
 8000e78:	2000010c 	.word	0x2000010c
 8000e7c:	20000124 	.word	0x20000124

08000e80 <BME280_compensate_H_int32>:
 *         For example, an output value of “47445” represents 47445/1024 = 46.333 %RH.
 * @param  BME280_S32_t adc_H: Raw ADC humidity value.
 * @retval BME280_U32_t: Compensated humidity value.
 */
static BME280_U32_t BME280_compensate_H_int32(BME280_S32_t adc_H)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  // Ensure that adc_H is within the valid 16-bit range.
  if (adc_H < 0 || adc_H > 0xFFFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db03      	blt.n	8000e96 <BME280_compensate_H_int32+0x16>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e94:	db01      	blt.n	8000e9a <BME280_compensate_H_int32+0x1a>
  {
    API_BME280_ErrorHandler();
 8000e96:	f000 f8f7 	bl	8001088 <API_BME280_ErrorHandler>
  }

  BME280_S32_t v_x1_u32r;
  v_x1_u32r = (t_fine - ((BME280_S32_t)76800));
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <BME280_compensate_H_int32+0xcc>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8000ea2:	60fb      	str	r3, [r7, #12]
  v_x1_u32r = (((((adc_H << 14) - (((BME280_S32_t)dig_H4) << 20) - (((BME280_S32_t)dig_H5) * v_x1_u32r)) + ((BME280_S32_t)16384)) >> 15) * (((((((v_x1_u32r * ((BME280_S32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((BME280_S32_t)dig_H3)) >> 11) + ((BME280_S32_t)32768))) >> 10) + ((BME280_S32_t)2097152)) * ((BME280_S32_t)dig_H2) + 8192) >> 14));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	039a      	lsls	r2, r3, #14
 8000ea8:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <BME280_compensate_H_int32+0xd0>)
 8000eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eae:	051b      	lsls	r3, r3, #20
 8000eb0:	1ad2      	subs	r2, r2, r3
 8000eb2:	4b28      	ldr	r3, [pc, #160]	@ (8000f54 <BME280_compensate_H_int32+0xd4>)
 8000eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	fb01 f303 	mul.w	r3, r1, r3
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8000ec6:	13db      	asrs	r3, r3, #15
 8000ec8:	4a23      	ldr	r2, [pc, #140]	@ (8000f58 <BME280_compensate_H_int32+0xd8>)
 8000eca:	f992 2000 	ldrsb.w	r2, [r2]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	fb01 f202 	mul.w	r2, r1, r2
 8000ed6:	1292      	asrs	r2, r2, #10
 8000ed8:	4920      	ldr	r1, [pc, #128]	@ (8000f5c <BME280_compensate_H_int32+0xdc>)
 8000eda:	7809      	ldrb	r1, [r1, #0]
 8000edc:	4608      	mov	r0, r1
 8000ede:	68f9      	ldr	r1, [r7, #12]
 8000ee0:	fb00 f101 	mul.w	r1, r0, r1
 8000ee4:	12c9      	asrs	r1, r1, #11
 8000ee6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8000eea:	fb01 f202 	mul.w	r2, r1, r2
 8000eee:	1292      	asrs	r2, r2, #10
 8000ef0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8000ef4:	491a      	ldr	r1, [pc, #104]	@ (8000f60 <BME280_compensate_H_int32+0xe0>)
 8000ef6:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000efa:	fb01 f202 	mul.w	r2, r1, r2
 8000efe:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8000f02:	1392      	asrs	r2, r2, #14
 8000f04:	fb02 f303 	mul.w	r3, r2, r3
 8000f08:	60fb      	str	r3, [r7, #12]
  v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) * ((BME280_S32_t)dig_H1)) >> 4));
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	13db      	asrs	r3, r3, #15
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	13d2      	asrs	r2, r2, #15
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	11db      	asrs	r3, r3, #7
 8000f18:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <BME280_compensate_H_int32+0xe4>)
 8000f1a:	7812      	ldrb	r2, [r2, #0]
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	111b      	asrs	r3, r3, #4
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	60fb      	str	r3, [r7, #12]
  v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8000f2e:	60fb      	str	r3, [r7, #12]
  v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8000f36:	bfa8      	it	ge
 8000f38:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8000f3c:	60fb      	str	r3, [r7, #12]
  return (BME280_U32_t)(v_x1_u32r >> 12);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	131b      	asrs	r3, r3, #12
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000124 	.word	0x20000124
 8000f50:	20000114 	.word	0x20000114
 8000f54:	20000116 	.word	0x20000116
 8000f58:	20000118 	.word	0x20000118
 8000f5c:	20000112 	.word	0x20000112
 8000f60:	20000110 	.word	0x20000110
 8000f64:	2000010e 	.word	0x2000010e

08000f68 <API_BME280_Init>:
 * @brief  Initializes the BME280 sensor by configuring its control registers and reading calibration parameters.
 * @param  None
 * @retval None
 */
void API_BME280_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  calibrationParams();
 8000f6e:	f7ff fecb 	bl	8000d08 <calibrationParams>

  /* 5.4.2 The "reset" register contains the soft reset word reset[7:0].
  If the value 0xB6 is written to the register, the device is reset using the complete power-on-reset procedure.
  The readout value is 0x00.*/
  uint8_t CmdReset = 0xB6;
 8000f72:	23b6      	movs	r3, #182	@ 0xb6
 8000f74:	71fb      	strb	r3, [r7, #7]

  /* 4.3. Register 0xF2 “ctrl_hum”. The “ctrl_hum” register sets the humidity data acquisition options of the device.
   * For this system I chose humidity at oversampling x 16.*/
  uint8_t CmdCtrlHum = 0x05;
 8000f76:	2305      	movs	r3, #5
 8000f78:	71bb      	strb	r3, [r7, #6]
   * bit-7, bit-6, bit-5, bit-4, bit-3, bit-2, bit-1, bit-0
   * 0b10100011
   * Temperature at oversampling x 16.
   * Pressure is not necessary since we will not use it in this system.
   * Mode is Normal.*/
  uint8_t CmdCtrlMeasr = 0xA3;
 8000f7a:	23a3      	movs	r3, #163	@ 0xa3
 8000f7c:	717b      	strb	r3, [r7, #5]
   * 0b00011000
   * For this system I chose ts_tandby [ms] = 0.5 ms (bits 7->5 = 000). Chose this configuration so we have the smallest time interval between measurements. Making the system more reactive to changes in temperature.
   * See in datasheet section 3.3.4 Normal mode (figure 5: Normal mode timing diagram).
   * For this system I chose a filter coefficient of 8 (bits 4->2 = 011. When the IIR filter is enabled, the temperature resolution is 20 bit (see section 3.4.3 for more info on temperature measurement).
   * For this system we disable 3-wire SPI interface when bit-0 set to ‘0’. Please check section 6.3 for more information on this.*/
  uint8_t CmdConfig = 0x18;
 8000f7e:	2318      	movs	r3, #24
 8000f80:	713b      	strb	r3, [r7, #4]

  // Write reset sequence to the reset register
  BME280_HAL_SPI_Write(BME280_RESET_REG, &CmdReset, CMD_WRITE_SIZE);
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	2201      	movs	r2, #1
 8000f86:	4619      	mov	r1, r3
 8000f88:	20e0      	movs	r0, #224	@ 0xe0
 8000f8a:	f000 f883 	bl	8001094 <BME280_HAL_SPI_Write>
  BME280_HAL_Delay(BME280_HAL_DELAY);
 8000f8e:	2064      	movs	r0, #100	@ 0x64
 8000f90:	f000 f8dc 	bl	800114c <BME280_HAL_Delay>

  // Write control settings to the control registers
  BME280_HAL_SPI_Write(BME280_CTRL_HUM_REG, &CmdCtrlHum, CMD_WRITE_SIZE);
 8000f94:	1dbb      	adds	r3, r7, #6
 8000f96:	2201      	movs	r2, #1
 8000f98:	4619      	mov	r1, r3
 8000f9a:	20f2      	movs	r0, #242	@ 0xf2
 8000f9c:	f000 f87a 	bl	8001094 <BME280_HAL_SPI_Write>
  BME280_HAL_Delay(BME280_HAL_DELAY);
 8000fa0:	2064      	movs	r0, #100	@ 0x64
 8000fa2:	f000 f8d3 	bl	800114c <BME280_HAL_Delay>

  BME280_HAL_SPI_Write(BME280_CTRL_MEASR_REG, &CmdCtrlMeasr, CMD_WRITE_SIZE);
 8000fa6:	1d7b      	adds	r3, r7, #5
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	20f4      	movs	r0, #244	@ 0xf4
 8000fae:	f000 f871 	bl	8001094 <BME280_HAL_SPI_Write>
  BME280_HAL_Delay(BME280_HAL_DELAY);
 8000fb2:	2064      	movs	r0, #100	@ 0x64
 8000fb4:	f000 f8ca 	bl	800114c <BME280_HAL_Delay>

  BME280_HAL_SPI_Write(BME280_CTRL_CONFIG_REG, &CmdConfig, CMD_WRITE_SIZE);
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	20f5      	movs	r0, #245	@ 0xf5
 8000fc0:	f000 f868 	bl	8001094 <BME280_HAL_SPI_Write>
  BME280_HAL_Delay(BME280_HAL_DELAY);
 8000fc4:	2064      	movs	r0, #100	@ 0x64
 8000fc6:	f000 f8c1 	bl	800114c <BME280_HAL_Delay>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <API_BME280_ReadAndProcess>:
 * @brief  Reads raw temperature and humidity data from the BME280 sensor, applies compensation formulas, and converts the data to human readable units.
 * @param  None
 * @retval uint8_t: Returns 0 if the read operation is successful, 1 if an error occurs.
 */
uint8_t API_BME280_ReadAndProcess(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
  uint8_t sensorDataBuffer[8];
  uint8_t chip_Id;

  BME280_HAL_SPI_Read(CHIP_ID_REG, &chip_Id, CHIP_ID_BLOCK_SIZE);
 8000fda:	1dfb      	adds	r3, r7, #7
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4619      	mov	r1, r3
 8000fe0:	20d0      	movs	r0, #208	@ 0xd0
 8000fe2:	f000 f885 	bl	80010f0 <BME280_HAL_SPI_Read>

  if (chip_Id == BME280_CHIP_ID)
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	2b60      	cmp	r3, #96	@ 0x60
 8000fea:	d139      	bne.n	8001060 <API_BME280_ReadAndProcess+0x8c>
     *
     * BYTE 7 | BYTE 6 | BYTE 5 | BYTE 4 | BYTE 3 | BYTE 2 | BYTE 1 | BYTE 0
     * H_LSB    H_MSB    T_XLSB   T_LSB    T_MSB    P_XLSB   P_LSB    P_MSB
     * */

    BME280_HAL_SPI_Read(PRESSURE_MSB_REG, sensorDataBuffer, RAW_OUTPUT_DATA_SIZE);
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2208      	movs	r2, #8
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	20f7      	movs	r0, #247	@ 0xf7
 8000ff6:	f000 f87b 	bl	80010f0 <BME280_HAL_SPI_Read>

    // The BME280 output consists of the ADC output values that have to be compensated afterwards.

    // Combine the bytes to form the 20-bit temperature value (temp_adc).
    temp_adc = (sensorDataBuffer[TEMP_MSB_INDEX] << TEMP_MSB_SHIFT) |
 8000ffa:	7afb      	ldrb	r3, [r7, #11]
 8000ffc:	031a      	lsls	r2, r3, #12
               (sensorDataBuffer[TEMP_LSB_INDEX] << TEMP_LSB_SHIFT) |
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	011b      	lsls	r3, r3, #4
    temp_adc = (sensorDataBuffer[TEMP_MSB_INDEX] << TEMP_MSB_SHIFT) |
 8001002:	4313      	orrs	r3, r2
               (sensorDataBuffer[TEMP_XLSB_INDEX] >> TEMP_XLSB_SHIFT);
 8001004:	7b7a      	ldrb	r2, [r7, #13]
 8001006:	0912      	lsrs	r2, r2, #4
 8001008:	b2d2      	uxtb	r2, r2
               (sensorDataBuffer[TEMP_LSB_INDEX] << TEMP_LSB_SHIFT) |
 800100a:	4313      	orrs	r3, r2
    temp_adc = (sensorDataBuffer[TEMP_MSB_INDEX] << TEMP_MSB_SHIFT) |
 800100c:	4a18      	ldr	r2, [pc, #96]	@ (8001070 <API_BME280_ReadAndProcess+0x9c>)
 800100e:	6013      	str	r3, [r2, #0]

    // Apply compensation formula to temperature ADC value.
    bme280_temperature = ((float)BME280_compensate_T_int32(temp_adc)) / TEMPERATURE_SCALE_FACTOR;
 8001010:	4b17      	ldr	r3, [pc, #92]	@ (8001070 <API_BME280_ReadAndProcess+0x9c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff feeb 	bl	8000df0 <BME280_compensate_T_int32>
 800101a:	ee07 0a90 	vmov	s15, r0
 800101e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001022:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001074 <API_BME280_ReadAndProcess+0xa0>
 8001026:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102a:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <API_BME280_ReadAndProcess+0xa4>)
 800102c:	edc3 7a00 	vstr	s15, [r3]

    // Combine the bytes to form the 16-bit humidity value (hum_adc).
    hum_adc = (sensorDataBuffer[HUM_MSB_INDEX] << HUM_MSB_SHIFT) |
 8001030:	7bbb      	ldrb	r3, [r7, #14]
 8001032:	021b      	lsls	r3, r3, #8
              sensorDataBuffer[HUM_LSB_INDEX];
 8001034:	7bfa      	ldrb	r2, [r7, #15]
    hum_adc = (sensorDataBuffer[HUM_MSB_INDEX] << HUM_MSB_SHIFT) |
 8001036:	4313      	orrs	r3, r2
 8001038:	4a10      	ldr	r2, [pc, #64]	@ (800107c <API_BME280_ReadAndProcess+0xa8>)
 800103a:	6013      	str	r3, [r2, #0]

    // Apply compensation formula to humidity ADC value.
    bme280_humidity = ((float)BME280_compensate_H_int32(hum_adc)) / HUMIDITY_SCALE_FACTOR;
 800103c:	4b0f      	ldr	r3, [pc, #60]	@ (800107c <API_BME280_ReadAndProcess+0xa8>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff1d 	bl	8000e80 <BME280_compensate_H_int32>
 8001046:	ee07 0a90 	vmov	s15, r0
 800104a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001080 <API_BME280_ReadAndProcess+0xac>
 8001052:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <API_BME280_ReadAndProcess+0xb0>)
 8001058:	edc3 7a00 	vstr	s15, [r3]

    return 0;
 800105c:	2300      	movs	r3, #0
 800105e:	e002      	b.n	8001066 <API_BME280_ReadAndProcess+0x92>
  }
  else
  {
    errorLedSignal();
 8001060:	f7ff fe3a 	bl	8000cd8 <errorLedSignal>
    return 1;
 8001064:	2301      	movs	r3, #1
  }
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000011c 	.word	0x2000011c
 8001074:	42c80000 	.word	0x42c80000
 8001078:	20000100 	.word	0x20000100
 800107c:	20000120 	.word	0x20000120
 8001080:	44800000 	.word	0x44800000
 8001084:	20000104 	.word	0x20000104

08001088 <API_BME280_ErrorHandler>:
/**
 * @brief  This function is executed in case of error occurrence. Program will get stuck in this part of the code. Indicating major BME280 error.
 * @retval None
 */
void API_BME280_ErrorHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  while (1)
  {
    errorLedSignal();
 800108c:	f7ff fe24 	bl	8000cd8 <errorLedSignal>
 8001090:	e7fc      	b.n	800108c <API_BME280_ErrorHandler+0x4>
	...

08001094 <BME280_HAL_SPI_Write>:
 * @param  uint8_t *data: Pointer to the data buffer that holds the data to be written.
 * @param  uint16_t size: The size of the data buffer in bytes.
 * @retval None.
 */
void BME280_HAL_SPI_Write(uint8_t reg, uint8_t *data, uint16_t size)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	6039      	str	r1, [r7, #0]
 800109e:	71fb      	strb	r3, [r7, #7]
 80010a0:	4613      	mov	r3, r2
 80010a2:	80bb      	strh	r3, [r7, #4]
  uint8_t regAddress = reg & WRITE_CMD_BIT; // Apply the write command mask.
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateLow);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2108      	movs	r1, #8
 80010b2:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <BME280_HAL_SPI_Write+0x54>)
 80010b4:	f001 f858 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 80010b8:	f107 010f 	add.w	r1, r7, #15
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010c0:	2201      	movs	r2, #1
 80010c2:	480a      	ldr	r0, [pc, #40]	@ (80010ec <BME280_HAL_SPI_Write+0x58>)
 80010c4:	f002 ff89 	bl	8003fda <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 80010c8:	88ba      	ldrh	r2, [r7, #4]
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	4806      	ldr	r0, [pc, #24]	@ (80010ec <BME280_HAL_SPI_Write+0x58>)
 80010d2:	f002 ff82 	bl	8003fda <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateHigh);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2108      	movs	r1, #8
 80010da:	4803      	ldr	r0, [pc, #12]	@ (80010e8 <BME280_HAL_SPI_Write+0x54>)
 80010dc:	f001 f844 	bl	8002168 <HAL_GPIO_WritePin>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40020400 	.word	0x40020400
 80010ec:	20000088 	.word	0x20000088

080010f0 <BME280_HAL_SPI_Read>:
 * @param  uint8_t *data: Pointer to the data buffer where the read data will be stored.
 * @param  uint16_t size: The size of the data buffer in bytes.
 * @retval None.
 */
void BME280_HAL_SPI_Read(uint8_t reg, uint8_t *data, uint16_t size)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	4613      	mov	r3, r2
 80010fe:	80bb      	strh	r3, [r7, #4]
  uint8_t regAddress = reg | READ_CMD_BIT; // Apply the read command mask.
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001106:	b2db      	uxtb	r3, r3
 8001108:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateLow);
 800110a:	2200      	movs	r2, #0
 800110c:	2108      	movs	r1, #8
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <BME280_HAL_SPI_Read+0x54>)
 8001110:	f001 f82a 	bl	8002168 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), SPI_TX_RX_TIMEOUT);
 8001114:	f107 010f 	add.w	r1, r7, #15
 8001118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111c:	2201      	movs	r2, #1
 800111e:	480a      	ldr	r0, [pc, #40]	@ (8001148 <BME280_HAL_SPI_Read+0x58>)
 8001120:	f002 ff5b 	bl	8003fda <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, data, size, SPI_TX_RX_TIMEOUT);
 8001124:	88ba      	ldrh	r2, [r7, #4]
 8001126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800112a:	6839      	ldr	r1, [r7, #0]
 800112c:	4806      	ldr	r0, [pc, #24]	@ (8001148 <BME280_HAL_SPI_Read+0x58>)
 800112e:	f003 f897 	bl	8004260 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, PinStateHigh);
 8001132:	2201      	movs	r2, #1
 8001134:	2108      	movs	r1, #8
 8001136:	4803      	ldr	r0, [pc, #12]	@ (8001144 <BME280_HAL_SPI_Read+0x54>)
 8001138:	f001 f816 	bl	8002168 <HAL_GPIO_WritePin>
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020400 	.word	0x40020400
 8001148:	20000088 	.word	0x20000088

0800114c <BME280_HAL_Delay>:
 *  @brief  Provides a delay for a specified number of milliseconds.
 * @param  delay: The amount of time, in milliseconds, to delay.
 * @retval None
 */
void BME280_HAL_Delay(uint32_t delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f000 fd51 	bl	8001bfc <HAL_Delay>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <BME280_HAL_Blink>:
 * @brief  Toggles the state of the specified LED.
 * @param  Led: Specifies the LED to be toggled. This parameter can be one of the LED identifiers defined in the board support package (BSP), such as `LED2`, `LED3`, etc.
 * @retval None
 */
void BME280_HAL_Blink(Led_TypeDef Led)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  BSP_LED_Toggle(Led);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f000 fcb8 	bl	8001ae4 <BSP_LED_Toggle>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <RTC_Error_Handler>:

RTC_TimeTypeDef sTime = {0}; // key user variables for RTC date
RTC_DateTypeDef sDate = {0};

void RTC_Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <RTC_Error_Handler+0x4>

08001184 <clock_init_code>:
    }
    /* USER CODE END Error_Handler_Debug */
}

void clock_init_code(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
    sTime.Hours = 0x01;
 8001188:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <clock_init_code+0x68>)
 800118a:	2201      	movs	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = 0x20;
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <clock_init_code+0x68>)
 8001190:	2220      	movs	r2, #32
 8001192:	705a      	strb	r2, [r3, #1]
    sTime.Seconds = 0x00;
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <clock_init_code+0x68>)
 8001196:	2200      	movs	r2, #0
 8001198:	709a      	strb	r2, [r3, #2]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <clock_init_code+0x68>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <clock_init_code+0x68>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]

    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011a6:	2201      	movs	r2, #1
 80011a8:	4910      	ldr	r1, [pc, #64]	@ (80011ec <clock_init_code+0x68>)
 80011aa:	4811      	ldr	r0, [pc, #68]	@ (80011f0 <clock_init_code+0x6c>)
 80011ac:	f002 fc03 	bl	80039b6 <HAL_RTC_SetTime>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <clock_init_code+0x36>
    {
    	RTC_Error_Handler();
 80011b6:	f7ff ffe1 	bl	800117c <RTC_Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <clock_init_code+0x70>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
    sDate.Month = RTC_MONTH_AUGUST;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <clock_init_code+0x70>)
 80011c2:	2208      	movs	r2, #8
 80011c4:	705a      	strb	r2, [r3, #1]
    sDate.Date = 0x05;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <clock_init_code+0x70>)
 80011c8:	2205      	movs	r2, #5
 80011ca:	709a      	strb	r2, [r3, #2]
    sDate.Year = 0x24;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <clock_init_code+0x70>)
 80011ce:	2224      	movs	r2, #36	@ 0x24
 80011d0:	70da      	strb	r2, [r3, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011d2:	2201      	movs	r2, #1
 80011d4:	4907      	ldr	r1, [pc, #28]	@ (80011f4 <clock_init_code+0x70>)
 80011d6:	4806      	ldr	r0, [pc, #24]	@ (80011f0 <clock_init_code+0x6c>)
 80011d8:	f002 fce5 	bl	8003ba6 <HAL_RTC_SetDate>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <clock_init_code+0x62>
    {
    	RTC_Error_Handler();
 80011e2:	f7ff ffcb 	bl	800117c <RTC_Error_Handler>
    }
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000128 	.word	0x20000128
 80011f0:	200000e0 	.word	0x200000e0
 80011f4:	2000013c 	.word	0x2000013c

080011f8 <update_lcd_clock>:

void update_lcd_clock(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80011fc:	2201      	movs	r2, #1
 80011fe:	4905      	ldr	r1, [pc, #20]	@ (8001214 <update_lcd_clock+0x1c>)
 8001200:	4805      	ldr	r0, [pc, #20]	@ (8001218 <update_lcd_clock+0x20>)
 8001202:	f002 fc72 	bl	8003aea <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8001206:	2201      	movs	r2, #1
 8001208:	4904      	ldr	r1, [pc, #16]	@ (800121c <update_lcd_clock+0x24>)
 800120a:	4803      	ldr	r0, [pc, #12]	@ (8001218 <update_lcd_clock+0x20>)
 800120c:	f002 fd4f 	bl	8003cae <HAL_RTC_GetDate>
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000128 	.word	0x20000128
 8001218:	200000e0 	.word	0x200000e0
 800121c:	2000013c 	.word	0x2000013c

08001220 <tempFSM_init>:
#include "API_fsm.h"

static tempState_t currentTempState;

void tempFSM_init()
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
    currentTempState = TEMP_NORMAL;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <tempFSM_init+0x14>)
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	20000140 	.word	0x20000140

08001238 <eval_data>:

void FSM_update(void);

void eval_data()
{
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b08e      	sub	sp, #56	@ 0x38
 800123c:	af00      	add	r7, sp, #0
    uint8_t message[50];
    if (bme280_temperature > THRESHOLD_TEMP)
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <eval_data+0x70>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eeb3 7a06 	vmov.f32	s14, #54	@ 0x41b00000  22.0
 8001248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800124c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001250:	dd14      	ble.n	800127c <eval_data+0x44>
    {
        currentTempState = TEMP_ALARM;
 8001252:	4b16      	ldr	r3, [pc, #88]	@ (80012ac <eval_data+0x74>)
 8001254:	2201      	movs	r2, #1
 8001256:	701a      	strb	r2, [r3, #0]
        strcpy((char *)message, "Temperature Alarm State.\r\n");
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	4a15      	ldr	r2, [pc, #84]	@ (80012b0 <eval_data+0x78>)
 800125c:	461c      	mov	r4, r3
 800125e:	4615      	mov	r5, r2
 8001260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001264:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001268:	c403      	stmia	r4!, {r0, r1}
 800126a:	8022      	strh	r2, [r4, #0]
 800126c:	3402      	adds	r4, #2
 800126e:	0c13      	lsrs	r3, r2, #16
 8001270:	7023      	strb	r3, [r4, #0]
        uartSendString(message);
 8001272:	1d3b      	adds	r3, r7, #4
 8001274:	4618      	mov	r0, r3
 8001276:	f000 fbb9 	bl	80019ec <uartSendString>
    {
        currentTempState = TEMP_NORMAL;
        strcpy((char *)message, "Temperature Normal State.\r\n");
        uartSendString(message);
    }
}
 800127a:	e010      	b.n	800129e <eval_data+0x66>
        currentTempState = TEMP_NORMAL;
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <eval_data+0x74>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
        strcpy((char *)message, "Temperature Normal State.\r\n");
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <eval_data+0x7c>)
 8001286:	461c      	mov	r4, r3
 8001288:	4615      	mov	r5, r2
 800128a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uartSendString(message);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fba7 	bl	80019ec <uartSendString>
}
 800129e:	bf00      	nop
 80012a0:	3738      	adds	r7, #56	@ 0x38
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bdb0      	pop	{r4, r5, r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000100 	.word	0x20000100
 80012ac:	20000140 	.word	0x20000140
 80012b0:	080053d4 	.word	0x080053d4
 80012b4:	080053f0 	.word	0x080053f0

080012b8 <prepare_sensor_data_for_uart>:

char tempStr[20];
char humStr[20];

void prepare_sensor_data_for_uart(uint8_t *message_1, uint8_t *message_2)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
    int intPart = (int)bme280_temperature;
 80012c2:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <prepare_sensor_data_for_uart+0x150>)
 80012c4:	edd3 7a00 	vldr	s15, [r3]
 80012c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012cc:	ee17 3a90 	vmov	r3, s15
 80012d0:	60fb      	str	r3, [r7, #12]
    int fracPart = (int)((bme280_temperature - intPart) * 100);
 80012d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001408 <prepare_sensor_data_for_uart+0x150>)
 80012d4:	ed93 7a00 	vldr	s14, [r3]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	ee07 3a90 	vmov	s15, r3
 80012de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012e6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800140c <prepare_sensor_data_for_uart+0x154>
 80012ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	60bb      	str	r3, [r7, #8]
    strcpy((char *)message_1, "Temperature: ");
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a45      	ldr	r2, [pc, #276]	@ (8001410 <prepare_sensor_data_for_uart+0x158>)
 80012fc:	461c      	mov	r4, r3
 80012fe:	4613      	mov	r3, r2
 8001300:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001302:	6020      	str	r0, [r4, #0]
 8001304:	6061      	str	r1, [r4, #4]
 8001306:	60a2      	str	r2, [r4, #8]
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	81a3      	strh	r3, [r4, #12]
    itoa(intPart, tempStr, 10);
 800130c:	220a      	movs	r2, #10
 800130e:	4941      	ldr	r1, [pc, #260]	@ (8001414 <prepare_sensor_data_for_uart+0x15c>)
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f003 ffd3 	bl	80052bc <itoa>
    strcat((char *)message_1, tempStr);
 8001316:	493f      	ldr	r1, [pc, #252]	@ (8001414 <prepare_sensor_data_for_uart+0x15c>)
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f004 f81b 	bl	8005354 <strcat>
    strcat((char *)message_1, ".");
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7fe ff64 	bl	80001ec <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4413      	add	r3, r2
 800132c:	493a      	ldr	r1, [pc, #232]	@ (8001418 <prepare_sensor_data_for_uart+0x160>)
 800132e:	461a      	mov	r2, r3
 8001330:	460b      	mov	r3, r1
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	8013      	strh	r3, [r2, #0]
    itoa(fracPart, tempStr, 10);
 8001336:	220a      	movs	r2, #10
 8001338:	4936      	ldr	r1, [pc, #216]	@ (8001414 <prepare_sensor_data_for_uart+0x15c>)
 800133a:	68b8      	ldr	r0, [r7, #8]
 800133c:	f003 ffbe 	bl	80052bc <itoa>
    strcat((char *)message_1, tempStr);
 8001340:	4934      	ldr	r1, [pc, #208]	@ (8001414 <prepare_sensor_data_for_uart+0x15c>)
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f004 f806 	bl	8005354 <strcat>
    strcat((char *)message_1, " C\r\n");
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7fe ff4f 	bl	80001ec <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	461a      	mov	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
 8001356:	4a31      	ldr	r2, [pc, #196]	@ (800141c <prepare_sensor_data_for_uart+0x164>)
 8001358:	6810      	ldr	r0, [r2, #0]
 800135a:	6018      	str	r0, [r3, #0]
 800135c:	7912      	ldrb	r2, [r2, #4]
 800135e:	711a      	strb	r2, [r3, #4]

    strcpy((char *)message_2, "Humidity: ");
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	492f      	ldr	r1, [pc, #188]	@ (8001420 <prepare_sensor_data_for_uart+0x168>)
 8001364:	461a      	mov	r2, r3
 8001366:	460b      	mov	r3, r1
 8001368:	cb03      	ldmia	r3!, {r0, r1}
 800136a:	6010      	str	r0, [r2, #0]
 800136c:	6051      	str	r1, [r2, #4]
 800136e:	8819      	ldrh	r1, [r3, #0]
 8001370:	789b      	ldrb	r3, [r3, #2]
 8001372:	8111      	strh	r1, [r2, #8]
 8001374:	7293      	strb	r3, [r2, #10]
    intPart = (int)bme280_humidity;
 8001376:	4b2b      	ldr	r3, [pc, #172]	@ (8001424 <prepare_sensor_data_for_uart+0x16c>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 3a90 	vmov	r3, s15
 8001384:	60fb      	str	r3, [r7, #12]
    fracPart = (int)((bme280_humidity - intPart) * 100);
 8001386:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <prepare_sensor_data_for_uart+0x16c>)
 8001388:	ed93 7a00 	vldr	s14, [r3]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800139a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800140c <prepare_sensor_data_for_uart+0x154>
 800139e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a6:	ee17 3a90 	vmov	r3, s15
 80013aa:	60bb      	str	r3, [r7, #8]
    itoa(intPart, humStr, 10);
 80013ac:	220a      	movs	r2, #10
 80013ae:	491e      	ldr	r1, [pc, #120]	@ (8001428 <prepare_sensor_data_for_uart+0x170>)
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f003 ff83 	bl	80052bc <itoa>
    strcat((char *)message_2, humStr);
 80013b6:	491c      	ldr	r1, [pc, #112]	@ (8001428 <prepare_sensor_data_for_uart+0x170>)
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f003 ffcb 	bl	8005354 <strcat>
    strcat((char *)message_2, ".");
 80013be:	6838      	ldr	r0, [r7, #0]
 80013c0:	f7fe ff14 	bl	80001ec <strlen>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4912      	ldr	r1, [pc, #72]	@ (8001418 <prepare_sensor_data_for_uart+0x160>)
 80013ce:	461a      	mov	r2, r3
 80013d0:	460b      	mov	r3, r1
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	8013      	strh	r3, [r2, #0]
    itoa(fracPart, humStr, 10);
 80013d6:	220a      	movs	r2, #10
 80013d8:	4913      	ldr	r1, [pc, #76]	@ (8001428 <prepare_sensor_data_for_uart+0x170>)
 80013da:	68b8      	ldr	r0, [r7, #8]
 80013dc:	f003 ff6e 	bl	80052bc <itoa>
    strcat((char *)message_2, humStr);
 80013e0:	4911      	ldr	r1, [pc, #68]	@ (8001428 <prepare_sensor_data_for_uart+0x170>)
 80013e2:	6838      	ldr	r0, [r7, #0]
 80013e4:	f003 ffb6 	bl	8005354 <strcat>
    strcat((char *)message_2, " %\r\n");
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f7fe feff 	bl	80001ec <strlen>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	4413      	add	r3, r2
 80013f6:	4a0d      	ldr	r2, [pc, #52]	@ (800142c <prepare_sensor_data_for_uart+0x174>)
 80013f8:	6810      	ldr	r0, [r2, #0]
 80013fa:	6018      	str	r0, [r3, #0]
 80013fc:	7912      	ldrb	r2, [r2, #4]
 80013fe:	711a      	strb	r2, [r3, #4]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	20000100 	.word	0x20000100
 800140c:	42c80000 	.word	0x42c80000
 8001410:	0800540c 	.word	0x0800540c
 8001414:	20000144 	.word	0x20000144
 8001418:	0800541c 	.word	0x0800541c
 800141c:	08005420 	.word	0x08005420
 8001420:	08005428 	.word	0x08005428
 8001424:	20000104 	.word	0x20000104
 8001428:	20000158 	.word	0x20000158
 800142c:	08005434 	.word	0x08005434

08001430 <uart_display_data>:

void uart_display_data(uint8_t *message_1, uint8_t *message_2)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
    uartSendString(message_1);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fad6 	bl	80019ec <uartSendString>
    uartSendString(message_2);
 8001440:	6838      	ldr	r0, [r7, #0]
 8001442:	f000 fad3 	bl	80019ec <uartSendString>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <prepare_sensor_data_for_lcd>:

char lcdTempStr[20];
char lcdHumStr[20];

void prepare_sensor_data_for_lcd(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	ed2d 8b02 	vpush	{d8}
 8001456:	af00      	add	r7, sp, #0
    // Prepare temperature string for LCD
    itoa((int)bme280_temperature, lcdTempStr, 10);
 8001458:	4b37      	ldr	r3, [pc, #220]	@ (8001538 <prepare_sensor_data_for_lcd+0xe8>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001462:	220a      	movs	r2, #10
 8001464:	4935      	ldr	r1, [pc, #212]	@ (800153c <prepare_sensor_data_for_lcd+0xec>)
 8001466:	ee17 0a90 	vmov	r0, s15
 800146a:	f003 ff27 	bl	80052bc <itoa>
    strcat(lcdTempStr, ".");
 800146e:	4833      	ldr	r0, [pc, #204]	@ (800153c <prepare_sensor_data_for_lcd+0xec>)
 8001470:	f7fe febc 	bl	80001ec <strlen>
 8001474:	4603      	mov	r3, r0
 8001476:	461a      	mov	r2, r3
 8001478:	4b30      	ldr	r3, [pc, #192]	@ (800153c <prepare_sensor_data_for_lcd+0xec>)
 800147a:	4413      	add	r3, r2
 800147c:	4930      	ldr	r1, [pc, #192]	@ (8001540 <prepare_sensor_data_for_lcd+0xf0>)
 800147e:	461a      	mov	r2, r3
 8001480:	460b      	mov	r3, r1
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	8013      	strh	r3, [r2, #0]
    itoa((int)((bme280_temperature - (int)bme280_temperature) * 100), lcdTempStr + strlen(lcdTempStr), 10);
 8001486:	4b2c      	ldr	r3, [pc, #176]	@ (8001538 <prepare_sensor_data_for_lcd+0xe8>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <prepare_sensor_data_for_lcd+0xe8>)
 800148e:	edd3 7a00 	vldr	s15, [r3]
 8001492:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800149e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001544 <prepare_sensor_data_for_lcd+0xf4>
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80014aa:	4824      	ldr	r0, [pc, #144]	@ (800153c <prepare_sensor_data_for_lcd+0xec>)
 80014ac:	f7fe fe9e 	bl	80001ec <strlen>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a22      	ldr	r2, [pc, #136]	@ (800153c <prepare_sensor_data_for_lcd+0xec>)
 80014b4:	4413      	add	r3, r2
 80014b6:	220a      	movs	r2, #10
 80014b8:	4619      	mov	r1, r3
 80014ba:	ee18 0a10 	vmov	r0, s16
 80014be:	f003 fefd 	bl	80052bc <itoa>

    // Prepare humidity string for LCD
    itoa((int)bme280_humidity, lcdHumStr, 10);
 80014c2:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <prepare_sensor_data_for_lcd+0xf8>)
 80014c4:	edd3 7a00 	vldr	s15, [r3]
 80014c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014cc:	220a      	movs	r2, #10
 80014ce:	491f      	ldr	r1, [pc, #124]	@ (800154c <prepare_sensor_data_for_lcd+0xfc>)
 80014d0:	ee17 0a90 	vmov	r0, s15
 80014d4:	f003 fef2 	bl	80052bc <itoa>
    strcat(lcdHumStr, ".");
 80014d8:	481c      	ldr	r0, [pc, #112]	@ (800154c <prepare_sensor_data_for_lcd+0xfc>)
 80014da:	f7fe fe87 	bl	80001ec <strlen>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <prepare_sensor_data_for_lcd+0xfc>)
 80014e4:	4413      	add	r3, r2
 80014e6:	4916      	ldr	r1, [pc, #88]	@ (8001540 <prepare_sensor_data_for_lcd+0xf0>)
 80014e8:	461a      	mov	r2, r3
 80014ea:	460b      	mov	r3, r1
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	8013      	strh	r3, [r2, #0]
    itoa((int)((bme280_humidity - (int)bme280_humidity) * 100), lcdHumStr + strlen(lcdHumStr), 10);
 80014f0:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <prepare_sensor_data_for_lcd+0xf8>)
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <prepare_sensor_data_for_lcd+0xf8>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001508:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001544 <prepare_sensor_data_for_lcd+0xf4>
 800150c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001510:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8001514:	480d      	ldr	r0, [pc, #52]	@ (800154c <prepare_sensor_data_for_lcd+0xfc>)
 8001516:	f7fe fe69 	bl	80001ec <strlen>
 800151a:	4603      	mov	r3, r0
 800151c:	4a0b      	ldr	r2, [pc, #44]	@ (800154c <prepare_sensor_data_for_lcd+0xfc>)
 800151e:	4413      	add	r3, r2
 8001520:	220a      	movs	r2, #10
 8001522:	4619      	mov	r1, r3
 8001524:	ee18 0a10 	vmov	r0, s16
 8001528:	f003 fec8 	bl	80052bc <itoa>
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	ecbd 8b02 	vpop	{d8}
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000100 	.word	0x20000100
 800153c:	2000016c 	.word	0x2000016c
 8001540:	0800541c 	.word	0x0800541c
 8001544:	42c80000 	.word	0x42c80000
 8001548:	20000104 	.word	0x20000104
 800154c:	20000180 	.word	0x20000180

08001550 <lcd_display_sensor_data>:

void lcd_display_sensor_data(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
    API_LCD_DisplayTwoMsgs(FSM_HUM_LCD_CURSOR_POS, FSM_LCD_LINE_1, (uint8_t *)"H:", (uint8_t *)lcdHumStr);
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <lcd_display_sensor_data+0x20>)
 8001556:	4a07      	ldr	r2, [pc, #28]	@ (8001574 <lcd_display_sensor_data+0x24>)
 8001558:	2101      	movs	r1, #1
 800155a:	2009      	movs	r0, #9
 800155c:	f000 f9bb 	bl	80018d6 <API_LCD_DisplayTwoMsgs>
    API_LCD_DisplayTwoMsgs(FSM_TEMP_LCD_CURSOR_POS, FSM_LCD_LINE_2, (uint8_t *)"T:", (uint8_t *)lcdTempStr);
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <lcd_display_sensor_data+0x28>)
 8001562:	4a06      	ldr	r2, [pc, #24]	@ (800157c <lcd_display_sensor_data+0x2c>)
 8001564:	2102      	movs	r1, #2
 8001566:	2009      	movs	r0, #9
 8001568:	f000 f9b5 	bl	80018d6 <API_LCD_DisplayTwoMsgs>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000180 	.word	0x20000180
 8001574:	0800543c 	.word	0x0800543c
 8001578:	2000016c 	.word	0x2000016c
 800157c:	08005440 	.word	0x08005440

08001580 <lcd_alarm>:

void lcd_alarm()
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
    API_LCD_DisplayMsg(FSM_ALARM_LCD_CURSOR_POS, FSM_LCD_LINE_2, (uint8_t *) "ALARMA!");
 8001584:	4a03      	ldr	r2, [pc, #12]	@ (8001594 <lcd_alarm+0x14>)
 8001586:	2102      	movs	r1, #2
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f9bd 	bl	8001908 <API_LCD_DisplayMsg>
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	08005444 	.word	0x08005444

08001598 <lcd_display_clock>:

void lcd_display_clock()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
    API_LCD_SetCursorLine(0, FSM_LCD_LINE_1);
 800159c:	2101      	movs	r1, #1
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f979 	bl	8001896 <API_LCD_SetCursorLine>
    API_LCD_SendBCDData(sTime.Hours);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <lcd_display_clock+0x3c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f949 	bl	8001840 <API_LCD_SendBCDData>
    API_LCD_SendData(':');
 80015ae:	203a      	movs	r0, #58	@ 0x3a
 80015b0:	f000 f938 	bl	8001824 <API_LCD_SendData>
    API_LCD_SendBCDData(sTime.Minutes);
 80015b4:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <lcd_display_clock+0x3c>)
 80015b6:	785b      	ldrb	r3, [r3, #1]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f000 f941 	bl	8001840 <API_LCD_SendBCDData>
    API_LCD_SendData(':');
 80015be:	203a      	movs	r0, #58	@ 0x3a
 80015c0:	f000 f930 	bl	8001824 <API_LCD_SendData>
    API_LCD_SendBCDData(sTime.Seconds);
 80015c4:	4b03      	ldr	r3, [pc, #12]	@ (80015d4 <lcd_display_clock+0x3c>)
 80015c6:	789b      	ldrb	r3, [r3, #2]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f939 	bl	8001840 <API_LCD_SendBCDData>
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000128 	.word	0x20000128

080015d8 <lcd_display_date>:

void lcd_display_date()
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
    API_LCD_SetCursorLine(0, FSM_LCD_LINE_2);
 80015dc:	2102      	movs	r1, #2
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 f959 	bl	8001896 <API_LCD_SetCursorLine>
    API_LCD_SendBCDData(sDate.Date);
 80015e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001614 <lcd_display_date+0x3c>)
 80015e6:	789b      	ldrb	r3, [r3, #2]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 f929 	bl	8001840 <API_LCD_SendBCDData>
    API_LCD_SendData('/');
 80015ee:	202f      	movs	r0, #47	@ 0x2f
 80015f0:	f000 f918 	bl	8001824 <API_LCD_SendData>
    API_LCD_SendBCDData(sDate.Month);
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <lcd_display_date+0x3c>)
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f000 f921 	bl	8001840 <API_LCD_SendBCDData>
    API_LCD_SendData('/');
 80015fe:	202f      	movs	r0, #47	@ 0x2f
 8001600:	f000 f910 	bl	8001824 <API_LCD_SendData>
    API_LCD_SendBCDData(sDate.Year);
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <lcd_display_date+0x3c>)
 8001606:	78db      	ldrb	r3, [r3, #3]
 8001608:	4618      	mov	r0, r3
 800160a:	f000 f919 	bl	8001840 <API_LCD_SendBCDData>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000013c 	.word	0x2000013c

08001618 <FSM_update>:

void FSM_update()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    eval_data();
 800161c:	f7ff fe0c 	bl	8001238 <eval_data>
    switch (currentTempState)
 8001620:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <FSM_update+0x28>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d004      	beq.n	8001632 <FSM_update+0x1a>
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <FSM_update+0x20>
    {
    case TEMP_ALARM:
        lcd_alarm();
 800162c:	f7ff ffa8 	bl	8001580 <lcd_alarm>
        break;
 8001630:	e003      	b.n	800163a <FSM_update+0x22>
    case TEMP_NORMAL:
        lcd_display_date();
 8001632:	f7ff ffd1 	bl	80015d8 <lcd_display_date>
        break;
 8001636:	e000      	b.n	800163a <FSM_update+0x22>
    default:
        break;
 8001638:	bf00      	nop
    }
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000140 	.word	0x20000140

08001644 <APP_init>:

void APP_init()
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    clock_init_code();
 8001648:	f7ff fd9c 	bl	8001184 <clock_init_code>
    tempFSM_init();
 800164c:	f7ff fde8 	bl	8001220 <tempFSM_init>
    API_BME280_Init();
 8001650:	f7ff fc8a 	bl	8000f68 <API_BME280_Init>
    uartInit();
 8001654:	f000 f99a 	bl	800198c <uartInit>
    API_LCD_Initialize();
 8001658:	f000 f8a0 	bl	800179c <API_LCD_Initialize>
}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}

08001660 <APP_updateLCD>:

void APP_updateLCD(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    update_lcd_clock();
 8001664:	f7ff fdc8 	bl	80011f8 <update_lcd_clock>
    lcd_display_clock();
 8001668:	f7ff ff96 	bl	8001598 <lcd_display_clock>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <APP_updateSensorData>:

void APP_updateSensorData(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
    API_BME280_ReadAndProcess();
 8001674:	f7ff fcae 	bl	8000fd4 <API_BME280_ReadAndProcess>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <APP_prepareAndDisplaySensorData>:

void APP_prepareAndDisplaySensorData(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
    prepare_sensor_data_for_lcd();
 8001680:	f7ff fee6 	bl	8001450 <prepare_sensor_data_for_lcd>
    lcd_display_sensor_data();
 8001684:	f7ff ff64 	bl	8001550 <lcd_display_sensor_data>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <APP_prepareAndSendUARTData>:

void APP_prepareAndSendUARTData(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b09a      	sub	sp, #104	@ 0x68
 8001690:	af00      	add	r7, sp, #0
    uint8_t message_tem[50];
    uint8_t message_hum[50];
    prepare_sensor_data_for_uart(message_tem, message_hum);
 8001692:	463a      	mov	r2, r7
 8001694:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fe0c 	bl	80012b8 <prepare_sensor_data_for_uart>
    uart_display_data(message_tem, message_hum);
 80016a0:	463a      	mov	r2, r7
 80016a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fec1 	bl	8001430 <uart_display_data>
}
 80016ae:	bf00      	nop
 80016b0:	3768      	adds	r7, #104	@ 0x68
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <APP_update>:

void APP_update()
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	af00      	add	r7, sp, #0
    APP_updateSensorData();
 80016ba:	f7ff ffd9 	bl	8001670 <APP_updateSensorData>
    APP_updateLCD();
 80016be:	f7ff ffcf 	bl	8001660 <APP_updateLCD>
    APP_prepareAndDisplaySensorData();
 80016c2:	f7ff ffdb 	bl	800167c <APP_prepareAndDisplaySensorData>
    APP_prepareAndSendUARTData();
 80016c6:	f7ff ffe1 	bl	800168c <APP_prepareAndSendUARTData>
    FSM_update();
 80016ca:	f7ff ffa5 	bl	8001618 <FSM_update>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <ExecuteLCDCommand>:
 * @brief Executes a command on the LCD.
 * @param command: The command to be sent.
 * @retval None.
 */
static void ExecuteLCDCommand(uint8_t command)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
	WriteDataToLCD(command, LCD_CMD_CONTROL_MODE);
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f82e 	bl	8001742 <WriteDataToLCD>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <SendNibbleToLCD>:
 * @param data: The data to send.
 * @param mode: The mode (command/data).
 * @retval None.
 */
static void SendNibbleToLCD(uint8_t data, bool mode)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	460a      	mov	r2, r1
 80016f8:	71fb      	strb	r3, [r7, #7]
 80016fa:	4613      	mov	r3, r2
 80016fc:	71bb      	strb	r3, [r7, #6]
	LCD_HAL_I2C_Write(data | mode | LCD_ENABLE_PIN | LCD_BACKLIGHT);
 80016fe:	79ba      	ldrb	r2, [r7, #6]
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	4313      	orrs	r3, r2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	b25b      	sxtb	r3, r3
 8001708:	f043 030c 	orr.w	r3, r3, #12
 800170c:	b25b      	sxtb	r3, r3
 800170e:	b2db      	uxtb	r3, r3
 8001710:	4618      	mov	r0, r3
 8001712:	f000 f90f 	bl	8001934 <LCD_HAL_I2C_Write>
	LCD_HAL_Delay(1 * MILLISECOND);
 8001716:	2001      	movs	r0, #1
 8001718:	f000 f920 	bl	800195c <LCD_HAL_Delay>
	LCD_HAL_I2C_Write(data | mode | LCD_BACKLIGHT);
 800171c:	79ba      	ldrb	r2, [r7, #6]
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	4313      	orrs	r3, r2
 8001722:	b2db      	uxtb	r3, r3
 8001724:	b25b      	sxtb	r3, r3
 8001726:	f043 0308 	orr.w	r3, r3, #8
 800172a:	b25b      	sxtb	r3, r3
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4618      	mov	r0, r3
 8001730:	f000 f900 	bl	8001934 <LCD_HAL_I2C_Write>
	LCD_HAL_Delay(1 * MILLISECOND);
 8001734:	2001      	movs	r0, #1
 8001736:	f000 f911 	bl	800195c <LCD_HAL_Delay>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <WriteDataToLCD>:
 * @param data: The data to send.
 * @param mode: The mode (command/data).
 * @retval None.
 */
static void WriteDataToLCD(uint8_t data, bool mode)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	460a      	mov	r2, r1
 800174c:	71fb      	strb	r3, [r7, #7]
 800174e:	4613      	mov	r3, r2
 8001750:	71bb      	strb	r3, [r7, #6]
	SendNibbleToLCD(data & LCD_HIGH_NIBBLE_MASK, mode);
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	f023 030f 	bic.w	r3, r3, #15
 8001758:	b2db      	uxtb	r3, r3
 800175a:	79ba      	ldrb	r2, [r7, #6]
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ffc5 	bl	80016ee <SendNibbleToLCD>
	SendNibbleToLCD(data << LCD_LOW_NIBBLE_SHIFT, mode);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	011b      	lsls	r3, r3, #4
 8001768:	b2db      	uxtb	r3, r3
 800176a:	79ba      	ldrb	r2, [r7, #6]
 800176c:	4611      	mov	r1, r2
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ffbd 	bl	80016ee <SendNibbleToLCD>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <SendAsciiCharToLCD>:
 * @brief Sends an ASCII character to the LCD.
 * @param asciiChar: The character to send.
 * @retval None.
 */
static void SendAsciiCharToLCD(uint8_t asciiChar)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	WriteDataToLCD(asciiChar + '0', LCD_CMD_DATA_MODE);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3330      	adds	r3, #48	@ 0x30
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2101      	movs	r1, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ffd7 	bl	8001742 <WriteDataToLCD>
}
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <API_LCD_Initialize>:
/**
 * @brief Initializes the LCD with the predefined commands.
 * @retval _Bool: Returns 0 on success.
 */
_Bool API_LCD_Initialize(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
	LCD_HAL_Delay(MILLISECOND * 20);
 80017a2:	2014      	movs	r0, #20
 80017a4:	f000 f8da 	bl	800195c <LCD_HAL_Delay>

	SendNibbleToLCD(LCD_INIT_CMD_1, LCD_CMD_CONTROL_MODE);
 80017a8:	2100      	movs	r1, #0
 80017aa:	2030      	movs	r0, #48	@ 0x30
 80017ac:	f7ff ff9f 	bl	80016ee <SendNibbleToLCD>
	LCD_HAL_Delay(MILLISECOND * 10);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 f8d3 	bl	800195c <LCD_HAL_Delay>

	SendNibbleToLCD(LCD_INIT_CMD_1, LCD_CMD_CONTROL_MODE);
 80017b6:	2100      	movs	r1, #0
 80017b8:	2030      	movs	r0, #48	@ 0x30
 80017ba:	f7ff ff98 	bl	80016ee <SendNibbleToLCD>
	LCD_HAL_Delay(MILLISECOND);
 80017be:	2001      	movs	r0, #1
 80017c0:	f000 f8cc 	bl	800195c <LCD_HAL_Delay>

	SendNibbleToLCD(LCD_INIT_CMD_1, LCD_CMD_CONTROL_MODE);
 80017c4:	2100      	movs	r1, #0
 80017c6:	2030      	movs	r0, #48	@ 0x30
 80017c8:	f7ff ff91 	bl	80016ee <SendNibbleToLCD>
	SendNibbleToLCD(LCD_INIT_CMD_2, LCD_CMD_CONTROL_MODE);
 80017cc:	2100      	movs	r1, #0
 80017ce:	2020      	movs	r0, #32
 80017d0:	f7ff ff8d 	bl	80016ee <SendNibbleToLCD>

	for (uint8_t i = 0; i < sizeof(LCD_INIT_COMMANDS); i++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	e008      	b.n	80017ec <API_LCD_Initialize+0x50>
	{
		ExecuteLCDCommand(LCD_INIT_COMMANDS[i]);
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4a10      	ldr	r2, [pc, #64]	@ (8001820 <API_LCD_Initialize+0x84>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff ff76 	bl	80016d2 <ExecuteLCDCommand>
	for (uint8_t i = 0; i < sizeof(LCD_INIT_COMMANDS); i++)
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	3301      	adds	r3, #1
 80017ea:	71fb      	strb	r3, [r7, #7]
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d9f3      	bls.n	80017da <API_LCD_Initialize+0x3e>
	}

	LCD_HAL_Delay(MILLISECOND);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f000 f8b2 	bl	800195c <LCD_HAL_Delay>

	for (int i = 0; i < 4; i++)
 80017f8:	2300      	movs	r3, #0
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	e008      	b.n	8001810 <API_LCD_Initialize+0x74>
	{
		LCD_HAL_Blink(LED1);
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f8b7 	bl	8001972 <LCD_HAL_Blink>
		LCD_HAL_Delay(MILLISECOND);
 8001804:	2001      	movs	r0, #1
 8001806:	f000 f8a9 	bl	800195c <LCD_HAL_Delay>
	for (int i = 0; i < 4; i++)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b03      	cmp	r3, #3
 8001814:	ddf3      	ble.n	80017fe <API_LCD_Initialize+0x62>
	}

	return 0;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	080054b4 	.word	0x080054b4

08001824 <API_LCD_SendData>:
 * @brief Sends data to the LCD.
 * @param data: The data to send.
 * @retval None.
 */
void API_LCD_SendData(uint8_t data)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
	WriteDataToLCD(data, LCD_CMD_DATA_MODE);
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	2101      	movs	r1, #1
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ff85 	bl	8001742 <WriteDataToLCD>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <API_LCD_SendBCDData>:
 * @brief Sends a BCD-encoded byte to the LCD.
 * @param data: The BCD data to send.
 * @retval None.
 */
void API_LCD_SendBCDData(uint8_t data)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	71fb      	strb	r3, [r7, #7]
	SendAsciiCharToLCD((data & 0xF0) >> 4);
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff93 	bl	800177c <SendAsciiCharToLCD>
	SendAsciiCharToLCD(data & 0x0F);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	b2db      	uxtb	r3, r3
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff8c 	bl	800177c <SendAsciiCharToLCD>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <API_LCD_DisplayString>:
 * @brief Displays a string on the LCD.
 * @param text: Pointer to the string to be displayed.
 * @retval None.
 */
void API_LCD_DisplayString(uint8_t *text)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	while (*text)
 8001874:	e006      	b.n	8001884 <API_LCD_DisplayString+0x18>
	{
		API_LCD_SendData(*text++);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ffd0 	bl	8001824 <API_LCD_SendData>
	while (*text)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f4      	bne.n	8001876 <API_LCD_DisplayString+0xa>
	}
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <API_LCD_SetCursorLine>:
 * based on its line input.
 * @param position: The position to set the cursor to.
 * @retval None.
 */
void API_LCD_SetCursorLine(uint8_t position, uint8_t lcd_line)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	460a      	mov	r2, r1
 80018a0:	71fb      	strb	r3, [r7, #7]
 80018a2:	4613      	mov	r3, r2
 80018a4:	71bb      	strb	r3, [r7, #6]
	if (lcd_line == 1)
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <API_LCD_SetCursorLine+0x24>
	{
		ExecuteLCDCommand(position | LCD_LINE_1);
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff0c 	bl	80016d2 <ExecuteLCDCommand>
	}
	if (lcd_line == 2)
 80018ba:	79bb      	ldrb	r3, [r7, #6]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d106      	bne.n	80018ce <API_LCD_SetCursorLine+0x38>
	{
		ExecuteLCDCommand(position | LCD_LINE_2);
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff02 	bl	80016d2 <ExecuteLCDCommand>
	}
}
 80018ce:	bf00      	nop
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <API_LCD_DisplayTwoMsgs>:
 * This approach avoids the use for dynamic memory allocation functions for concatenating strings,
 * such as malloc, which would provide more flexibility but introduces potential risks in embedded systems.
 * The downside of this approach is that it is limited to handling a maximum of two input strings
 * per LCD line.*/
void API_LCD_DisplayTwoMsgs(uint8_t init_pos, uint8_t lcd_line, uint8_t *message1, uint8_t *message2)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60ba      	str	r2, [r7, #8]
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	4603      	mov	r3, r0
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	460b      	mov	r3, r1
 80018e6:	73bb      	strb	r3, [r7, #14]
	API_LCD_SetCursorLine(init_pos, lcd_line);
 80018e8:	7bba      	ldrb	r2, [r7, #14]
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff ffd1 	bl	8001896 <API_LCD_SetCursorLine>
	API_LCD_DisplayString(message1);
 80018f4:	68b8      	ldr	r0, [r7, #8]
 80018f6:	f7ff ffb9 	bl	800186c <API_LCD_DisplayString>
	API_LCD_DisplayString(message2);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffb6 	bl	800186c <API_LCD_DisplayString>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <API_LCD_DisplayMsg>:

void API_LCD_DisplayMsg(uint8_t init_pos, uint8_t lcd_line, uint8_t *message)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	603a      	str	r2, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	460b      	mov	r3, r1
 8001916:	71bb      	strb	r3, [r7, #6]
	API_LCD_SetCursorLine(init_pos, lcd_line);
 8001918:	79ba      	ldrb	r2, [r7, #6]
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4611      	mov	r1, r2
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ffb9 	bl	8001896 <API_LCD_SetCursorLine>
	API_LCD_DisplayString(message);
 8001924:	6838      	ldr	r0, [r7, #0]
 8001926:	f7ff ffa1 	bl	800186c <API_LCD_DisplayString>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <LCD_HAL_I2C_Write>:
#include "API_lcd_port.h"

/* Public functions ----------------------------------------------------------*/

void LCD_HAL_I2C_Write(uint8_t valor)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af02      	add	r7, sp, #8
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Master_Transmit(&hi2c1, LCD_I2C_ADDRESS << LCD_WRITE_CMD, &valor, sizeof(valor), HAL_MAX_DELAY);
 800193e:	1dfa      	adds	r2, r7, #7
 8001940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	2301      	movs	r3, #1
 8001948:	214e      	movs	r1, #78	@ 0x4e
 800194a:	4803      	ldr	r0, [pc, #12]	@ (8001958 <LCD_HAL_I2C_Write+0x24>)
 800194c:	f000 fd84 	bl	8002458 <HAL_I2C_Master_Transmit>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000034 	.word	0x20000034

0800195c <LCD_HAL_Delay>:
 *  @brief  Provides a delay for a specified number of milliseconds.
 * @param  delay: The amount of time, in milliseconds, to delay.
 * @retval None
 */
void LCD_HAL_Delay(uint32_t delay)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_Delay(delay);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f949 	bl	8001bfc <HAL_Delay>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <LCD_HAL_Blink>:
 * @brief  Toggles the state of the specified LED.
 * @param  Led: Specifies the LED to be toggled. This parameter can be one of the LED identifiers defined in the board support package (BSP), such as `LED2`, `LED3`, etc.
 * @retval None
 */
void LCD_HAL_Blink(Led_TypeDef Led)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  BSP_LED_Toggle(Led);
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f8b0 	bl	8001ae4 <BSP_LED_Toggle>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <uartInit>:
  * @param  None.
  * @retval bool_t: returns true if initialization is successful, otherwise false.
  */

bool_t uartInit(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  UartHandle.Instance        = USARTx;
 8001990:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <uartInit+0x54>)
 8001992:	4a14      	ldr	r2, [pc, #80]	@ (80019e4 <uartInit+0x58>)
 8001994:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate   = 9600;
 8001996:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <uartInit+0x54>)
 8001998:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800199c:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <uartInit+0x54>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80019a4:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <uartInit+0x54>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity     = UART_PARITY_ODD;
 80019aa:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <uartInit+0x54>)
 80019ac:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80019b0:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <uartInit+0x54>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <uartInit+0x54>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80019be:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <uartInit+0x54>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]

  if (HAL_UART_Init(&UartHandle) != HAL_OK)
 80019c4:	4806      	ldr	r0, [pc, #24]	@ (80019e0 <uartInit+0x54>)
 80019c6:	f003 f855 	bl	8004a74 <HAL_UART_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <uartInit+0x48>
  {
    /* Initialization Error */
   return false;
 80019d0:	2300      	movs	r3, #0
 80019d2:	e003      	b.n	80019dc <uartInit+0x50>
  }

  uartSendString((uint8_t*)"UART init OK -> baud rate configured = 9600 | stopbits = 1 | parity = odd.\r\n");
 80019d4:	4804      	ldr	r0, [pc, #16]	@ (80019e8 <uartInit+0x5c>)
 80019d6:	f000 f809 	bl	80019ec <uartSendString>

  return true;
 80019da:	2301      	movs	r3, #1
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000194 	.word	0x20000194
 80019e4:	40004800 	.word	0x40004800
 80019e8:	0800544c 	.word	0x0800544c

080019ec <uartSendString>:
  * @brief  Send a null-terminated string via UART.
  * @param  uint8_t * pstring: pointer to the null-terminated string.
  * @retval None.
  */
void uartSendString(uint8_t * pstring)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  if(NULL != pstring && MAXbUFFER > strlen((char*)pstring))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d016      	beq.n	8001a28 <uartSendString+0x3c>
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7fe fbf6 	bl	80001ec <strlen>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2bff      	cmp	r3, #255	@ 0xff
 8001a04:	d810      	bhi.n	8001a28 <uartSendString+0x3c>
  {
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe fbf0 	bl	80001ec <strlen>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	4808      	ldr	r0, [pc, #32]	@ (8001a38 <uartSendString+0x4c>)
 8001a18:	f003 f87c 	bl	8004b14 <HAL_UART_Transmit>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <uartSendString+0x42>
      Error_Handler();
 8001a22:	f000 f80b 	bl	8001a3c <Error_Handler>
    if(HAL_OK != HAL_UART_Transmit(&UartHandle, pstring, strlen((char*)pstring), TxTIMEOUT))
 8001a26:	e002      	b.n	8001a2e <uartSendString+0x42>
  }
  else
    Error_Handler();
 8001a28:	f000 f808 	bl	8001a3c <Error_Handler>
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000194 	.word	0x20000194

08001a3c <Error_Handler>:
  * @brief  Handles errors by entering an infinite loop.
  * @param  None.
  * @retval None.
  */
static void Error_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x4>

08001a44 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10e      	bne.n	8001a72 <BSP_LED_Init+0x2e>
 8001a54:	2300      	movs	r3, #0
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad8 <BSP_LED_Init+0x94>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ad8 <BSP_LED_Init+0x94>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a64:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad8 <BSP_LED_Init+0x94>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	e00d      	b.n	8001a8e <BSP_LED_Init+0x4a>
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b18      	ldr	r3, [pc, #96]	@ (8001ad8 <BSP_LED_Init+0x94>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a17      	ldr	r2, [pc, #92]	@ (8001ad8 <BSP_LED_Init+0x94>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b15      	ldr	r3, [pc, #84]	@ (8001ad8 <BSP_LED_Init+0x94>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4a12      	ldr	r2, [pc, #72]	@ (8001adc <BSP_LED_Init+0x98>)
 8001a92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae0 <BSP_LED_Init+0x9c>)
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	f107 0214 	add.w	r2, r7, #20
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 f9ac 	bl	8001e10 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <BSP_LED_Init+0x9c>)
 8001abc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	4a06      	ldr	r2, [pc, #24]	@ (8001adc <BSP_LED_Init+0x98>)
 8001ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4619      	mov	r1, r3
 8001acc:	f000 fb4c 	bl	8002168 <HAL_GPIO_WritePin>
}
 8001ad0:	bf00      	nop
 8001ad2:	3728      	adds	r7, #40	@ 0x28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	080054bc 	.word	0x080054bc
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4a07      	ldr	r2, [pc, #28]	@ (8001b10 <BSP_LED_Toggle+0x2c>)
 8001af2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	4906      	ldr	r1, [pc, #24]	@ (8001b14 <BSP_LED_Toggle+0x30>)
 8001afa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001afe:	4619      	mov	r1, r3
 8001b00:	4610      	mov	r0, r2
 8001b02:	f000 fb4a 	bl	800219a <HAL_GPIO_TogglePin>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000004 	.word	0x20000004
 8001b14:	080054bc 	.word	0x080054bc

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	@ (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 f931 	bl	8001da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7fe fede 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	@ (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 f93b 	bl	8001df6 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b98:	f000 f911 	bl	8001dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	@ (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000014 	.word	0x20000014
 8001bb8:	20000010 	.word	0x20000010

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	@ (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	@ (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000014 	.word	0x20000014
 8001be0:	200001dc 	.word	0x200001dc

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	@ (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200001dc 	.word	0x200001dc

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	@ (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000014 	.word	0x20000014

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	@ (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	@ (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	db0a      	blt.n	8001cd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	490c      	ldr	r1, [pc, #48]	@ (8001cf4 <__NVIC_SetPriority+0x4c>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	440b      	add	r3, r1
 8001ccc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd0:	e00a      	b.n	8001ce8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4908      	ldr	r1, [pc, #32]	@ (8001cf8 <__NVIC_SetPriority+0x50>)
 8001cd8:	79fb      	ldrb	r3, [r7, #7]
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	3b04      	subs	r3, #4
 8001ce0:	0112      	lsls	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	761a      	strb	r2, [r3, #24]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	e000e100 	.word	0xe000e100
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b089      	sub	sp, #36	@ 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f1c3 0307 	rsb	r3, r3, #7
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	bf28      	it	cs
 8001d1a:	2304      	movcs	r3, #4
 8001d1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d902      	bls.n	8001d2c <NVIC_EncodePriority+0x30>
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3b03      	subs	r3, #3
 8001d2a:	e000      	b.n	8001d2e <NVIC_EncodePriority+0x32>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43da      	mvns	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4e:	43d9      	mvns	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	4313      	orrs	r3, r2
         );
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3724      	adds	r7, #36	@ 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d74:	d301      	bcc.n	8001d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d76:	2301      	movs	r3, #1
 8001d78:	e00f      	b.n	8001d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001da4 <SysTick_Config+0x40>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d82:	210f      	movs	r1, #15
 8001d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d88:	f7ff ff8e 	bl	8001ca8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d8c:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <SysTick_Config+0x40>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d92:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <SysTick_Config+0x40>)
 8001d94:	2207      	movs	r2, #7
 8001d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	e000e010 	.word	0xe000e010

08001da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff47 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001db6:	bf00      	nop
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd0:	f7ff ff5c 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	6978      	ldr	r0, [r7, #20]
 8001ddc:	f7ff ff8e 	bl	8001cfc <NVIC_EncodePriority>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de6:	4611      	mov	r1, r2
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff ff5d 	bl	8001ca8 <__NVIC_SetPriority>
}
 8001dee:	bf00      	nop
 8001df0:	3718      	adds	r7, #24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f7ff ffb0 	bl	8001d64 <SysTick_Config>
 8001e04:	4603      	mov	r3, r0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	e177      	b.n	800211c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 8166 	bne.w	8002116 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d005      	beq.n	8001e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d130      	bne.n	8001ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	091b      	lsrs	r3, r3, #4
 8001eae:	f003 0201 	and.w	r2, r3, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d017      	beq.n	8001f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d123      	bne.n	8001f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	08da      	lsrs	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3208      	adds	r2, #8
 8001f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	08da      	lsrs	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3208      	adds	r2, #8
 8001f4e:	69b9      	ldr	r1, [r7, #24]
 8001f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0203 	and.w	r2, r3, #3
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80c0 	beq.w	8002116 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b66      	ldr	r3, [pc, #408]	@ (8002134 <HAL_GPIO_Init+0x324>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a65      	ldr	r2, [pc, #404]	@ (8002134 <HAL_GPIO_Init+0x324>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b63      	ldr	r3, [pc, #396]	@ (8002134 <HAL_GPIO_Init+0x324>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fb2:	4a61      	ldr	r2, [pc, #388]	@ (8002138 <HAL_GPIO_Init+0x328>)
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	089b      	lsrs	r3, r3, #2
 8001fb8:	3302      	adds	r3, #2
 8001fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	220f      	movs	r2, #15
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43db      	mvns	r3, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a58      	ldr	r2, [pc, #352]	@ (800213c <HAL_GPIO_Init+0x32c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d037      	beq.n	800204e <HAL_GPIO_Init+0x23e>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a57      	ldr	r2, [pc, #348]	@ (8002140 <HAL_GPIO_Init+0x330>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d031      	beq.n	800204a <HAL_GPIO_Init+0x23a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a56      	ldr	r2, [pc, #344]	@ (8002144 <HAL_GPIO_Init+0x334>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d02b      	beq.n	8002046 <HAL_GPIO_Init+0x236>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a55      	ldr	r2, [pc, #340]	@ (8002148 <HAL_GPIO_Init+0x338>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d025      	beq.n	8002042 <HAL_GPIO_Init+0x232>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a54      	ldr	r2, [pc, #336]	@ (800214c <HAL_GPIO_Init+0x33c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d01f      	beq.n	800203e <HAL_GPIO_Init+0x22e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a53      	ldr	r2, [pc, #332]	@ (8002150 <HAL_GPIO_Init+0x340>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d019      	beq.n	800203a <HAL_GPIO_Init+0x22a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a52      	ldr	r2, [pc, #328]	@ (8002154 <HAL_GPIO_Init+0x344>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d013      	beq.n	8002036 <HAL_GPIO_Init+0x226>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a51      	ldr	r2, [pc, #324]	@ (8002158 <HAL_GPIO_Init+0x348>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00d      	beq.n	8002032 <HAL_GPIO_Init+0x222>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a50      	ldr	r2, [pc, #320]	@ (800215c <HAL_GPIO_Init+0x34c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <HAL_GPIO_Init+0x21e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4f      	ldr	r2, [pc, #316]	@ (8002160 <HAL_GPIO_Init+0x350>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d101      	bne.n	800202a <HAL_GPIO_Init+0x21a>
 8002026:	2309      	movs	r3, #9
 8002028:	e012      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800202a:	230a      	movs	r3, #10
 800202c:	e010      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800202e:	2308      	movs	r3, #8
 8002030:	e00e      	b.n	8002050 <HAL_GPIO_Init+0x240>
 8002032:	2307      	movs	r3, #7
 8002034:	e00c      	b.n	8002050 <HAL_GPIO_Init+0x240>
 8002036:	2306      	movs	r3, #6
 8002038:	e00a      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800203a:	2305      	movs	r3, #5
 800203c:	e008      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800203e:	2304      	movs	r3, #4
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x240>
 8002042:	2303      	movs	r3, #3
 8002044:	e004      	b.n	8002050 <HAL_GPIO_Init+0x240>
 8002046:	2302      	movs	r3, #2
 8002048:	e002      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_GPIO_Init+0x240>
 800204e:	2300      	movs	r3, #0
 8002050:	69fa      	ldr	r2, [r7, #28]
 8002052:	f002 0203 	and.w	r2, r2, #3
 8002056:	0092      	lsls	r2, r2, #2
 8002058:	4093      	lsls	r3, r2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002060:	4935      	ldr	r1, [pc, #212]	@ (8002138 <HAL_GPIO_Init+0x328>)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800206e:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <HAL_GPIO_Init+0x354>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002092:	4a34      	ldr	r2, [pc, #208]	@ (8002164 <HAL_GPIO_Init+0x354>)
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002098:	4b32      	ldr	r3, [pc, #200]	@ (8002164 <HAL_GPIO_Init+0x354>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020bc:	4a29      	ldr	r2, [pc, #164]	@ (8002164 <HAL_GPIO_Init+0x354>)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c2:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <HAL_GPIO_Init+0x354>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002164 <HAL_GPIO_Init+0x354>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002164 <HAL_GPIO_Init+0x354>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002110:	4a14      	ldr	r2, [pc, #80]	@ (8002164 <HAL_GPIO_Init+0x354>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3301      	adds	r3, #1
 800211a:	61fb      	str	r3, [r7, #28]
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2b0f      	cmp	r3, #15
 8002120:	f67f ae84 	bls.w	8001e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	40020000 	.word	0x40020000
 8002140:	40020400 	.word	0x40020400
 8002144:	40020800 	.word	0x40020800
 8002148:	40020c00 	.word	0x40020c00
 800214c:	40021000 	.word	0x40021000
 8002150:	40021400 	.word	0x40021400
 8002154:	40021800 	.word	0x40021800
 8002158:	40021c00 	.word	0x40021c00
 800215c:	40022000 	.word	0x40022000
 8002160:	40022400 	.word	0x40022400
 8002164:	40013c00 	.word	0x40013c00

08002168 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	460b      	mov	r3, r1
 8002172:	807b      	strh	r3, [r7, #2]
 8002174:	4613      	mov	r3, r2
 8002176:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002178:	787b      	ldrb	r3, [r7, #1]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217e:	887a      	ldrh	r2, [r7, #2]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002184:	e003      	b.n	800218e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002186:	887b      	ldrh	r3, [r7, #2]
 8002188:	041a      	lsls	r2, r3, #16
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	619a      	str	r2, [r3, #24]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	460b      	mov	r3, r1
 80021a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4013      	ands	r3, r2
 80021b2:	041a      	lsls	r2, r3, #16
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	400b      	ands	r3, r1
 80021bc:	431a      	orrs	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
	...

080021d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e12b      	b.n	800243a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fbb0 	bl	800095c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2224      	movs	r2, #36	@ 0x24
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0201 	bic.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002222:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002232:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002234:	f001 f954 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8002238:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a81      	ldr	r2, [pc, #516]	@ (8002444 <HAL_I2C_Init+0x274>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d807      	bhi.n	8002254 <HAL_I2C_Init+0x84>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4a80      	ldr	r2, [pc, #512]	@ (8002448 <HAL_I2C_Init+0x278>)
 8002248:	4293      	cmp	r3, r2
 800224a:	bf94      	ite	ls
 800224c:	2301      	movls	r3, #1
 800224e:	2300      	movhi	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	e006      	b.n	8002262 <HAL_I2C_Init+0x92>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a7d      	ldr	r2, [pc, #500]	@ (800244c <HAL_I2C_Init+0x27c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e0e7      	b.n	800243a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4a78      	ldr	r2, [pc, #480]	@ (8002450 <HAL_I2C_Init+0x280>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0c9b      	lsrs	r3, r3, #18
 8002274:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68ba      	ldr	r2, [r7, #8]
 8002286:	430a      	orrs	r2, r1
 8002288:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4a6a      	ldr	r2, [pc, #424]	@ (8002444 <HAL_I2C_Init+0x274>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d802      	bhi.n	80022a4 <HAL_I2C_Init+0xd4>
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3301      	adds	r3, #1
 80022a2:	e009      	b.n	80022b8 <HAL_I2C_Init+0xe8>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	4a69      	ldr	r2, [pc, #420]	@ (8002454 <HAL_I2C_Init+0x284>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	099b      	lsrs	r3, r3, #6
 80022b6:	3301      	adds	r3, #1
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	69db      	ldr	r3, [r3, #28]
 80022c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80022ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	495c      	ldr	r1, [pc, #368]	@ (8002444 <HAL_I2C_Init+0x274>)
 80022d4:	428b      	cmp	r3, r1
 80022d6:	d819      	bhi.n	800230c <HAL_I2C_Init+0x13c>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e59      	subs	r1, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e6:	1c59      	adds	r1, r3, #1
 80022e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022ec:	400b      	ands	r3, r1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_I2C_Init+0x138>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1e59      	subs	r1, r3, #1
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002300:	3301      	adds	r3, #1
 8002302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002306:	e051      	b.n	80023ac <HAL_I2C_Init+0x1dc>
 8002308:	2304      	movs	r3, #4
 800230a:	e04f      	b.n	80023ac <HAL_I2C_Init+0x1dc>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d111      	bne.n	8002338 <HAL_I2C_Init+0x168>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1e58      	subs	r0, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	440b      	add	r3, r1
 8002322:	fbb0 f3f3 	udiv	r3, r0, r3
 8002326:	3301      	adds	r3, #1
 8002328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800232c:	2b00      	cmp	r3, #0
 800232e:	bf0c      	ite	eq
 8002330:	2301      	moveq	r3, #1
 8002332:	2300      	movne	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	e012      	b.n	800235e <HAL_I2C_Init+0x18e>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1e58      	subs	r0, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	0099      	lsls	r1, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	fbb0 f3f3 	udiv	r3, r0, r3
 800234e:	3301      	adds	r3, #1
 8002350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002354:	2b00      	cmp	r3, #0
 8002356:	bf0c      	ite	eq
 8002358:	2301      	moveq	r3, #1
 800235a:	2300      	movne	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d001      	beq.n	8002366 <HAL_I2C_Init+0x196>
 8002362:	2301      	movs	r3, #1
 8002364:	e022      	b.n	80023ac <HAL_I2C_Init+0x1dc>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10e      	bne.n	800238c <HAL_I2C_Init+0x1bc>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1e58      	subs	r0, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6859      	ldr	r1, [r3, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	440b      	add	r3, r1
 800237c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002380:	3301      	adds	r3, #1
 8002382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800238a:	e00f      	b.n	80023ac <HAL_I2C_Init+0x1dc>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1e58      	subs	r0, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6859      	ldr	r1, [r3, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	0099      	lsls	r1, r3, #2
 800239c:	440b      	add	r3, r1
 800239e:	fbb0 f3f3 	udiv	r3, r0, r3
 80023a2:	3301      	adds	r3, #1
 80023a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	6809      	ldr	r1, [r1, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80023da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6911      	ldr	r1, [r2, #16]
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	4311      	orrs	r1, r2
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695a      	ldr	r2, [r3, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2220      	movs	r2, #32
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	000186a0 	.word	0x000186a0
 8002448:	001e847f 	.word	0x001e847f
 800244c:	003d08ff 	.word	0x003d08ff
 8002450:	431bde83 	.word	0x431bde83
 8002454:	10624dd3 	.word	0x10624dd3

08002458 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	461a      	mov	r2, r3
 8002464:	460b      	mov	r3, r1
 8002466:	817b      	strh	r3, [r7, #10]
 8002468:	4613      	mov	r3, r2
 800246a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800246c:	f7ff fbba 	bl	8001be4 <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b20      	cmp	r3, #32
 800247c:	f040 80e0 	bne.w	8002640 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2319      	movs	r3, #25
 8002486:	2201      	movs	r2, #1
 8002488:	4970      	ldr	r1, [pc, #448]	@ (800264c <HAL_I2C_Master_Transmit+0x1f4>)
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 f964 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
 8002498:	e0d3      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_I2C_Master_Transmit+0x50>
 80024a4:	2302      	movs	r3, #2
 80024a6:	e0cc      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d007      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0201 	orr.w	r2, r2, #1
 80024cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	@ 0x21
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2210      	movs	r2, #16
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	893a      	ldrh	r2, [r7, #8]
 80024fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a50      	ldr	r2, [pc, #320]	@ (8002650 <HAL_I2C_Master_Transmit+0x1f8>)
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002510:	8979      	ldrh	r1, [r7, #10]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	6a3a      	ldr	r2, [r7, #32]
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f89c 	bl	8002654 <I2C_MasterRequestWrite>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e08d      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800253c:	e066      	b.n	800260c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	6a39      	ldr	r1, [r7, #32]
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fa22 	bl	800298c <I2C_WaitOnTXEFlagUntilTimeout>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00d      	beq.n	800256a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002552:	2b04      	cmp	r3, #4
 8002554:	d107      	bne.n	8002566 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e06b      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	781a      	ldrb	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d11b      	bne.n	80025e0 <HAL_I2C_Master_Transmit+0x188>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d017      	beq.n	80025e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e0:	697a      	ldr	r2, [r7, #20]
 80025e2:	6a39      	ldr	r1, [r7, #32]
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fa19 	bl	8002a1c <I2C_WaitOnBTFFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00d      	beq.n	800260c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d107      	bne.n	8002608 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002606:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e01a      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002610:	2b00      	cmp	r3, #0
 8002612:	d194      	bne.n	800253e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	e000      	b.n	8002642 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	00100002 	.word	0x00100002
 8002650:	ffff0000 	.word	0xffff0000

08002654 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af02      	add	r7, sp, #8
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
 8002660:	460b      	mov	r3, r1
 8002662:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b08      	cmp	r3, #8
 800266e:	d006      	beq.n	800267e <I2C_MasterRequestWrite+0x2a>
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d003      	beq.n	800267e <I2C_MasterRequestWrite+0x2a>
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800267c:	d108      	bne.n	8002690 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e00b      	b.n	80026a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002694:	2b12      	cmp	r3, #18
 8002696:	d107      	bne.n	80026a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f84f 	bl	8002758 <I2C_WaitOnFlagUntilTimeout>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00d      	beq.n	80026dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026ce:	d103      	bne.n	80026d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e035      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026e4:	d108      	bne.n	80026f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026f4:	611a      	str	r2, [r3, #16]
 80026f6:	e01b      	b.n	8002730 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026f8:	897b      	ldrh	r3, [r7, #10]
 80026fa:	11db      	asrs	r3, r3, #7
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 0306 	and.w	r3, r3, #6
 8002702:	b2db      	uxtb	r3, r3
 8002704:	f063 030f 	orn	r3, r3, #15
 8002708:	b2da      	uxtb	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	490e      	ldr	r1, [pc, #56]	@ (8002750 <I2C_MasterRequestWrite+0xfc>)
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f898 	bl	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d001      	beq.n	8002726 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e010      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002726:	897b      	ldrh	r3, [r7, #10]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	4907      	ldr	r1, [pc, #28]	@ (8002754 <I2C_MasterRequestWrite+0x100>)
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f888 	bl	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3718      	adds	r7, #24
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	00010008 	.word	0x00010008
 8002754:	00010002 	.word	0x00010002

08002758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	603b      	str	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002768:	e048      	b.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002770:	d044      	beq.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002772:	f7ff fa37 	bl	8001be4 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	429a      	cmp	r2, r3
 8002780:	d302      	bcc.n	8002788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d139      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b01      	cmp	r3, #1
 8002790:	d10d      	bne.n	80027ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	43da      	mvns	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	4013      	ands	r3, r2
 800279e:	b29b      	uxth	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	461a      	mov	r2, r3
 80027ac:	e00c      	b.n	80027c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	43da      	mvns	r2, r3
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	4013      	ands	r3, r2
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	461a      	mov	r2, r3
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d116      	bne.n	80027fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	f043 0220 	orr.w	r2, r3, #32
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e023      	b.n	8002844 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	0c1b      	lsrs	r3, r3, #16
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d10d      	bne.n	8002822 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	43da      	mvns	r2, r3
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	4013      	ands	r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	bf0c      	ite	eq
 8002818:	2301      	moveq	r3, #1
 800281a:	2300      	movne	r3, #0
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	e00c      	b.n	800283c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	43da      	mvns	r2, r3
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4013      	ands	r3, r2
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf0c      	ite	eq
 8002834:	2301      	moveq	r3, #1
 8002836:	2300      	movne	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	429a      	cmp	r2, r3
 8002840:	d093      	beq.n	800276a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285a:	e071      	b.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286a:	d123      	bne.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0204 	orr.w	r2, r3, #4
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e067      	b.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028ba:	d041      	beq.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028bc:	f7ff f992 	bl	8001be4 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d302      	bcc.n	80028d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d136      	bne.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d10c      	bne.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	4013      	ands	r3, r2
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	bf14      	ite	ne
 80028ee:	2301      	movne	r3, #1
 80028f0:	2300      	moveq	r3, #0
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	e00b      	b.n	800290e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	43da      	mvns	r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	4013      	ands	r3, r2
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e021      	b.n	8002984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	b2db      	uxtb	r3, r3
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10c      	bne.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	43da      	mvns	r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	4013      	ands	r3, r2
 8002956:	b29b      	uxth	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	bf14      	ite	ne
 800295c:	2301      	movne	r3, #1
 800295e:	2300      	moveq	r3, #0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	e00b      	b.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4013      	ands	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	bf14      	ite	ne
 8002976:	2301      	movne	r3, #1
 8002978:	2300      	moveq	r3, #0
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	f47f af6d 	bne.w	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002998:	e034      	b.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f886 	bl	8002aac <I2C_IsAcknowledgeFailed>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e034      	b.n	8002a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029b0:	d028      	beq.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b2:	f7ff f917 	bl	8001be4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d302      	bcc.n	80029c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11d      	bne.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d2:	2b80      	cmp	r3, #128	@ 0x80
 80029d4:	d016      	beq.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e007      	b.n	8002a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0e:	2b80      	cmp	r3, #128	@ 0x80
 8002a10:	d1c3      	bne.n	800299a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a28:	e034      	b.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f83e 	bl	8002aac <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e034      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a40:	d028      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f8cf 	bl	8001be4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d11d      	bne.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d016      	beq.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e007      	b.n	8002aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d1c3      	bne.n	8002a2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac2:	d11b      	bne.n	8002afc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002acc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	f043 0204 	orr.w	r2, r3, #4
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d129      	bne.n	8002b74 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	@ 0x24
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0210 	bic.w	r2, r2, #16
 8002b46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b085      	sub	sp, #20
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
 8002b8a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d12a      	bne.n	8002bf2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	@ 0x24
 8002ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002bbc:	89fb      	ldrh	r3, [r7, #14]
 8002bbe:	f023 030f 	bic.w	r3, r3, #15
 8002bc2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	89fb      	ldrh	r3, [r7, #14]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	89fa      	ldrh	r2, [r7, #14]
 8002bd4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f042 0201 	orr.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e267      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d075      	beq.n	8002d0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c1e:	4b88      	ldr	r3, [pc, #544]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d00c      	beq.n	8002c44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2a:	4b85      	ldr	r3, [pc, #532]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d112      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c36:	4b82      	ldr	r3, [pc, #520]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c42:	d10b      	bne.n	8002c5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c44:	4b7e      	ldr	r3, [pc, #504]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d05b      	beq.n	8002d08 <HAL_RCC_OscConfig+0x108>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d157      	bne.n	8002d08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e242      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c64:	d106      	bne.n	8002c74 <HAL_RCC_OscConfig+0x74>
 8002c66:	4b76      	ldr	r3, [pc, #472]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a75      	ldr	r2, [pc, #468]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e01d      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x98>
 8002c7e:	4b70      	ldr	r3, [pc, #448]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a6f      	ldr	r2, [pc, #444]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb0>
 8002c98:	4b69      	ldr	r3, [pc, #420]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a68      	ldr	r2, [pc, #416]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002c9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	4b66      	ldr	r3, [pc, #408]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a65      	ldr	r2, [pc, #404]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d013      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb8:	f7fe ff94 	bl	8001be4 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fe ff90 	bl	8001be4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e207      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCC_OscConfig+0xc0>
 8002cde:	e014      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce0:	f7fe ff80 	bl	8001be4 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce8:	f7fe ff7c 	bl	8001be4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b64      	cmp	r3, #100	@ 0x64
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1f3      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	4b51      	ldr	r3, [pc, #324]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0xe8>
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d063      	beq.n	8002dde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d16:	4b4a      	ldr	r3, [pc, #296]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	4b47      	ldr	r3, [pc, #284]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d11c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d2e:	4b44      	ldr	r3, [pc, #272]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d116      	bne.n	8002d68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	4b41      	ldr	r3, [pc, #260]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_RCC_OscConfig+0x152>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e1c7      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d52:	4b3b      	ldr	r3, [pc, #236]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4937      	ldr	r1, [pc, #220]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	e03a      	b.n	8002dde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d020      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d70:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCC_OscConfig+0x244>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe ff35 	bl	8001be4 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7e:	f7fe ff31 	bl	8001be4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e1a8      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d90:	4b2b      	ldr	r3, [pc, #172]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9c:	4b28      	ldr	r3, [pc, #160]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	4925      	ldr	r1, [pc, #148]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	600b      	str	r3, [r1, #0]
 8002db0:	e015      	b.n	8002dde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002db2:	4b24      	ldr	r3, [pc, #144]	@ (8002e44 <HAL_RCC_OscConfig+0x244>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe ff14 	bl	8001be4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc0:	f7fe ff10 	bl	8001be4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e187      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0302 	and.w	r3, r3, #2
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d1f0      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d036      	beq.n	8002e58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d016      	beq.n	8002e20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b15      	ldr	r3, [pc, #84]	@ (8002e48 <HAL_RCC_OscConfig+0x248>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df8:	f7fe fef4 	bl	8001be4 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e00:	f7fe fef0 	bl	8001be4 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e167      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e12:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_RCC_OscConfig+0x240>)
 8002e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0x200>
 8002e1e:	e01b      	b.n	8002e58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e20:	4b09      	ldr	r3, [pc, #36]	@ (8002e48 <HAL_RCC_OscConfig+0x248>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e26:	f7fe fedd 	bl	8001be4 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2c:	e00e      	b.n	8002e4c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2e:	f7fe fed9 	bl	8001be4 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d907      	bls.n	8002e4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e150      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	42470000 	.word	0x42470000
 8002e48:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	4b88      	ldr	r3, [pc, #544]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1ea      	bne.n	8002e2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8097 	beq.w	8002f94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b81      	ldr	r3, [pc, #516]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10f      	bne.n	8002e96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	4b7d      	ldr	r3, [pc, #500]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	4a7c      	ldr	r2, [pc, #496]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e86:	4b7a      	ldr	r3, [pc, #488]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e92:	2301      	movs	r3, #1
 8002e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b77      	ldr	r3, [pc, #476]	@ (8003074 <HAL_RCC_OscConfig+0x474>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d118      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	4b74      	ldr	r3, [pc, #464]	@ (8003074 <HAL_RCC_OscConfig+0x474>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a73      	ldr	r2, [pc, #460]	@ (8003074 <HAL_RCC_OscConfig+0x474>)
 8002ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fe99 	bl	8001be4 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb6:	f7fe fe95 	bl	8001be4 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e10c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8003074 <HAL_RCC_OscConfig+0x474>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x2ea>
 8002edc:	4b64      	ldr	r3, [pc, #400]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	4a63      	ldr	r2, [pc, #396]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	f043 0301 	orr.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee8:	e01c      	b.n	8002f24 <HAL_RCC_OscConfig+0x324>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	2b05      	cmp	r3, #5
 8002ef0:	d10c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x30c>
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef6:	4a5e      	ldr	r2, [pc, #376]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002efe:	4b5c      	ldr	r3, [pc, #368]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f02:	4a5b      	ldr	r2, [pc, #364]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0x324>
 8002f0c:	4b58      	ldr	r3, [pc, #352]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f10:	4a57      	ldr	r2, [pc, #348]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f12:	f023 0301 	bic.w	r3, r3, #1
 8002f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f18:	4b55      	ldr	r3, [pc, #340]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1c:	4a54      	ldr	r2, [pc, #336]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f1e:	f023 0304 	bic.w	r3, r3, #4
 8002f22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fe5a 	bl	8001be4 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	e00a      	b.n	8002f4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f34:	f7fe fe56 	bl	8001be4 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e0cb      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4a:	4b49      	ldr	r3, [pc, #292]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ee      	beq.n	8002f34 <HAL_RCC_OscConfig+0x334>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f58:	f7fe fe44 	bl	8001be4 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fe fe40 	bl	8001be4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0b5      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f76:	4b3e      	ldr	r3, [pc, #248]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1ee      	bne.n	8002f60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d105      	bne.n	8002f94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f88:	4b39      	ldr	r3, [pc, #228]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8c:	4a38      	ldr	r2, [pc, #224]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80a1 	beq.w	80030e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f9e:	4b34      	ldr	r3, [pc, #208]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d05c      	beq.n	8003064 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d141      	bne.n	8003036 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb2:	4b31      	ldr	r3, [pc, #196]	@ (8003078 <HAL_RCC_OscConfig+0x478>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fe14 	bl	8001be4 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc0:	f7fe fe10 	bl	8001be4 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e087      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd2:	4b27      	ldr	r3, [pc, #156]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69da      	ldr	r2, [r3, #28]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	041b      	lsls	r3, r3, #16
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003000:	061b      	lsls	r3, r3, #24
 8003002:	491b      	ldr	r1, [pc, #108]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003008:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <HAL_RCC_OscConfig+0x478>)
 800300a:	2201      	movs	r2, #1
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300e:	f7fe fde9 	bl	8001be4 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003016:	f7fe fde5 	bl	8001be4 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e05c      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003028:	4b11      	ldr	r3, [pc, #68]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x416>
 8003034:	e054      	b.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <HAL_RCC_OscConfig+0x478>)
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7fe fdd2 	bl	8001be4 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003044:	f7fe fdce 	bl	8001be4 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e045      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003056:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <HAL_RCC_OscConfig+0x470>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x444>
 8003062:	e03d      	b.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e038      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
 8003070:	40023800 	.word	0x40023800
 8003074:	40007000 	.word	0x40007000
 8003078:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800307c:	4b1b      	ldr	r3, [pc, #108]	@ (80030ec <HAL_RCC_OscConfig+0x4ec>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d028      	beq.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d121      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d11a      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030ac:	4013      	ands	r3, r2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d111      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	3b01      	subs	r3, #1
 80030c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d107      	bne.n	80030dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40023800 	.word	0x40023800

080030f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0cc      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b68      	ldr	r3, [pc, #416]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d90c      	bls.n	800312c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b65      	ldr	r3, [pc, #404]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800311a:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	429a      	cmp	r2, r3
 8003126:	d001      	beq.n	800312c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e0b8      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d020      	beq.n	800317a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003144:	4b59      	ldr	r3, [pc, #356]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a58      	ldr	r2, [pc, #352]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800314e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d005      	beq.n	8003168 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800315c:	4b53      	ldr	r3, [pc, #332]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	4a52      	ldr	r2, [pc, #328]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003166:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003168:	4b50      	ldr	r3, [pc, #320]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	494d      	ldr	r1, [pc, #308]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	4313      	orrs	r3, r2
 8003178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d044      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318e:	4b47      	ldr	r3, [pc, #284]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d119      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e06f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e067      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b37      	ldr	r3, [pc, #220]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4934      	ldr	r1, [pc, #208]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fe fd00 	bl	8001be4 <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fe fcfc 	bl	8001be4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04f      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2b      	ldr	r3, [pc, #172]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b25      	ldr	r3, [pc, #148]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 030f 	and.w	r3, r3, #15
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d20c      	bcs.n	8003238 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b22      	ldr	r3, [pc, #136]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003226:	4b20      	ldr	r3, [pc, #128]	@ (80032a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	d001      	beq.n	8003238 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e032      	b.n	800329e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	d008      	beq.n	8003256 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003244:	4b19      	ldr	r3, [pc, #100]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4916      	ldr	r1, [pc, #88]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	4313      	orrs	r3, r2
 8003254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d009      	beq.n	8003276 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	490e      	ldr	r1, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003276:	f000 f821 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 800327a:	4602      	mov	r2, r0
 800327c:	4b0b      	ldr	r3, [pc, #44]	@ (80032ac <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	490a      	ldr	r1, [pc, #40]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	5ccb      	ldrb	r3, [r1, r3]
 800328a:	fa22 f303 	lsr.w	r3, r2, r3
 800328e:	4a09      	ldr	r2, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003292:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fc60 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40023c00 	.word	0x40023c00
 80032ac:	40023800 	.word	0x40023800
 80032b0:	0800549c 	.word	0x0800549c
 80032b4:	20000000 	.word	0x20000000
 80032b8:	20000010 	.word	0x20000010

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c0:	b094      	sub	sp, #80	@ 0x50
 80032c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032c8:	2300      	movs	r3, #0
 80032ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032cc:	2300      	movs	r3, #0
 80032ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032d4:	4b79      	ldr	r3, [pc, #484]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d00d      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x40>
 80032e0:	2b08      	cmp	r3, #8
 80032e2:	f200 80e1 	bhi.w	80034a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x34>
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80032ee:	e0db      	b.n	80034a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032f0:	4b73      	ldr	r3, [pc, #460]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80032f2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80032f4:	e0db      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032f6:	4b73      	ldr	r3, [pc, #460]	@ (80034c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80032f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032fa:	e0d8      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032fc:	4b6f      	ldr	r3, [pc, #444]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003304:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003306:	4b6d      	ldr	r3, [pc, #436]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d063      	beq.n	80033da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003312:	4b6a      	ldr	r3, [pc, #424]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	099b      	lsrs	r3, r3, #6
 8003318:	2200      	movs	r2, #0
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800331c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800331e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003324:	633b      	str	r3, [r7, #48]	@ 0x30
 8003326:	2300      	movs	r3, #0
 8003328:	637b      	str	r3, [r7, #52]	@ 0x34
 800332a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003340:	0150      	lsls	r0, r2, #5
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4621      	mov	r1, r4
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	6139      	str	r1, [r7, #16]
 800334c:	4629      	mov	r1, r5
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003360:	4659      	mov	r1, fp
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800336a:	4651      	mov	r1, sl
 800336c:	018a      	lsls	r2, r1, #6
 800336e:	4651      	mov	r1, sl
 8003370:	ebb2 0801 	subs.w	r8, r2, r1
 8003374:	4659      	mov	r1, fp
 8003376:	eb63 0901 	sbc.w	r9, r3, r1
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800338a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800338e:	4690      	mov	r8, r2
 8003390:	4699      	mov	r9, r3
 8003392:	4623      	mov	r3, r4
 8003394:	eb18 0303 	adds.w	r3, r8, r3
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	462b      	mov	r3, r5
 800339c:	eb49 0303 	adc.w	r3, r9, r3
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033ae:	4629      	mov	r1, r5
 80033b0:	024b      	lsls	r3, r1, #9
 80033b2:	4621      	mov	r1, r4
 80033b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033b8:	4621      	mov	r1, r4
 80033ba:	024a      	lsls	r2, r1, #9
 80033bc:	4610      	mov	r0, r2
 80033be:	4619      	mov	r1, r3
 80033c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033c2:	2200      	movs	r2, #0
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033cc:	f7fc ff16 	bl	80001fc <__aeabi_uldivmod>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4613      	mov	r3, r2
 80033d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033d8:	e058      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033da:	4b38      	ldr	r3, [pc, #224]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	099b      	lsrs	r3, r3, #6
 80033e0:	2200      	movs	r2, #0
 80033e2:	4618      	mov	r0, r3
 80033e4:	4611      	mov	r1, r2
 80033e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	2300      	movs	r3, #0
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80033f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033f4:	4642      	mov	r2, r8
 80033f6:	464b      	mov	r3, r9
 80033f8:	f04f 0000 	mov.w	r0, #0
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	0159      	lsls	r1, r3, #5
 8003402:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003406:	0150      	lsls	r0, r2, #5
 8003408:	4602      	mov	r2, r0
 800340a:	460b      	mov	r3, r1
 800340c:	4641      	mov	r1, r8
 800340e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003412:	4649      	mov	r1, r9
 8003414:	eb63 0b01 	sbc.w	fp, r3, r1
 8003418:	f04f 0200 	mov.w	r2, #0
 800341c:	f04f 0300 	mov.w	r3, #0
 8003420:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003424:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003428:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800342c:	ebb2 040a 	subs.w	r4, r2, sl
 8003430:	eb63 050b 	sbc.w	r5, r3, fp
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	00eb      	lsls	r3, r5, #3
 800343e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003442:	00e2      	lsls	r2, r4, #3
 8003444:	4614      	mov	r4, r2
 8003446:	461d      	mov	r5, r3
 8003448:	4643      	mov	r3, r8
 800344a:	18e3      	adds	r3, r4, r3
 800344c:	603b      	str	r3, [r7, #0]
 800344e:	464b      	mov	r3, r9
 8003450:	eb45 0303 	adc.w	r3, r5, r3
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003462:	4629      	mov	r1, r5
 8003464:	028b      	lsls	r3, r1, #10
 8003466:	4621      	mov	r1, r4
 8003468:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800346c:	4621      	mov	r1, r4
 800346e:	028a      	lsls	r2, r1, #10
 8003470:	4610      	mov	r0, r2
 8003472:	4619      	mov	r1, r3
 8003474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	61fa      	str	r2, [r7, #28]
 800347c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003480:	f7fc febc 	bl	80001fc <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800348c:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_RCC_GetSysClockFreq+0x200>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	3301      	adds	r3, #1
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800349c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800349e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a6:	e002      	b.n	80034ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b05      	ldr	r3, [pc, #20]	@ (80034c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3750      	adds	r7, #80	@ 0x50
 80034b4:	46bd      	mov	sp, r7
 80034b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ba:	bf00      	nop
 80034bc:	40023800 	.word	0x40023800
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	007a1200 	.word	0x007a1200

080034c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034cc:	4b03      	ldr	r3, [pc, #12]	@ (80034dc <HAL_RCC_GetHCLKFreq+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000000 	.word	0x20000000

080034e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034e4:	f7ff fff0 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 80034e8:	4602      	mov	r2, r0
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	0a9b      	lsrs	r3, r3, #10
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	4903      	ldr	r1, [pc, #12]	@ (8003504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034f6:	5ccb      	ldrb	r3, [r1, r3]
 80034f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40023800 	.word	0x40023800
 8003504:	080054ac 	.word	0x080054ac

08003508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800350c:	f7ff ffdc 	bl	80034c8 <HAL_RCC_GetHCLKFreq>
 8003510:	4602      	mov	r2, r0
 8003512:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	0b5b      	lsrs	r3, r3, #13
 8003518:	f003 0307 	and.w	r3, r3, #7
 800351c:	4903      	ldr	r1, [pc, #12]	@ (800352c <HAL_RCC_GetPCLK2Freq+0x24>)
 800351e:	5ccb      	ldrb	r3, [r1, r3]
 8003520:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	bd80      	pop	{r7, pc}
 8003528:	40023800 	.word	0x40023800
 800352c:	080054ac 	.word	0x080054ac

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10b      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003560:	2b00      	cmp	r3, #0
 8003562:	d075      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003564:	4b91      	ldr	r3, [pc, #580]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003566:	2200      	movs	r2, #0
 8003568:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800356a:	f7fe fb3b 	bl	8001be4 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003572:	f7fe fb37 	bl	8001be4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e189      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003584:	4b8a      	ldr	r3, [pc, #552]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1f0      	bne.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	019a      	lsls	r2, r3, #6
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	071b      	lsls	r3, r3, #28
 80035a8:	4981      	ldr	r1, [pc, #516]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01f      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035bc:	4b7c      	ldr	r3, [pc, #496]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035c2:	0f1b      	lsrs	r3, r3, #28
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	019a      	lsls	r2, r3, #6
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	431a      	orrs	r2, r3
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	071b      	lsls	r3, r3, #28
 80035dc:	4974      	ldr	r1, [pc, #464]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80035e4:	4b72      	ldr	r3, [pc, #456]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035ea:	f023 021f 	bic.w	r2, r3, #31
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	496e      	ldr	r1, [pc, #440]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	019a      	lsls	r2, r3, #6
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	071b      	lsls	r3, r3, #28
 800361c:	4964      	ldr	r1, [pc, #400]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003624:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800362a:	f7fe fadb 	bl	8001be4 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003630:	e008      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003632:	f7fe fad7 	bl	8001be4 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e129      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003644:	4b5a      	ldr	r3, [pc, #360]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003664:	2b00      	cmp	r3, #0
 8003666:	d079      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003668:	4b52      	ldr	r3, [pc, #328]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800366e:	f7fe fab9 	bl	8001be4 <HAL_GetTick>
 8003672:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003676:	f7fe fab5 	bl	8001be4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e107      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003688:	4b49      	ldr	r3, [pc, #292]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003694:	d0ef      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d020      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a2:	4b43      	ldr	r3, [pc, #268]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a8:	0f1b      	lsrs	r3, r3, #28
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	019a      	lsls	r2, r3, #6
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	061b      	lsls	r3, r3, #24
 80036bc:	431a      	orrs	r2, r3
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	071b      	lsls	r3, r3, #28
 80036c2:	493b      	ldr	r1, [pc, #236]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036ca:	4b39      	ldr	r3, [pc, #228]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036d0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	3b01      	subs	r3, #1
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	4934      	ldr	r1, [pc, #208]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01e      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036f0:	4b2f      	ldr	r3, [pc, #188]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f6:	0e1b      	lsrs	r3, r3, #24
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	019a      	lsls	r2, r3, #6
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	061b      	lsls	r3, r3, #24
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	071b      	lsls	r3, r3, #28
 8003710:	4927      	ldr	r1, [pc, #156]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003718:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800371a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800371e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	4922      	ldr	r1, [pc, #136]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003728:	4313      	orrs	r3, r2
 800372a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800372e:	4b21      	ldr	r3, [pc, #132]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003734:	f7fe fa56 	bl	8001be4 <HAL_GetTick>
 8003738:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800373c:	f7fe fa52 	bl	8001be4 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0a4      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800374e:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800375a:	d1ef      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0320 	and.w	r3, r3, #32
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 808b 	beq.w	8003880 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
 800376e:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	4a0f      	ldr	r2, [pc, #60]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	@ 0x40
 800377a:	4b0d      	ldr	r3, [pc, #52]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003786:	4b0c      	ldr	r3, [pc, #48]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a0b      	ldr	r2, [pc, #44]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800378c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003790:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003792:	f7fe fa27 	bl	8001be4 <HAL_GetTick>
 8003796:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003798:	e010      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800379a:	f7fe fa23 	bl	8001be4 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d909      	bls.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e075      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80037ac:	42470068 	.word	0x42470068
 80037b0:	40023800 	.word	0x40023800
 80037b4:	42470070 	.word	0x42470070
 80037b8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037bc:	4b38      	ldr	r3, [pc, #224]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0e8      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037c8:	4b36      	ldr	r3, [pc, #216]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037d0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d02f      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d028      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037e6:	4b2f      	ldr	r3, [pc, #188]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037f0:	4b2d      	ldr	r3, [pc, #180]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037f6:	4b2c      	ldr	r3, [pc, #176]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80037fc:	4a29      	ldr	r2, [pc, #164]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003802:	4b28      	ldr	r3, [pc, #160]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b01      	cmp	r3, #1
 800380c:	d114      	bne.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800380e:	f7fe f9e9 	bl	8001be4 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003814:	e00a      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003816:	f7fe f9e5 	bl	8001be4 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e035      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	4b1d      	ldr	r3, [pc, #116]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0ee      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003840:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003844:	d10d      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003846:	4b17      	ldr	r3, [pc, #92]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800385a:	4912      	ldr	r1, [pc, #72]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800385c:	4313      	orrs	r3, r2
 800385e:	608b      	str	r3, [r1, #8]
 8003860:	e005      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003862:	4b10      	ldr	r3, [pc, #64]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	4a0f      	ldr	r2, [pc, #60]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003868:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800386c:	6093      	str	r3, [r2, #8]
 800386e:	4b0d      	ldr	r3, [pc, #52]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003870:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387a:	490a      	ldr	r1, [pc, #40]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800387c:	4313      	orrs	r3, r2
 800387e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b00      	cmp	r3, #0
 800388a:	d004      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003894:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40007000 	.word	0x40007000
 80038a4:	40023800 	.word	0x40023800
 80038a8:	42470e40 	.word	0x42470e40
 80038ac:	424711e0 	.word	0x424711e0

080038b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e073      	b.n	80039ae <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7f5b      	ldrb	r3, [r3, #29]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d105      	bne.n	80038dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7fd f888 	bl	80009ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0310 	and.w	r3, r3, #16
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d055      	beq.n	800399c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	22ca      	movs	r2, #202	@ 0xca
 80038f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2253      	movs	r2, #83	@ 0x53
 80038fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa49 	bl	8003d98 <RTC_EnterInitMode>
 8003906:	4603      	mov	r3, r0
 8003908:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d12c      	bne.n	800396a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6812      	ldr	r2, [r2, #0]
 800391a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800391e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003922:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6899      	ldr	r1, [r3, #8]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	431a      	orrs	r2, r3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6919      	ldr	r1, [r3, #16]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	041a      	lsls	r2, r3, #16
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	430a      	orrs	r2, r1
 800395e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa50 	bl	8003e06 <RTC_ExitInitMode>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d110      	bne.n	8003992 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699a      	ldr	r2, [r3, #24]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	22ff      	movs	r2, #255	@ 0xff
 8003998:	625a      	str	r2, [r3, #36]	@ 0x24
 800399a:	e001      	b.n	80039a0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d102      	bne.n	80039ac <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}

080039b6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039b6:	b590      	push	{r4, r7, lr}
 80039b8:	b087      	sub	sp, #28
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	7f1b      	ldrb	r3, [r3, #28]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_RTC_SetTime+0x1c>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e087      	b.n	8003ae2 <HAL_RTC_SetTime+0x12c>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2202      	movs	r2, #2
 80039dc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d126      	bne.n	8003a32 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2200      	movs	r2, #0
 80039f6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fa27 	bl	8003e50 <RTC_ByteToBcd2>
 8003a02:	4603      	mov	r3, r0
 8003a04:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	785b      	ldrb	r3, [r3, #1]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 fa20 	bl	8003e50 <RTC_ByteToBcd2>
 8003a10:	4603      	mov	r3, r0
 8003a12:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a14:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	789b      	ldrb	r3, [r3, #2]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa18 	bl	8003e50 <RTC_ByteToBcd2>
 8003a20:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a22:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	78db      	ldrb	r3, [r3, #3]
 8003a2a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	e018      	b.n	8003a64 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2200      	movs	r2, #0
 8003a44:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a52:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a58:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	78db      	ldrb	r3, [r3, #3]
 8003a5e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	22ca      	movs	r2, #202	@ 0xca
 8003a6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2253      	movs	r2, #83	@ 0x53
 8003a72:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f98f 	bl	8003d98 <RTC_EnterInitMode>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a7e:	7cfb      	ldrb	r3, [r7, #19]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d120      	bne.n	8003ac6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003a8e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003a92:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689a      	ldr	r2, [r3, #8]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003aa2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6899      	ldr	r1, [r3, #8]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f9a2 	bl	8003e06 <RTC_ExitInitMode>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d102      	bne.n	8003ad2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	22ff      	movs	r2, #255	@ 0xff
 8003ad8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]

  return status;
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	371c      	adds	r7, #28
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd90      	pop	{r4, r7, pc}

08003aea <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003b1c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003b20:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	0d9b      	lsrs	r3, r3, #22
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11a      	bne.n	8003b9c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 f98e 	bl	8003e8c <RTC_Bcd2ToByte>
 8003b70:	4603      	mov	r3, r0
 8003b72:	461a      	mov	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f985 	bl	8003e8c <RTC_Bcd2ToByte>
 8003b82:	4603      	mov	r3, r0
 8003b84:	461a      	mov	r2, r3
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	789b      	ldrb	r3, [r3, #2]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 f97c 	bl	8003e8c <RTC_Bcd2ToByte>
 8003b94:	4603      	mov	r3, r0
 8003b96:	461a      	mov	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003ba6:	b590      	push	{r4, r7, lr}
 8003ba8:	b087      	sub	sp, #28
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	7f1b      	ldrb	r3, [r3, #28]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RTC_SetDate+0x1c>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e071      	b.n	8003ca6 <HAL_RTC_SetDate+0x100>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_RTC_SetDate+0x4c>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	785b      	ldrb	r3, [r3, #1]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	f023 0310 	bic.w	r3, r3, #16
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	330a      	adds	r3, #10
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d11c      	bne.n	8003c32 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	78db      	ldrb	r3, [r3, #3]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 f927 	bl	8003e50 <RTC_ByteToBcd2>
 8003c02:	4603      	mov	r3, r0
 8003c04:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	785b      	ldrb	r3, [r3, #1]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f920 	bl	8003e50 <RTC_ByteToBcd2>
 8003c10:	4603      	mov	r3, r0
 8003c12:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c14:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	789b      	ldrb	r3, [r3, #2]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 f918 	bl	8003e50 <RTC_ByteToBcd2>
 8003c20:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c22:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	e00e      	b.n	8003c50 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	78db      	ldrb	r3, [r3, #3]
 8003c36:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	785b      	ldrb	r3, [r3, #1]
 8003c3c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c3e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c44:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	22ca      	movs	r2, #202	@ 0xca
 8003c56:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2253      	movs	r2, #83	@ 0x53
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f899 	bl	8003d98 <RTC_EnterInitMode>
 8003c66:	4603      	mov	r3, r0
 8003c68:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c6a:	7cfb      	ldrb	r3, [r7, #19]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c7a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c7e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f8c0 	bl	8003e06 <RTC_ExitInitMode>
 8003c86:	4603      	mov	r3, r0
 8003c88:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c8a:	7cfb      	ldrb	r3, [r7, #19]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d102      	bne.n	8003c96 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	22ff      	movs	r2, #255	@ 0xff
 8003c9c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]

  return status;
 8003ca4:	7cfb      	ldrb	r3, [r7, #19]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	371c      	adds	r7, #28
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd90      	pop	{r4, r7, pc}

08003cae <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cc8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f003 031f 	and.w	r3, r3, #31
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	0b5b      	lsrs	r3, r3, #13
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d11a      	bne.n	8003d42 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	78db      	ldrb	r3, [r3, #3]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 f8bb 	bl	8003e8c <RTC_Bcd2ToByte>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	785b      	ldrb	r3, [r3, #1]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f8b2 	bl	8003e8c <RTC_Bcd2ToByte>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	789b      	ldrb	r3, [r3, #2]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f8a9 	bl	8003e8c <RTC_Bcd2ToByte>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003d94 <HAL_RTC_WaitForSynchro+0x48>)
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d60:	f7fd ff40 	bl	8001be4 <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d66:	e009      	b.n	8003d7c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d68:	f7fd ff3c 	bl	8001be4 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d76:	d901      	bls.n	8003d7c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e007      	b.n	8003d8c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0ee      	beq.n	8003d68 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	00017f5f 	.word	0x00017f5f

08003d98 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d122      	bne.n	8003dfc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dc4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dc6:	f7fd ff0d 	bl	8001be4 <HAL_GetTick>
 8003dca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dcc:	e00c      	b.n	8003de8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dce:	f7fd ff09 	bl	8001be4 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ddc:	d904      	bls.n	8003de8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2204      	movs	r2, #4
 8003de2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <RTC_EnterInitMode+0x64>
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d1e8      	bne.n	8003dce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e20:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ff8b 	bl	8003d4c <HAL_RTC_WaitForSynchro>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2204      	movs	r2, #4
 8003e40:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003e5e:	e005      	b.n	8003e6c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	3b0a      	subs	r3, #10
 8003e6a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e6c:	79fb      	ldrb	r3, [r7, #7]
 8003e6e:	2b09      	cmp	r3, #9
 8003e70:	d8f6      	bhi.n	8003e60 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	011b      	lsls	r3, r3, #4
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	b2db      	uxtb	r3, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	b2db      	uxtb	r3, r3
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e07b      	b.n	8003fd2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d108      	bne.n	8003ef4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eea:	d009      	beq.n	8003f00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	61da      	str	r2, [r3, #28]
 8003ef2:	e005      	b.n	8003f00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7fc fd90 	bl	8000a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	ea42 0103 	orr.w	r1, r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	0c1b      	lsrs	r3, r3, #16
 8003f9e:	f003 0104 	and.w	r1, r3, #4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	f003 0210 	and.w	r2, r3, #16
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b088      	sub	sp, #32
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_SPI_Transmit+0x22>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e12d      	b.n	8004258 <HAL_SPI_Transmit+0x27e>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004004:	f7fd fdee 	bl	8001be4 <HAL_GetTick>
 8004008:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800400a:	88fb      	ldrh	r3, [r7, #6]
 800400c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b01      	cmp	r3, #1
 8004018:	d002      	beq.n	8004020 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800401a:	2302      	movs	r3, #2
 800401c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800401e:	e116      	b.n	800424e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_SPI_Transmit+0x52>
 8004026:	88fb      	ldrh	r3, [r7, #6]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004030:	e10d      	b.n	800424e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2203      	movs	r2, #3
 8004036:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	88fa      	ldrh	r2, [r7, #6]
 800404a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004078:	d10f      	bne.n	800409a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004088:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004098:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a4:	2b40      	cmp	r3, #64	@ 0x40
 80040a6:	d007      	beq.n	80040b8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040c0:	d14f      	bne.n	8004162 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_SPI_Transmit+0xf6>
 80040ca:	8afb      	ldrh	r3, [r7, #22]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d142      	bne.n	8004156 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80040f4:	e02f      	b.n	8004156 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d112      	bne.n	800412a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004128:	e015      	b.n	8004156 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800412a:	f7fd fd5b 	bl	8001be4 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d803      	bhi.n	8004142 <HAL_SPI_Transmit+0x168>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004140:	d102      	bne.n	8004148 <HAL_SPI_Transmit+0x16e>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004154:	e07b      	b.n	800424e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1ca      	bne.n	80040f6 <HAL_SPI_Transmit+0x11c>
 8004160:	e050      	b.n	8004204 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_SPI_Transmit+0x196>
 800416a:	8afb      	ldrh	r3, [r7, #22]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d144      	bne.n	80041fa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	7812      	ldrb	r2, [r2, #0]
 800417c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004196:	e030      	b.n	80041fa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d113      	bne.n	80041ce <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	86da      	strh	r2, [r3, #54]	@ 0x36
 80041cc:	e015      	b.n	80041fa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ce:	f7fd fd09 	bl	8001be4 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d803      	bhi.n	80041e6 <HAL_SPI_Transmit+0x20c>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e4:	d102      	bne.n	80041ec <HAL_SPI_Transmit+0x212>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80041f8:	e029      	b.n	800424e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1c9      	bne.n	8004198 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	6839      	ldr	r1, [r7, #0]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fbdf 	bl	80049cc <SPI_EndRxTxTransaction>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d002      	beq.n	800421a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423c:	2b00      	cmp	r3, #0
 800423e:	d002      	beq.n	8004246 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	77fb      	strb	r3, [r7, #31]
 8004244:	e003      	b.n	800424e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004256:	7ffb      	ldrb	r3, [r7, #31]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3720      	adds	r7, #32
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af02      	add	r7, sp, #8
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d002      	beq.n	8004286 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004280:	2302      	movs	r3, #2
 8004282:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004284:	e0fb      	b.n	800447e <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800428e:	d112      	bne.n	80042b6 <HAL_SPI_Receive+0x56>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10e      	bne.n	80042b6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2204      	movs	r2, #4
 800429c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80042a0:	88fa      	ldrh	r2, [r7, #6]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	4613      	mov	r3, r2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 f8ef 	bl	8004490 <HAL_SPI_TransmitReceive>
 80042b2:	4603      	mov	r3, r0
 80042b4:	e0e8      	b.n	8004488 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_SPI_Receive+0x64>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e0e1      	b.n	8004488 <HAL_SPI_Receive+0x228>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042cc:	f7fd fc8a 	bl	8001be4 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_SPI_Receive+0x7e>
 80042d8:	88fb      	ldrh	r3, [r7, #6]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80042e2:	e0cc      	b.n	800447e <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2204      	movs	r2, #4
 80042e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	88fa      	ldrh	r2, [r7, #6]
 80042fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800432a:	d10f      	bne.n	800434c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800433a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004356:	2b40      	cmp	r3, #64	@ 0x40
 8004358:	d007      	beq.n	800436a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d16a      	bne.n	8004448 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004372:	e032      	b.n	80043da <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b01      	cmp	r3, #1
 8004380:	d115      	bne.n	80043ae <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f103 020c 	add.w	r2, r3, #12
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043ac:	e015      	b.n	80043da <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043ae:	f7fd fc19 	bl	8001be4 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d803      	bhi.n	80043c6 <HAL_SPI_Receive+0x166>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043c4:	d102      	bne.n	80043cc <HAL_SPI_Receive+0x16c>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d106      	bne.n	80043da <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80043d8:	e051      	b.n	800447e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1c7      	bne.n	8004374 <HAL_SPI_Receive+0x114>
 80043e4:	e035      	b.n	8004452 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d113      	bne.n	800441c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68da      	ldr	r2, [r3, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fe:	b292      	uxth	r2, r2
 8004400:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004406:	1c9a      	adds	r2, r3, #2
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800441a:	e015      	b.n	8004448 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800441c:	f7fd fbe2 	bl	8001be4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d803      	bhi.n	8004434 <HAL_SPI_Receive+0x1d4>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004432:	d102      	bne.n	800443a <HAL_SPI_Receive+0x1da>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004446:	e01a      	b.n	800447e <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1c9      	bne.n	80043e6 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fa52 	bl	8004900 <SPI_EndRxTransaction>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2220      	movs	r2, #32
 8004466:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75fb      	strb	r3, [r7, #23]
 8004474:	e003      	b.n	800447e <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08c      	sub	sp, #48	@ 0x30
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800449e:	2301      	movs	r3, #1
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_SPI_TransmitReceive+0x26>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e198      	b.n	80047e8 <HAL_SPI_TransmitReceive+0x358>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044be:	f7fd fb91 	bl	8001be4 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044d4:	887b      	ldrh	r3, [r7, #2]
 80044d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d00f      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x70>
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044e6:	d107      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d103      	bne.n	80044f8 <HAL_SPI_TransmitReceive+0x68>
 80044f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d003      	beq.n	8004500 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
 80044fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80044fe:	e16d      	b.n	80047dc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_SPI_TransmitReceive+0x82>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <HAL_SPI_TransmitReceive+0x82>
 800450c:	887b      	ldrh	r3, [r7, #2]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d103      	bne.n	800451a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004518:	e160      	b.n	80047dc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b04      	cmp	r3, #4
 8004524:	d003      	beq.n	800452e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2205      	movs	r2, #5
 800452a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	887a      	ldrh	r2, [r7, #2]
 800453e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	887a      	ldrh	r2, [r7, #2]
 8004544:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	887a      	ldrh	r2, [r7, #2]
 8004556:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	2b40      	cmp	r3, #64	@ 0x40
 8004570:	d007      	beq.n	8004582 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004580:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458a:	d17c      	bne.n	8004686 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_SPI_TransmitReceive+0x10a>
 8004594:	8b7b      	ldrh	r3, [r7, #26]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d16a      	bne.n	8004670 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	881a      	ldrh	r2, [r3, #0]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	1c9a      	adds	r2, r3, #2
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045be:	e057      	b.n	8004670 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d11b      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x176>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d016      	beq.n	8004606 <HAL_SPI_TransmitReceive+0x176>
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d113      	bne.n	8004606 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e2:	881a      	ldrh	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	1c9a      	adds	r2, r3, #2
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b01      	cmp	r3, #1
 8004612:	d119      	bne.n	8004648 <HAL_SPI_TransmitReceive+0x1b8>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d014      	beq.n	8004648 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004628:	b292      	uxth	r2, r2
 800462a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004630:	1c9a      	adds	r2, r3, #2
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004644:	2301      	movs	r3, #1
 8004646:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004648:	f7fd facc 	bl	8001be4 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004654:	429a      	cmp	r2, r3
 8004656:	d80b      	bhi.n	8004670 <HAL_SPI_TransmitReceive+0x1e0>
 8004658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800465e:	d007      	beq.n	8004670 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800466e:	e0b5      	b.n	80047dc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1a2      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x130>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d19d      	bne.n	80045c0 <HAL_SPI_TransmitReceive+0x130>
 8004684:	e080      	b.n	8004788 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_SPI_TransmitReceive+0x204>
 800468e:	8b7b      	ldrh	r3, [r7, #26]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d16f      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	330c      	adds	r3, #12
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	1c5a      	adds	r2, r3, #1
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	3b01      	subs	r3, #1
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046ba:	e05b      	b.n	8004774 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d11c      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x274>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d017      	beq.n	8004704 <HAL_SPI_TransmitReceive+0x274>
 80046d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d114      	bne.n	8004704 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	330c      	adds	r3, #12
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b01      	cmp	r3, #1
 8004710:	d119      	bne.n	8004746 <HAL_SPI_TransmitReceive+0x2b6>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d014      	beq.n	8004746 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004742:	2301      	movs	r3, #1
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004746:	f7fd fa4d 	bl	8001be4 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004752:	429a      	cmp	r2, r3
 8004754:	d803      	bhi.n	800475e <HAL_SPI_TransmitReceive+0x2ce>
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800475c:	d102      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x2d4>
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	2b00      	cmp	r3, #0
 8004762:	d107      	bne.n	8004774 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004772:	e033      	b.n	80047dc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d19e      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x22c>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004782:	b29b      	uxth	r3, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d199      	bne.n	80046bc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f91d 	bl	80049cc <SPI_EndRxTxTransaction>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80047a4:	e01a      	b.n	80047dc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047ae:	2300      	movs	r3, #0
 80047b0:	617b      	str	r3, [r7, #20]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d2:	e003      	b.n	80047dc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3730      	adds	r7, #48	@ 0x30
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4613      	mov	r3, r2
 80047fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004800:	f7fd f9f0 	bl	8001be4 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	4413      	add	r3, r2
 800480e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004810:	f7fd f9e8 	bl	8001be4 <HAL_GetTick>
 8004814:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004816:	4b39      	ldr	r3, [pc, #228]	@ (80048fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	015b      	lsls	r3, r3, #5
 800481c:	0d1b      	lsrs	r3, r3, #20
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	fb02 f303 	mul.w	r3, r2, r3
 8004824:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004826:	e054      	b.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800482e:	d050      	beq.n	80048d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004830:	f7fd f9d8 	bl	8001be4 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	429a      	cmp	r2, r3
 800483e:	d902      	bls.n	8004846 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d13d      	bne.n	80048c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004854:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800485e:	d111      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004868:	d004      	beq.n	8004874 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004872:	d107      	bne.n	8004884 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004882:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800488c:	d10f      	bne.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e017      	b.n	80048f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4013      	ands	r3, r2
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	429a      	cmp	r2, r3
 80048e0:	bf0c      	ite	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	2300      	movne	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	461a      	mov	r2, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	429a      	cmp	r2, r3
 80048ee:	d19b      	bne.n	8004828 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20000000 	.word	0x20000000

08004900 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af02      	add	r7, sp, #8
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004914:	d111      	bne.n	800493a <SPI_EndRxTransaction+0x3a>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800491e:	d004      	beq.n	800492a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004928:	d107      	bne.n	800493a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004938:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004942:	d12a      	bne.n	800499a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800494c:	d012      	beq.n	8004974 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	9300      	str	r3, [sp, #0]
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2200      	movs	r2, #0
 8004956:	2180      	movs	r1, #128	@ 0x80
 8004958:	68f8      	ldr	r0, [r7, #12]
 800495a:	f7ff ff49 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02d      	beq.n	80049c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004968:	f043 0220 	orr.w	r2, r3, #32
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e026      	b.n	80049c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	2101      	movs	r1, #1
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff ff36 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d01a      	beq.n	80049c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498e:	f043 0220 	orr.w	r2, r3, #32
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e013      	b.n	80049c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2101      	movs	r1, #1
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f7ff ff23 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e000      	b.n	80049c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
	...

080049cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b088      	sub	sp, #32
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	9300      	str	r3, [sp, #0]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2201      	movs	r2, #1
 80049e0:	2102      	movs	r1, #2
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f7ff ff04 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d007      	beq.n	80049fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f2:	f043 0220 	orr.w	r2, r3, #32
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e032      	b.n	8004a64 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80049fe:	4b1b      	ldr	r3, [pc, #108]	@ (8004a6c <SPI_EndRxTxTransaction+0xa0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a1b      	ldr	r2, [pc, #108]	@ (8004a70 <SPI_EndRxTxTransaction+0xa4>)
 8004a04:	fba2 2303 	umull	r2, r3, r2, r3
 8004a08:	0d5b      	lsrs	r3, r3, #21
 8004a0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1c:	d112      	bne.n	8004a44 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	2200      	movs	r2, #0
 8004a26:	2180      	movs	r1, #128	@ 0x80
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f7ff fee1 	bl	80047f0 <SPI_WaitFlagStateUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d016      	beq.n	8004a62 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e00f      	b.n	8004a64 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a5a:	2b80      	cmp	r3, #128	@ 0x80
 8004a5c:	d0f2      	beq.n	8004a44 <SPI_EndRxTxTransaction+0x78>
 8004a5e:	e000      	b.n	8004a62 <SPI_EndRxTxTransaction+0x96>
        break;
 8004a60:	bf00      	nop
  }

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3718      	adds	r7, #24
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	165e9f81 	.word	0x165e9f81

08004a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e042      	b.n	8004b0c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc f838 	bl	8000b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	@ 0x24
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f973 	bl	8004da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b08a      	sub	sp, #40	@ 0x28
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	603b      	str	r3, [r7, #0]
 8004b20:	4613      	mov	r3, r2
 8004b22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d175      	bne.n	8004c20 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <HAL_UART_Transmit+0x2c>
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e06e      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2221      	movs	r2, #33	@ 0x21
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b52:	f7fd f847 	bl	8001be4 <HAL_GetTick>
 8004b56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	88fa      	ldrh	r2, [r7, #6]
 8004b5c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	88fa      	ldrh	r2, [r7, #6]
 8004b62:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b6c:	d108      	bne.n	8004b80 <HAL_UART_Transmit+0x6c>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	61bb      	str	r3, [r7, #24]
 8004b7e:	e003      	b.n	8004b88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b84:	2300      	movs	r3, #0
 8004b86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b88:	e02e      	b.n	8004be8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2200      	movs	r2, #0
 8004b92:	2180      	movs	r1, #128	@ 0x80
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f000 f848 	bl	8004c2a <UART_WaitOnFlagUntilTimeout>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e03a      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10b      	bne.n	8004bca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bc0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e007      	b.n	8004bda <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	781a      	ldrb	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1cb      	bne.n	8004b8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	9300      	str	r3, [sp, #0]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2140      	movs	r1, #64	@ 0x40
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f814 	bl	8004c2a <UART_WaitOnFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2220      	movs	r2, #32
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e006      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	e000      	b.n	8004c22 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c20:	2302      	movs	r3, #2
  }
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b086      	sub	sp, #24
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	603b      	str	r3, [r7, #0]
 8004c36:	4613      	mov	r3, r2
 8004c38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3a:	e03b      	b.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c42:	d037      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c44:	f7fc ffce 	bl	8001be4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d302      	bcc.n	8004c5a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c54:	6a3b      	ldr	r3, [r7, #32]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e03a      	b.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d023      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b80      	cmp	r3, #128	@ 0x80
 8004c70:	d020      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b40      	cmp	r3, #64	@ 0x40
 8004c76:	d01d      	beq.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0308 	and.w	r3, r3, #8
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d116      	bne.n	8004cb4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f81d 	bl	8004cdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e00f      	b.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	461a      	mov	r2, r3
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d0b4      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b095      	sub	sp, #84	@ 0x54
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d04:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e5      	bne.n	8004ce4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3314      	adds	r3, #20
 8004d36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d119      	bne.n	8004d88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f023 0310 	bic.w	r3, r3, #16
 8004d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	330c      	adds	r3, #12
 8004d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d74:	61ba      	str	r2, [r7, #24]
 8004d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d78:	6979      	ldr	r1, [r7, #20]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	e841 2300 	strex	r3, r2, [r1]
 8004d80:	613b      	str	r3, [r7, #16]
   return(result);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1e5      	bne.n	8004d54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2220      	movs	r2, #32
 8004d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d96:	bf00      	nop
 8004d98:	3754      	adds	r7, #84	@ 0x54
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004da8:	b0c0      	sub	sp, #256	@ 0x100
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	68d9      	ldr	r1, [r3, #12]
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	ea40 0301 	orr.w	r3, r0, r1
 8004dcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	431a      	orrs	r2, r3
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004dfc:	f021 010c 	bic.w	r1, r1, #12
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1e:	6999      	ldr	r1, [r3, #24]
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	ea40 0301 	orr.w	r3, r0, r1
 8004e2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b8f      	ldr	r3, [pc, #572]	@ (8005070 <UART_SetConfig+0x2cc>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d005      	beq.n	8004e44 <UART_SetConfig+0xa0>
 8004e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	4b8d      	ldr	r3, [pc, #564]	@ (8005074 <UART_SetConfig+0x2d0>)
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d104      	bne.n	8004e4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e44:	f7fe fb60 	bl	8003508 <HAL_RCC_GetPCLK2Freq>
 8004e48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e4c:	e003      	b.n	8004e56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e4e:	f7fe fb47 	bl	80034e0 <HAL_RCC_GetPCLK1Freq>
 8004e52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e60:	f040 810c 	bne.w	800507c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e76:	4622      	mov	r2, r4
 8004e78:	462b      	mov	r3, r5
 8004e7a:	1891      	adds	r1, r2, r2
 8004e7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e86:	4621      	mov	r1, r4
 8004e88:	eb12 0801 	adds.w	r8, r2, r1
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	eb43 0901 	adc.w	r9, r3, r1
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ea6:	4690      	mov	r8, r2
 8004ea8:	4699      	mov	r9, r3
 8004eaa:	4623      	mov	r3, r4
 8004eac:	eb18 0303 	adds.w	r3, r8, r3
 8004eb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004eb4:	462b      	mov	r3, r5
 8004eb6:	eb49 0303 	adc.w	r3, r9, r3
 8004eba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ece:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	18db      	adds	r3, r3, r3
 8004ed6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed8:	4613      	mov	r3, r2
 8004eda:	eb42 0303 	adc.w	r3, r2, r3
 8004ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ee0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ee4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ee8:	f7fb f988 	bl	80001fc <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4b61      	ldr	r3, [pc, #388]	@ (8005078 <UART_SetConfig+0x2d4>)
 8004ef2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	011c      	lsls	r4, r3, #4
 8004efa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f0c:	4642      	mov	r2, r8
 8004f0e:	464b      	mov	r3, r9
 8004f10:	1891      	adds	r1, r2, r2
 8004f12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f14:	415b      	adcs	r3, r3
 8004f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	eb12 0a01 	adds.w	sl, r2, r1
 8004f22:	4649      	mov	r1, r9
 8004f24:	eb43 0b01 	adc.w	fp, r3, r1
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f3c:	4692      	mov	sl, r2
 8004f3e:	469b      	mov	fp, r3
 8004f40:	4643      	mov	r3, r8
 8004f42:	eb1a 0303 	adds.w	r3, sl, r3
 8004f46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004f50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	18db      	adds	r3, r3, r3
 8004f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f6e:	4613      	mov	r3, r2
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f7e:	f7fb f93d 	bl	80001fc <__aeabi_uldivmod>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	4b3b      	ldr	r3, [pc, #236]	@ (8005078 <UART_SetConfig+0x2d4>)
 8004f8a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2264      	movs	r2, #100	@ 0x64
 8004f92:	fb02 f303 	mul.w	r3, r2, r3
 8004f96:	1acb      	subs	r3, r1, r3
 8004f98:	00db      	lsls	r3, r3, #3
 8004f9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f9e:	4b36      	ldr	r3, [pc, #216]	@ (8005078 <UART_SetConfig+0x2d4>)
 8004fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	005b      	lsls	r3, r3, #1
 8004fa8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fac:	441c      	add	r4, r3
 8004fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fc0:	4642      	mov	r2, r8
 8004fc2:	464b      	mov	r3, r9
 8004fc4:	1891      	adds	r1, r2, r2
 8004fc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fc8:	415b      	adcs	r3, r3
 8004fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	1851      	adds	r1, r2, r1
 8004fd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	414b      	adcs	r3, r1
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fe8:	4659      	mov	r1, fp
 8004fea:	00cb      	lsls	r3, r1, #3
 8004fec:	4651      	mov	r1, sl
 8004fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	00ca      	lsls	r2, r1, #3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4642      	mov	r2, r8
 8004ffe:	189b      	adds	r3, r3, r2
 8005000:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005004:	464b      	mov	r3, r9
 8005006:	460a      	mov	r2, r1
 8005008:	eb42 0303 	adc.w	r3, r2, r3
 800500c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800501c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005020:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005024:	460b      	mov	r3, r1
 8005026:	18db      	adds	r3, r3, r3
 8005028:	62bb      	str	r3, [r7, #40]	@ 0x28
 800502a:	4613      	mov	r3, r2
 800502c:	eb42 0303 	adc.w	r3, r2, r3
 8005030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005032:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005036:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800503a:	f7fb f8df 	bl	80001fc <__aeabi_uldivmod>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <UART_SetConfig+0x2d4>)
 8005044:	fba3 1302 	umull	r1, r3, r3, r2
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	2164      	movs	r1, #100	@ 0x64
 800504c:	fb01 f303 	mul.w	r3, r1, r3
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	3332      	adds	r3, #50	@ 0x32
 8005056:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <UART_SetConfig+0x2d4>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	f003 0207 	and.w	r2, r3, #7
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4422      	add	r2, r4
 800506a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800506c:	e106      	b.n	800527c <UART_SetConfig+0x4d8>
 800506e:	bf00      	nop
 8005070:	40011000 	.word	0x40011000
 8005074:	40011400 	.word	0x40011400
 8005078:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800507c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005080:	2200      	movs	r2, #0
 8005082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005086:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800508a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800508e:	4642      	mov	r2, r8
 8005090:	464b      	mov	r3, r9
 8005092:	1891      	adds	r1, r2, r2
 8005094:	6239      	str	r1, [r7, #32]
 8005096:	415b      	adcs	r3, r3
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
 800509a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800509e:	4641      	mov	r1, r8
 80050a0:	1854      	adds	r4, r2, r1
 80050a2:	4649      	mov	r1, r9
 80050a4:	eb43 0501 	adc.w	r5, r3, r1
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	00eb      	lsls	r3, r5, #3
 80050b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050b6:	00e2      	lsls	r2, r4, #3
 80050b8:	4614      	mov	r4, r2
 80050ba:	461d      	mov	r5, r3
 80050bc:	4643      	mov	r3, r8
 80050be:	18e3      	adds	r3, r4, r3
 80050c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050c4:	464b      	mov	r3, r9
 80050c6:	eb45 0303 	adc.w	r3, r5, r3
 80050ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050ea:	4629      	mov	r1, r5
 80050ec:	008b      	lsls	r3, r1, #2
 80050ee:	4621      	mov	r1, r4
 80050f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f4:	4621      	mov	r1, r4
 80050f6:	008a      	lsls	r2, r1, #2
 80050f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050fc:	f7fb f87e 	bl	80001fc <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4b60      	ldr	r3, [pc, #384]	@ (8005288 <UART_SetConfig+0x4e4>)
 8005106:	fba3 2302 	umull	r2, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	011c      	lsls	r4, r3, #4
 800510e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005112:	2200      	movs	r2, #0
 8005114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005118:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800511c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005120:	4642      	mov	r2, r8
 8005122:	464b      	mov	r3, r9
 8005124:	1891      	adds	r1, r2, r2
 8005126:	61b9      	str	r1, [r7, #24]
 8005128:	415b      	adcs	r3, r3
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005130:	4641      	mov	r1, r8
 8005132:	1851      	adds	r1, r2, r1
 8005134:	6139      	str	r1, [r7, #16]
 8005136:	4649      	mov	r1, r9
 8005138:	414b      	adcs	r3, r1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005148:	4659      	mov	r1, fp
 800514a:	00cb      	lsls	r3, r1, #3
 800514c:	4651      	mov	r1, sl
 800514e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005152:	4651      	mov	r1, sl
 8005154:	00ca      	lsls	r2, r1, #3
 8005156:	4610      	mov	r0, r2
 8005158:	4619      	mov	r1, r3
 800515a:	4603      	mov	r3, r0
 800515c:	4642      	mov	r2, r8
 800515e:	189b      	adds	r3, r3, r2
 8005160:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005164:	464b      	mov	r3, r9
 8005166:	460a      	mov	r2, r1
 8005168:	eb42 0303 	adc.w	r3, r2, r3
 800516c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	67bb      	str	r3, [r7, #120]	@ 0x78
 800517a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800517c:	f04f 0200 	mov.w	r2, #0
 8005180:	f04f 0300 	mov.w	r3, #0
 8005184:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005188:	4649      	mov	r1, r9
 800518a:	008b      	lsls	r3, r1, #2
 800518c:	4641      	mov	r1, r8
 800518e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005192:	4641      	mov	r1, r8
 8005194:	008a      	lsls	r2, r1, #2
 8005196:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800519a:	f7fb f82f 	bl	80001fc <__aeabi_uldivmod>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	4b38      	ldr	r3, [pc, #224]	@ (8005288 <UART_SetConfig+0x4e4>)
 80051a6:	fba3 2301 	umull	r2, r3, r3, r1
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2264      	movs	r2, #100	@ 0x64
 80051ae:	fb02 f303 	mul.w	r3, r2, r3
 80051b2:	1acb      	subs	r3, r1, r3
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	3332      	adds	r3, #50	@ 0x32
 80051b8:	4a33      	ldr	r2, [pc, #204]	@ (8005288 <UART_SetConfig+0x4e4>)
 80051ba:	fba2 2303 	umull	r2, r3, r2, r3
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051c4:	441c      	add	r4, r3
 80051c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ca:	2200      	movs	r2, #0
 80051cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80051ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80051d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	1891      	adds	r1, r2, r2
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	415b      	adcs	r3, r3
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e4:	4641      	mov	r1, r8
 80051e6:	1851      	adds	r1, r2, r1
 80051e8:	6039      	str	r1, [r7, #0]
 80051ea:	4649      	mov	r1, r9
 80051ec:	414b      	adcs	r3, r1
 80051ee:	607b      	str	r3, [r7, #4]
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051fc:	4659      	mov	r1, fp
 80051fe:	00cb      	lsls	r3, r1, #3
 8005200:	4651      	mov	r1, sl
 8005202:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005206:	4651      	mov	r1, sl
 8005208:	00ca      	lsls	r2, r1, #3
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	4603      	mov	r3, r0
 8005210:	4642      	mov	r2, r8
 8005212:	189b      	adds	r3, r3, r2
 8005214:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005216:	464b      	mov	r3, r9
 8005218:	460a      	mov	r2, r1
 800521a:	eb42 0303 	adc.w	r3, r2, r3
 800521e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	663b      	str	r3, [r7, #96]	@ 0x60
 800522a:	667a      	str	r2, [r7, #100]	@ 0x64
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005238:	4649      	mov	r1, r9
 800523a:	008b      	lsls	r3, r1, #2
 800523c:	4641      	mov	r1, r8
 800523e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005242:	4641      	mov	r1, r8
 8005244:	008a      	lsls	r2, r1, #2
 8005246:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800524a:	f7fa ffd7 	bl	80001fc <__aeabi_uldivmod>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	4b0d      	ldr	r3, [pc, #52]	@ (8005288 <UART_SetConfig+0x4e4>)
 8005254:	fba3 1302 	umull	r1, r3, r3, r2
 8005258:	095b      	lsrs	r3, r3, #5
 800525a:	2164      	movs	r1, #100	@ 0x64
 800525c:	fb01 f303 	mul.w	r3, r1, r3
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	011b      	lsls	r3, r3, #4
 8005264:	3332      	adds	r3, #50	@ 0x32
 8005266:	4a08      	ldr	r2, [pc, #32]	@ (8005288 <UART_SetConfig+0x4e4>)
 8005268:	fba2 2303 	umull	r2, r3, r2, r3
 800526c:	095b      	lsrs	r3, r3, #5
 800526e:	f003 020f 	and.w	r2, r3, #15
 8005272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4422      	add	r2, r4
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005282:	46bd      	mov	sp, r7
 8005284:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005288:	51eb851f 	.word	0x51eb851f

0800528c <__itoa>:
 800528c:	1e93      	subs	r3, r2, #2
 800528e:	2b22      	cmp	r3, #34	@ 0x22
 8005290:	b510      	push	{r4, lr}
 8005292:	460c      	mov	r4, r1
 8005294:	d904      	bls.n	80052a0 <__itoa+0x14>
 8005296:	2300      	movs	r3, #0
 8005298:	700b      	strb	r3, [r1, #0]
 800529a:	461c      	mov	r4, r3
 800529c:	4620      	mov	r0, r4
 800529e:	bd10      	pop	{r4, pc}
 80052a0:	2a0a      	cmp	r2, #10
 80052a2:	d109      	bne.n	80052b8 <__itoa+0x2c>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	da07      	bge.n	80052b8 <__itoa+0x2c>
 80052a8:	232d      	movs	r3, #45	@ 0x2d
 80052aa:	700b      	strb	r3, [r1, #0]
 80052ac:	4240      	negs	r0, r0
 80052ae:	2101      	movs	r1, #1
 80052b0:	4421      	add	r1, r4
 80052b2:	f000 f805 	bl	80052c0 <__utoa>
 80052b6:	e7f1      	b.n	800529c <__itoa+0x10>
 80052b8:	2100      	movs	r1, #0
 80052ba:	e7f9      	b.n	80052b0 <__itoa+0x24>

080052bc <itoa>:
 80052bc:	f7ff bfe6 	b.w	800528c <__itoa>

080052c0 <__utoa>:
 80052c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c2:	4c1f      	ldr	r4, [pc, #124]	@ (8005340 <__utoa+0x80>)
 80052c4:	b08b      	sub	sp, #44	@ 0x2c
 80052c6:	4605      	mov	r5, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	466e      	mov	r6, sp
 80052cc:	f104 0c20 	add.w	ip, r4, #32
 80052d0:	6820      	ldr	r0, [r4, #0]
 80052d2:	6861      	ldr	r1, [r4, #4]
 80052d4:	4637      	mov	r7, r6
 80052d6:	c703      	stmia	r7!, {r0, r1}
 80052d8:	3408      	adds	r4, #8
 80052da:	4564      	cmp	r4, ip
 80052dc:	463e      	mov	r6, r7
 80052de:	d1f7      	bne.n	80052d0 <__utoa+0x10>
 80052e0:	7921      	ldrb	r1, [r4, #4]
 80052e2:	7139      	strb	r1, [r7, #4]
 80052e4:	1e91      	subs	r1, r2, #2
 80052e6:	6820      	ldr	r0, [r4, #0]
 80052e8:	6038      	str	r0, [r7, #0]
 80052ea:	2922      	cmp	r1, #34	@ 0x22
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	d904      	bls.n	80052fc <__utoa+0x3c>
 80052f2:	7019      	strb	r1, [r3, #0]
 80052f4:	460b      	mov	r3, r1
 80052f6:	4618      	mov	r0, r3
 80052f8:	b00b      	add	sp, #44	@ 0x2c
 80052fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fc:	1e58      	subs	r0, r3, #1
 80052fe:	4684      	mov	ip, r0
 8005300:	fbb5 f7f2 	udiv	r7, r5, r2
 8005304:	fb02 5617 	mls	r6, r2, r7, r5
 8005308:	3628      	adds	r6, #40	@ 0x28
 800530a:	446e      	add	r6, sp
 800530c:	460c      	mov	r4, r1
 800530e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005312:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005316:	462e      	mov	r6, r5
 8005318:	42b2      	cmp	r2, r6
 800531a:	f101 0101 	add.w	r1, r1, #1
 800531e:	463d      	mov	r5, r7
 8005320:	d9ee      	bls.n	8005300 <__utoa+0x40>
 8005322:	2200      	movs	r2, #0
 8005324:	545a      	strb	r2, [r3, r1]
 8005326:	1919      	adds	r1, r3, r4
 8005328:	1aa5      	subs	r5, r4, r2
 800532a:	42aa      	cmp	r2, r5
 800532c:	dae3      	bge.n	80052f6 <__utoa+0x36>
 800532e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005332:	780e      	ldrb	r6, [r1, #0]
 8005334:	7006      	strb	r6, [r0, #0]
 8005336:	3201      	adds	r2, #1
 8005338:	f801 5901 	strb.w	r5, [r1], #-1
 800533c:	e7f4      	b.n	8005328 <__utoa+0x68>
 800533e:	bf00      	nop
 8005340:	080054c2 	.word	0x080054c2

08005344 <memset>:
 8005344:	4402      	add	r2, r0
 8005346:	4603      	mov	r3, r0
 8005348:	4293      	cmp	r3, r2
 800534a:	d100      	bne.n	800534e <memset+0xa>
 800534c:	4770      	bx	lr
 800534e:	f803 1b01 	strb.w	r1, [r3], #1
 8005352:	e7f9      	b.n	8005348 <memset+0x4>

08005354 <strcat>:
 8005354:	b510      	push	{r4, lr}
 8005356:	4602      	mov	r2, r0
 8005358:	7814      	ldrb	r4, [r2, #0]
 800535a:	4613      	mov	r3, r2
 800535c:	3201      	adds	r2, #1
 800535e:	2c00      	cmp	r4, #0
 8005360:	d1fa      	bne.n	8005358 <strcat+0x4>
 8005362:	3b01      	subs	r3, #1
 8005364:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005368:	f803 2f01 	strb.w	r2, [r3, #1]!
 800536c:	2a00      	cmp	r2, #0
 800536e:	d1f9      	bne.n	8005364 <strcat+0x10>
 8005370:	bd10      	pop	{r4, pc}
	...

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4d0d      	ldr	r5, [pc, #52]	@ (80053ac <__libc_init_array+0x38>)
 8005378:	4c0d      	ldr	r4, [pc, #52]	@ (80053b0 <__libc_init_array+0x3c>)
 800537a:	1b64      	subs	r4, r4, r5
 800537c:	10a4      	asrs	r4, r4, #2
 800537e:	2600      	movs	r6, #0
 8005380:	42a6      	cmp	r6, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	4d0b      	ldr	r5, [pc, #44]	@ (80053b4 <__libc_init_array+0x40>)
 8005386:	4c0c      	ldr	r4, [pc, #48]	@ (80053b8 <__libc_init_array+0x44>)
 8005388:	f000 f818 	bl	80053bc <_init>
 800538c:	1b64      	subs	r4, r4, r5
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	2600      	movs	r6, #0
 8005392:	42a6      	cmp	r6, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f855 3b04 	ldr.w	r3, [r5], #4
 800539c:	4798      	blx	r3
 800539e:	3601      	adds	r6, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a6:	4798      	blx	r3
 80053a8:	3601      	adds	r6, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	080054f0 	.word	0x080054f0
 80053b0:	080054f0 	.word	0x080054f0
 80053b4:	080054f0 	.word	0x080054f0
 80053b8:	080054f4 	.word	0x080054f4

080053bc <_init>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr

080053c8 <_fini>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	bf00      	nop
 80053cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ce:	bc08      	pop	{r3}
 80053d0:	469e      	mov	lr, r3
 80053d2:	4770      	bx	lr
