
SPI_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a5c  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005c08  08005c08  00006c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c38  08005c38  00007018  2**0
                  CONTENTS
  4 .ARM          00000008  08005c38  08005c38  00006c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c40  08005c40  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c40  08005c40  00006c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c44  08005c44  00006c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005c48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          00000874  20000018  20000018  00007018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000088c  2000088c  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000171ae  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f65  00000000  00000000  0001e1f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  00021160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000efa  00000000  00000000  00022498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002718e  00000000  00000000  00023392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017bda  00000000  00000000  0004a520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6535  00000000  00000000  000620fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014862f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000519c  00000000  00000000  00148674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  0014d810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005bf0 	.word	0x08005bf0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08005bf0 	.word	0x08005bf0

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:

#define BME280
#define LCD

int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f001 f9af 	bl	8001844 <HAL_Init>

  /* USER CODE BEGIN Init */
  RTC_TimeTypeDef sTime = {0};
 80004e6:	f107 0308 	add.w	r3, r7, #8
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80004f6:	2300      	movs	r3, #0
 80004f8:	607b      	str	r3, [r7, #4]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fa:	f000 f871 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ETH_Init();
 80004fe:	f000 f8db 	bl	80006b8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000502:	f000 f9f5 	bl	80008f0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000506:	f000 fa1d 	bl	8000944 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 800050a:	f000 f923 	bl	8000754 <MX_I2C1_Init>
  MX_RTC_Init();
 800050e:	f000 f995 	bl	800083c <MX_RTC_Init>

  // Init GPIO & SPI
  MX_GPIO_Init();
 8000512:	f000 fd5b 	bl	8000fcc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000516:	f000 fd23 	bl	8000f60 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  /* Initialize BSP Led for LED1, LED2, LED3 */
  BSP_LED_Init(LED1);
 800051a:	2000      	movs	r0, #0
 800051c:	f001 f928 	bl	8001770 <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8000520:	2001      	movs	r0, #1
 8000522:	f001 f925 	bl	8001770 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000526:	2002      	movs	r0, #2
 8000528:	f001 f922 	bl	8001770 <BSP_LED_Init>

#ifdef BME280
  BME280_init();
 800052c:	f000 ff30 	bl	8001390 <BME280_init>
  #endif

  // first SPI try before main loop
  TEST_SPI();
 8000530:	f000 ffb2 	bl	8001498 <TEST_SPI>

#ifdef LCD
  Init_Lcd();
 8000534:	f000 fff8 	bl	8001528 <Init_Lcd>
#endif

  for (int i = 0; i <= 3; i++)
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	e008      	b.n	8000550 <main+0x74>
  {
      BSP_LED_Toggle(LED1); // init LCD OK
 800053e:	2000      	movs	r0, #0
 8000540:	f001 f966 	bl	8001810 <BSP_LED_Toggle>
      HAL_Delay(100);
 8000544:	2064      	movs	r0, #100	@ 0x64
 8000546:	f001 f9ef 	bl	8001928 <HAL_Delay>
  for (int i = 0; i <= 3; i++)
 800054a:	69fb      	ldr	r3, [r7, #28]
 800054c:	3301      	adds	r3, #1
 800054e:	61fb      	str	r3, [r7, #28]
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	2b03      	cmp	r3, #3
 8000554:	ddf3      	ble.n	800053e <main+0x62>
  while (1)
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */
	  TEST_SPI();
 8000556:	f000 ff9f 	bl	8001498 <TEST_SPI>

#ifdef LCD
	  HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	2201      	movs	r2, #1
 8000560:	4619      	mov	r1, r3
 8000562:	481d      	ldr	r0, [pc, #116]	@ (80005d8 <main+0xfc>)
 8000564:	f003 fd8f 	bl	8004086 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2201      	movs	r2, #1
 800056c:	4619      	mov	r1, r3
 800056e:	481a      	ldr	r0, [pc, #104]	@ (80005d8 <main+0xfc>)
 8000570:	f003 fe6b 	bl	800424a <HAL_RTC_GetDate>

	  PosCaracHLcd(0);
 8000574:	2000      	movs	r0, #0
 8000576:	f001 f8c0 	bl	80016fa <PosCaracHLcd>
	  SacaTextoLcd((uint8_t *)"TIME:");
 800057a:	4818      	ldr	r0, [pc, #96]	@ (80005dc <main+0x100>)
 800057c:	f001 f8a8 	bl	80016d0 <SacaTextoLcd>
	  DatoBCD(sTime.Hours);
 8000580:	7a3b      	ldrb	r3, [r7, #8]
 8000582:	4618      	mov	r0, r3
 8000584:	f001 f84d 	bl	8001622 <DatoBCD>
	  DatoLcd(':');
 8000588:	203a      	movs	r0, #58	@ 0x3a
 800058a:	f001 f82c 	bl	80015e6 <DatoLcd>
	  DatoBCD(sTime.Minutes);
 800058e:	7a7b      	ldrb	r3, [r7, #9]
 8000590:	4618      	mov	r0, r3
 8000592:	f001 f846 	bl	8001622 <DatoBCD>
	  DatoLcd(':');
 8000596:	203a      	movs	r0, #58	@ 0x3a
 8000598:	f001 f825 	bl	80015e6 <DatoLcd>
	  DatoBCD(sTime.Seconds);
 800059c:	7abb      	ldrb	r3, [r7, #10]
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f83f 	bl	8001622 <DatoBCD>

	  PosCaracLLcd(0);
 80005a4:	2000      	movs	r0, #0
 80005a6:	f001 f8b8 	bl	800171a <PosCaracLLcd>
	  DatoBCD(sDate.Date);
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 f838 	bl	8001622 <DatoBCD>
	  DatoLcd('/');
 80005b2:	202f      	movs	r0, #47	@ 0x2f
 80005b4:	f001 f817 	bl	80015e6 <DatoLcd>
	  DatoBCD(sDate.Month);
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 f831 	bl	8001622 <DatoBCD>
	  DatoLcd('/');
 80005c0:	202f      	movs	r0, #47	@ 0x2f
 80005c2:	f001 f810 	bl	80015e6 <DatoLcd>
	  DatoBCD(sDate.Year);
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 f82a 	bl	8001622 <DatoBCD>

	  BSP_LED_Toggle(LED1); // looping signal
 80005ce:	2000      	movs	r0, #0
 80005d0:	f001 f91e 	bl	8001810 <BSP_LED_Toggle>
	  TEST_SPI();
 80005d4:	bf00      	nop
 80005d6:	e7be      	b.n	8000556 <main+0x7a>
 80005d8:	200002b0 	.word	0x200002b0
 80005dc:	08005c08 	.word	0x08005c08

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	@ 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	@ 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fad1 	bl	8005b96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	4a28      	ldr	r2, [pc, #160]	@ (80006b0 <SystemClock_Config+0xd0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	@ 0x40
 8000614:	4b26      	ldr	r3, [pc, #152]	@ (80006b0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	@ (80006b4 <SystemClock_Config+0xd4>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800063c:	2309      	movs	r3, #9
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000640:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000646:	2301      	movs	r3, #1
 8000648:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064a:	2302      	movs	r3, #2
 800064c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000658:	23a8      	movs	r3, #168	@ 0xa8
 800065a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065c:	2302      	movs	r3, #2
 800065e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000660:	2307      	movs	r3, #7
 8000662:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000664:	f107 0320 	add.w	r3, r7, #32
 8000668:	4618      	mov	r0, r3
 800066a:	f002 fd97 	bl	800319c <HAL_RCC_OscConfig>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000674:	f000 f994 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2105      	movs	r1, #5
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fff8 	bl	800368c <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006a2:	f000 f97d 	bl	80009a0 <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <MX_ETH_Init+0x84>)
 80006be:	4a20      	ldr	r2, [pc, #128]	@ (8000740 <MX_ETH_Init+0x88>)
 80006c0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006c2:	4b20      	ldr	r3, [pc, #128]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006d0:	22e1      	movs	r2, #225	@ 0xe1
 80006d2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006da:	4b1a      	ldr	r3, [pc, #104]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006e0:	4b18      	ldr	r3, [pc, #96]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e6:	4b15      	ldr	r3, [pc, #84]	@ (800073c <MX_ETH_Init+0x84>)
 80006e8:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <MX_ETH_Init+0x8c>)
 80006ea:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006ec:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_ETH_Init+0x84>)
 80006ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006f2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_ETH_Init+0x84>)
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <MX_ETH_Init+0x90>)
 80006f8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <MX_ETH_Init+0x84>)
 80006fc:	4a13      	ldr	r2, [pc, #76]	@ (800074c <MX_ETH_Init+0x94>)
 80006fe:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_ETH_Init+0x84>)
 8000702:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000706:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <MX_ETH_Init+0x84>)
 800070a:	f001 fa17 	bl	8001b3c <HAL_ETH_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000714:	f000 f944 	bl	80009a0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000718:	2238      	movs	r2, #56	@ 0x38
 800071a:	2100      	movs	r1, #0
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <MX_ETH_Init+0x98>)
 800071e:	f005 fa3a 	bl	8005b96 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_ETH_Init+0x98>)
 8000724:	2221      	movs	r2, #33	@ 0x21
 8000726:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_ETH_Init+0x98>)
 800072a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800072e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000730:	4b07      	ldr	r3, [pc, #28]	@ (8000750 <MX_ETH_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200001ac 	.word	0x200001ac
 8000740:	40028000 	.word	0x40028000
 8000744:	200007fc 	.word	0x200007fc
 8000748:	2000010c 	.word	0x2000010c
 800074c:	2000006c 	.word	0x2000006c
 8000750:	20000034 	.word	0x20000034

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800075a:	4b33      	ldr	r3, [pc, #204]	@ (8000828 <MX_I2C1_Init+0xd4>)
 800075c:	4a33      	ldr	r2, [pc, #204]	@ (800082c <MX_I2C1_Init+0xd8>)
 800075e:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000760:	4b31      	ldr	r3, [pc, #196]	@ (8000828 <MX_I2C1_Init+0xd4>)
 8000762:	4a33      	ldr	r2, [pc, #204]	@ (8000830 <MX_I2C1_Init+0xdc>)
 8000764:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000766:	4b30      	ldr	r3, [pc, #192]	@ (8000828 <MX_I2C1_Init+0xd4>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076c:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <MX_I2C1_Init+0xd4>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000772:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <MX_I2C1_Init+0xd4>)
 8000774:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000778:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800077a:	4b2b      	ldr	r3, [pc, #172]	@ (8000828 <MX_I2C1_Init+0xd4>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000780:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <MX_I2C1_Init+0xd4>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000786:	4b28      	ldr	r3, [pc, #160]	@ (8000828 <MX_I2C1_Init+0xd4>)
 8000788:	2200      	movs	r2, #0
 800078a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <MX_I2C1_Init+0xd4>)
 800078e:	2200      	movs	r2, #0
 8000790:	621a      	str	r2, [r3, #32]

  // I2C init code
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <MX_I2C1_Init+0xe0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a26      	ldr	r2, [pc, #152]	@ (8000834 <MX_I2C1_Init+0xe0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MX_I2C1_Init+0xe0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b4:	2312      	movs	r3, #18
 80007b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007c0:	2304      	movs	r3, #4
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	481b      	ldr	r0, [pc, #108]	@ (8000838 <MX_I2C1_Init+0xe4>)
 80007cc:	f001 fcde 	bl	800218c <HAL_GPIO_Init>

	 /* Peripheral clock enable */
  __HAL_RCC_I2C1_CLK_ENABLE();
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_I2C1_Init+0xe0>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d8:	4a16      	ldr	r2, [pc, #88]	@ (8000834 <MX_I2C1_Init+0xe0>)
 80007da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007de:	6413      	str	r3, [r2, #64]	@ 0x40
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_I2C1_Init+0xe0>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ec:	480e      	ldr	r0, [pc, #56]	@ (8000828 <MX_I2C1_Init+0xd4>)
 80007ee:	f001 fead 	bl	800254c <HAL_I2C_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0xa8>
  {
    Error_Handler();
 80007f8:	f000 f8d2 	bl	80009a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	480a      	ldr	r0, [pc, #40]	@ (8000828 <MX_I2C1_Init+0xd4>)
 8000800:	f002 fb41 	bl	8002e86 <HAL_I2CEx_ConfigAnalogFilter>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_I2C1_Init+0xba>
  {
    Error_Handler();
 800080a:	f000 f8c9 	bl	80009a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800080e:	2100      	movs	r1, #0
 8000810:	4805      	ldr	r0, [pc, #20]	@ (8000828 <MX_I2C1_Init+0xd4>)
 8000812:	f002 fb74 	bl	8002efe <HAL_I2CEx_ConfigDigitalFilter>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_I2C1_Init+0xcc>
  {
    Error_Handler();
 800081c:	f000 f8c0 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	3720      	adds	r7, #32
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000025c 	.word	0x2000025c
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0
 8000834:	40023800 	.word	0x40023800
 8000838:	40020400 	.word	0x40020400

0800083c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 0 */

  /* USER CODE BEGIN RTC_Init 1 */

  RTC_TimeTypeDef sTime = {0}; // key user variables for RTC date
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000850:	2300      	movs	r3, #0
 8000852:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000854:	4b24      	ldr	r3, [pc, #144]	@ (80008e8 <MX_RTC_Init+0xac>)
 8000856:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <MX_RTC_Init+0xb0>)
 8000858:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <MX_RTC_Init+0xac>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000860:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_RTC_Init+0xac>)
 8000862:	227f      	movs	r2, #127	@ 0x7f
 8000864:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <MX_RTC_Init+0xac>)
 8000868:	22ff      	movs	r2, #255	@ 0xff
 800086a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800086c:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_RTC_Init+0xac>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000872:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <MX_RTC_Init+0xac>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000878:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_RTC_Init+0xac>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800087e:	481a      	ldr	r0, [pc, #104]	@ (80008e8 <MX_RTC_Init+0xac>)
 8000880:	f003 fae4 	bl	8003e4c <HAL_RTC_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800088a:	f000 f889 	bl	80009a0 <Error_Handler>
  // Important RTC init code.
  /*
   * * Initialize RTC and set the Time and Date
  */

  sTime.Hours = 0x01;
 800088e:	2301      	movs	r3, #1
 8000890:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x20;
 8000892:	2320      	movs	r3, #32
 8000894:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x00;
 8000896:	2300      	movs	r3, #0
 8000898:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800089a:	2300      	movs	r3, #0
 800089c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2201      	movs	r2, #1
 80008a6:	4619      	mov	r1, r3
 80008a8:	480f      	ldr	r0, [pc, #60]	@ (80008e8 <MX_RTC_Init+0xac>)
 80008aa:	f003 fb52 	bl	8003f52 <HAL_RTC_SetTime>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008b4:	f000 f874 	bl	80009a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80008b8:	2301      	movs	r3, #1
 80008ba:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80008bc:	2308      	movs	r3, #8
 80008be:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x05;
 80008c0:	2305      	movs	r3, #5
 80008c2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 80008c4:	2324      	movs	r3, #36	@ 0x24
 80008c6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	2201      	movs	r2, #1
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <MX_RTC_Init+0xac>)
 80008d0:	f003 fc37 	bl	8004142 <HAL_RTC_SetDate>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80008da:	f000 f861 	bl	80009a0 <Error_Handler>
  }

  /* USER CODE END RTC_Init 2 */
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	200002b0 	.word	0x200002b0
 80008ec:	40002800 	.word	0x40002800

080008f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008f4:	4b11      	ldr	r3, [pc, #68]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <MX_USART3_UART_Init+0x50>)
 80008f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008fa:	4b10      	ldr	r3, [pc, #64]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 80008fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000900:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000908:	4b0c      	ldr	r3, [pc, #48]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000914:	4b09      	ldr	r3, [pc, #36]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 8000916:	220c      	movs	r2, #12
 8000918:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000920:	4b06      	ldr	r3, [pc, #24]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_USART3_UART_Init+0x4c>)
 8000928:	f004 fb72 	bl	8005010 <HAL_UART_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000932:	f000 f835 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200002d0 	.word	0x200002d0
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800094e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000952:	2204      	movs	r2, #4
 8000954:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000958:	2202      	movs	r2, #2
 800095a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000962:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000964:	2202      	movs	r2, #2
 8000966:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096a:	2201      	movs	r2, #1
 800096c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2201      	movs	r2, #1
 800097e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	@ (800099c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	f002 faf8 	bl	8002f7c <HAL_PCD_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f805 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000318 	.word	0x20000318

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08e      	sub	sp, #56	@ 0x38
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a55      	ldr	r2, [pc, #340]	@ (8000b70 <HAL_ETH_MspInit+0x174>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	f040 80a4 	bne.w	8000b68 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
 8000a24:	4b53      	ldr	r3, [pc, #332]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a28:	4a52      	ldr	r2, [pc, #328]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a30:	4b50      	ldr	r3, [pc, #320]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a38:	623b      	str	r3, [r7, #32]
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
 8000a40:	4b4c      	ldr	r3, [pc, #304]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a44:	4a4b      	ldr	r2, [pc, #300]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4c:	4b49      	ldr	r3, [pc, #292]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	4b45      	ldr	r3, [pc, #276]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a60:	4a44      	ldr	r2, [pc, #272]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a68:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	4b3e      	ldr	r3, [pc, #248]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7c:	4a3d      	ldr	r2, [pc, #244]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a84:	4b3b      	ldr	r3, [pc, #236]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	4b37      	ldr	r3, [pc, #220]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a98:	4a36      	ldr	r2, [pc, #216]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa0:	4b34      	ldr	r3, [pc, #208]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	4b30      	ldr	r3, [pc, #192]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000ab6:	f043 0302 	orr.w	r3, r3, #2
 8000aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000abc:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	4b29      	ldr	r3, [pc, #164]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad0:	4a28      	ldr	r2, [pc, #160]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000ad2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ad6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad8:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <HAL_ETH_MspInit+0x178>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ae4:	2332      	movs	r3, #50	@ 0x32
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af4:	230b      	movs	r3, #11
 8000af6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afc:	4619      	mov	r1, r3
 8000afe:	481e      	ldr	r0, [pc, #120]	@ (8000b78 <HAL_ETH_MspInit+0x17c>)
 8000b00:	f001 fb44 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b04:	2386      	movs	r3, #134	@ 0x86
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b10:	2303      	movs	r3, #3
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b14:	230b      	movs	r3, #11
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4817      	ldr	r0, [pc, #92]	@ (8000b7c <HAL_ETH_MspInit+0x180>)
 8000b20:	f001 fb34 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b36:	230b      	movs	r3, #11
 8000b38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480f      	ldr	r0, [pc, #60]	@ (8000b80 <HAL_ETH_MspInit+0x184>)
 8000b42:	f001 fb23 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b46:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b58:	230b      	movs	r3, #11
 8000b5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4808      	ldr	r0, [pc, #32]	@ (8000b84 <HAL_ETH_MspInit+0x188>)
 8000b64:	f001 fb12 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3738      	adds	r7, #56	@ 0x38
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40028000 	.word	0x40028000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020800 	.word	0x40020800
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020400 	.word	0x40020400
 8000b84:	40021800 	.word	0x40021800

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_I2C_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12c      	bne.n	8000c04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bb4:	f043 0302 	orr.w	r3, r3, #2
 8000bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bc6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <HAL_I2C_MspInit+0x8c>)
 8000be4:	f001 fad2 	bl	800218c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	4a07      	ldr	r2, [pc, #28]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bf2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_I2C_MspInit+0x88>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	@ 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020400 	.word	0x40020400

08000c18 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08e      	sub	sp, #56	@ 0x38
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c20:	f107 0308 	add.w	r3, r7, #8
 8000c24:	2230      	movs	r2, #48	@ 0x30
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 ffb4 	bl	8005b96 <memset>
  if(hrtc->Instance==RTC)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a0c      	ldr	r2, [pc, #48]	@ (8000c64 <HAL_RTC_MspInit+0x4c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d111      	bne.n	8000c5c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c38:	2320      	movs	r3, #32
 8000c3a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c42:	f107 0308 	add.w	r3, r7, #8
 8000c46:	4618      	mov	r0, r3
 8000c48:	f002 ff40 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000c52:	f7ff fea5 	bl	80009a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <HAL_RTC_MspInit+0x50>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3738      	adds	r7, #56	@ 0x38
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40002800 	.word	0x40002800
 8000c68:	42470e3c 	.word	0x42470e3c

08000c6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a28      	ldr	r2, [pc, #160]	@ (8000d2c <HAL_SPI_MspInit+0xc0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d149      	bne.n	8000d22 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c96:	4a26      	ldr	r2, [pc, #152]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000c98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c9e:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a18      	ldr	r2, [pc, #96]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_SPI_MspInit+0xc4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ce2:	2360      	movs	r3, #96	@ 0x60
 8000ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cf2:	2305      	movs	r3, #5
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0314 	add.w	r3, r7, #20
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480d      	ldr	r0, [pc, #52]	@ (8000d34 <HAL_SPI_MspInit+0xc8>)
 8000cfe:	f001 fa45 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d02:	2320      	movs	r3, #32
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d12:	2305      	movs	r3, #5
 8000d14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4806      	ldr	r0, [pc, #24]	@ (8000d38 <HAL_SPI_MspInit+0xcc>)
 8000d1e:	f001 fa35 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3728      	adds	r7, #40	@ 0x28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40013000 	.word	0x40013000
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020400 	.word	0x40020400

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	@ 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a19      	ldr	r2, [pc, #100]	@ (8000dc0 <HAL_UART_MspInit+0x84>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12c      	bne.n	8000db8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	4b18      	ldr	r3, [pc, #96]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a17      	ldr	r2, [pc, #92]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_UART_MspInit+0x88>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da8:	2307      	movs	r3, #7
 8000daa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	@ (8000dc8 <HAL_UART_MspInit+0x8c>)
 8000db4:	f001 f9ea 	bl	800218c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	@ 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dec:	d13f      	bne.n	8000e6e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <HAL_PCD_MspInit+0xac>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a20      	ldr	r2, [pc, #128]	@ (8000e78 <HAL_PCD_MspInit+0xac>)
 8000df8:	f043 0301 	orr.w	r3, r3, #1
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <HAL_PCD_MspInit+0xac>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e0a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0314 	add.w	r3, r7, #20
 8000e24:	4619      	mov	r1, r3
 8000e26:	4815      	ldr	r0, [pc, #84]	@ (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000e28:	f001 f9b0 	bl	800218c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	480e      	ldr	r0, [pc, #56]	@ (8000e7c <HAL_PCD_MspInit+0xb0>)
 8000e42:	f001 f9a3 	bl	800218c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <HAL_PCD_MspInit+0xac>)
 8000e48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e78 <HAL_PCD_MspInit+0xac>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e50:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e52:	2300      	movs	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <HAL_PCD_MspInit+0xac>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e5a:	4a07      	ldr	r2, [pc, #28]	@ (8000e78 <HAL_PCD_MspInit+0xac>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_PCD_MspInit+0xac>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	@ 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 fd07 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f08:	f7ff ffea 	bl	8000ee0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	@ (8000f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	@ (8000f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f32:	f004 fe39 	bl	8005ba8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f36:	f7ff fad1 	bl	80004dc <main>
  bx  lr    
 8000f3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f3c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000f48:	08005c48 	.word	0x08005c48
  ldr r2, =_sbss
 8000f4c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000f50:	2000088c 	.word	0x2000088c

08000f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC_IRQHandler>

08000f56 <BME280_Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void BME280_Error_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    while (1)
 8000f5a:	bf00      	nop
 8000f5c:	e7fd      	b.n	8000f5a <BME280_Error_Handler+0x4>
	...

08000f60 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
void MX_SPI1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8000f64:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f66:	4a18      	ldr	r2, [pc, #96]	@ (8000fc8 <MX_SPI1_Init+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f70:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f90:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f94:	2238      	movs	r2, #56	@ 0x38
 8000f96:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000fac:	220a      	movs	r2, #10
 8000fae:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_SPI1_Init+0x64>)
 8000fb2:	f003 fa57 	bl	8004464 <HAL_SPI_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_SPI1_Init+0x60>
    {
        BME280_Error_Handler();
 8000fbc:	f7ff ffcb 	bl	8000f56 <BME280_Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000804 	.word	0x20000804
 8000fc8:	40013000 	.word	0x40013000

08000fcc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08c      	sub	sp, #48	@ 0x30
 8000fd0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
 8000fe0:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a4b      	ldr	r2, [pc, #300]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000fec:	f043 0304 	orr.w	r3, r3, #4
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b49      	ldr	r3, [pc, #292]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0304 	and.w	r3, r3, #4
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	4b45      	ldr	r3, [pc, #276]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a44      	ldr	r2, [pc, #272]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001008:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b42      	ldr	r3, [pc, #264]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b3e      	ldr	r3, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a3d      	ldr	r2, [pc, #244]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001024:	f043 0301 	orr.w	r3, r3, #1
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b3b      	ldr	r3, [pc, #236]	@ (8001118 <MX_GPIO_Init+0x14c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <MX_GPIO_Init+0x14c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a36      	ldr	r2, [pc, #216]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b30      	ldr	r3, [pc, #192]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a2f      	ldr	r2, [pc, #188]	@ (8001118 <MX_GPIO_Init+0x14c>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b2d      	ldr	r3, [pc, #180]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	4b29      	ldr	r3, [pc, #164]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	4a28      	ldr	r2, [pc, #160]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800107c:	6313      	str	r3, [r2, #48]	@ 0x30
 800107e:	4b26      	ldr	r3, [pc, #152]	@ (8001118 <MX_GPIO_Init+0x14c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f244 0189 	movw	r1, #16521	@ 0x4089
 8001090:	4822      	ldr	r0, [pc, #136]	@ (800111c <MX_GPIO_Init+0x150>)
 8001092:	f001 fa27 	bl	80024e4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2140      	movs	r1, #64	@ 0x40
 800109a:	4821      	ldr	r0, [pc, #132]	@ (8001120 <MX_GPIO_Init+0x154>)
 800109c:	f001 fa22 	bl	80024e4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010a6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 031c 	add.w	r3, r7, #28
 80010b4:	4619      	mov	r1, r3
 80010b6:	481b      	ldr	r0, [pc, #108]	@ (8001124 <MX_GPIO_Init+0x158>)
 80010b8:	f001 f868 	bl	800218c <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin CS_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | CS_Pin | LD2_Pin;
 80010bc:	f244 0389 	movw	r3, #16521	@ 0x4089
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	f107 031c 	add.w	r3, r7, #28
 80010d2:	4619      	mov	r1, r3
 80010d4:	4811      	ldr	r0, [pc, #68]	@ (800111c <MX_GPIO_Init+0x150>)
 80010d6:	f001 f859 	bl	800218c <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80010da:	2340      	movs	r3, #64	@ 0x40
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	2301      	movs	r3, #1
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	480b      	ldr	r0, [pc, #44]	@ (8001120 <MX_GPIO_Init+0x154>)
 80010f2:	f001 f84b 	bl	800218c <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80010f6:	2380      	movs	r3, #128	@ 0x80
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <MX_GPIO_Init+0x154>)
 800110a:	f001 f83f 	bl	800218c <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	@ 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40020400 	.word	0x40020400
 8001120:	40021800 	.word	0x40021800
 8001124:	40020800 	.word	0x40020800

08001128 <SPI_Write>:

static void SPI_Write(uint8_t reg, uint8_t *data, uint16_t size)
{                                    // 6.3.2 SPI write
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
 8001134:	4613      	mov	r3, r2
 8001136:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg & 0x7F; // Write command -> applies mask 0x7F = 0b01111111 -> Most Significant Bit (bit number 7) = 0
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800113e:	b2db      	uxtb	r3, r3
 8001140:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2108      	movs	r1, #8
 8001146:	480d      	ldr	r0, [pc, #52]	@ (800117c <SPI_Write+0x54>)
 8001148:	f001 f9cc 	bl	80024e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 800114c:	f107 010f 	add.w	r1, r7, #15
 8001150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001154:	2201      	movs	r2, #1
 8001156:	480a      	ldr	r0, [pc, #40]	@ (8001180 <SPI_Write+0x58>)
 8001158:	f003 fa0d 	bl	8004576 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY);
 800115c:	88ba      	ldrh	r2, [r7, #4]
 800115e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001162:	6839      	ldr	r1, [r7, #0]
 8001164:	4806      	ldr	r0, [pc, #24]	@ (8001180 <SPI_Write+0x58>)
 8001166:	f003 fa06 	bl	8004576 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800116a:	2201      	movs	r2, #1
 800116c:	2108      	movs	r1, #8
 800116e:	4803      	ldr	r0, [pc, #12]	@ (800117c <SPI_Write+0x54>)
 8001170:	f001 f9b8 	bl	80024e4 <HAL_GPIO_WritePin>
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40020400 	.word	0x40020400
 8001180:	20000804 	.word	0x20000804

08001184 <SPI_Read>:

static void SPI_Read(uint8_t reg, uint8_t *data, uint16_t size)
{                                    // 6.3.1 SPI read
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	6039      	str	r1, [r7, #0]
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	80bb      	strh	r3, [r7, #4]
    uint8_t regAddress = reg | 0x80; // Read command -> applies mask 0x80 = 0b10000000 -> Most Significant Bit (bit number 7) = 1
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800119a:	b2db      	uxtb	r3, r3
 800119c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2108      	movs	r1, #8
 80011a2:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <SPI_Read+0x54>)
 80011a4:	f001 f99e 	bl	80024e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), TIMEOUT);
 80011a8:	f107 010f 	add.w	r1, r7, #15
 80011ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b0:	2201      	movs	r2, #1
 80011b2:	480a      	ldr	r0, [pc, #40]	@ (80011dc <SPI_Read+0x58>)
 80011b4:	f003 f9df 	bl	8004576 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, data, size, TIMEOUT);
 80011b8:	88ba      	ldrh	r2, [r7, #4]
 80011ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011be:	6839      	ldr	r1, [r7, #0]
 80011c0:	4806      	ldr	r0, [pc, #24]	@ (80011dc <SPI_Read+0x58>)
 80011c2:	f003 fb1b 	bl	80047fc <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80011c6:	2201      	movs	r2, #1
 80011c8:	2108      	movs	r1, #8
 80011ca:	4803      	ldr	r0, [pc, #12]	@ (80011d8 <SPI_Read+0x54>)
 80011cc:	f001 f98a 	bl	80024e4 <HAL_GPIO_WritePin>
}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40020400 	.word	0x40020400
 80011dc:	20000804 	.word	0x20000804

080011e0 <trimmingParametersRead>:

static float temp, hum;

// 4.2.2 Trimming parameter readout
static void trimmingParametersRead(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	@ 0x28
 80011e4:	af00      	add	r7, sp, #0
    uint8_t calibData1[26]; // Table 18: Memory map -> calib00..calib25 | 0x88 to 0xA1
    uint8_t calibData2[7];

    SPI_Read(CALIBMEMADD1, calibData1, CALIBDATASIZE1); // 8-bit temperature calibration value
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2219      	movs	r2, #25
 80011ec:	4619      	mov	r1, r3
 80011ee:	2088      	movs	r0, #136	@ 0x88
 80011f0:	f7ff ffc8 	bl	8001184 <SPI_Read>
    SPI_Read(CALIBMEMADD2, calibData2, CALIBDATASIZE2); // 8-bit humidity calibration value
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2207      	movs	r2, #7
 80011f8:	4619      	mov	r1, r3
 80011fa:	20e1      	movs	r0, #225	@ 0xe1
 80011fc:	f7ff ffc2 	bl	8001184 <SPI_Read>

    // Combine the bytes read from the calibration memory into 16-bit integers.
    dig_T1 = (calibData1[1] << 8) | calibData1[0];
 8001200:	7b7b      	ldrb	r3, [r7, #13]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	7b3b      	ldrb	r3, [r7, #12]
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21b      	sxth	r3, r3
 800120e:	b29a      	uxth	r2, r3
 8001210:	4b4d      	ldr	r3, [pc, #308]	@ (8001348 <trimmingParametersRead+0x168>)
 8001212:	801a      	strh	r2, [r3, #0]
    dig_T2 = (calibData1[3] << 8) | calibData1[2];
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	021b      	lsls	r3, r3, #8
 8001218:	b21a      	sxth	r2, r3
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b4a      	ldr	r3, [pc, #296]	@ (800134c <trimmingParametersRead+0x16c>)
 8001224:	801a      	strh	r2, [r3, #0]
    dig_T3 = (calibData1[5] << 8) | calibData1[4];
 8001226:	7c7b      	ldrb	r3, [r7, #17]
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	b21a      	sxth	r2, r3
 800122c:	7c3b      	ldrb	r3, [r7, #16]
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	b21a      	sxth	r2, r3
 8001234:	4b46      	ldr	r3, [pc, #280]	@ (8001350 <trimmingParametersRead+0x170>)
 8001236:	801a      	strh	r2, [r3, #0]

    dig_P1 = (calibData1[7] << 8) | calibData1[6];
 8001238:	7cfb      	ldrb	r3, [r7, #19]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7cbb      	ldrb	r3, [r7, #18]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21b      	sxth	r3, r3
 8001246:	b29a      	uxth	r2, r3
 8001248:	4b42      	ldr	r3, [pc, #264]	@ (8001354 <trimmingParametersRead+0x174>)
 800124a:	801a      	strh	r2, [r3, #0]
    dig_P2 = (calibData1[9] << 8) | calibData1[8];
 800124c:	7d7b      	ldrb	r3, [r7, #21]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b21a      	sxth	r2, r3
 8001252:	7d3b      	ldrb	r3, [r7, #20]
 8001254:	b21b      	sxth	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b3f      	ldr	r3, [pc, #252]	@ (8001358 <trimmingParametersRead+0x178>)
 800125c:	801a      	strh	r2, [r3, #0]
    dig_P3 = (calibData1[11] << 8) | calibData1[10];
 800125e:	7dfb      	ldrb	r3, [r7, #23]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	7dbb      	ldrb	r3, [r7, #22]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b3b      	ldr	r3, [pc, #236]	@ (800135c <trimmingParametersRead+0x17c>)
 800126e:	801a      	strh	r2, [r3, #0]
    dig_P4 = (calibData1[13] << 8) | calibData1[12];
 8001270:	7e7b      	ldrb	r3, [r7, #25]
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b21a      	sxth	r2, r3
 8001276:	7e3b      	ldrb	r3, [r7, #24]
 8001278:	b21b      	sxth	r3, r3
 800127a:	4313      	orrs	r3, r2
 800127c:	b21a      	sxth	r2, r3
 800127e:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <trimmingParametersRead+0x180>)
 8001280:	801a      	strh	r2, [r3, #0]
    dig_P5 = (calibData1[15] << 8) | calibData1[14];
 8001282:	7efb      	ldrb	r3, [r7, #27]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7ebb      	ldrb	r3, [r7, #26]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	4b34      	ldr	r3, [pc, #208]	@ (8001364 <trimmingParametersRead+0x184>)
 8001292:	801a      	strh	r2, [r3, #0]
    dig_P6 = (calibData1[17] << 8) | calibData1[16];
 8001294:	7f7b      	ldrb	r3, [r7, #29]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	7f3b      	ldrb	r3, [r7, #28]
 800129c:	b21b      	sxth	r3, r3
 800129e:	4313      	orrs	r3, r2
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <trimmingParametersRead+0x188>)
 80012a4:	801a      	strh	r2, [r3, #0]
    dig_P7 = (calibData1[19] << 8) | calibData1[18];
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	7fbb      	ldrb	r3, [r7, #30]
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <trimmingParametersRead+0x18c>)
 80012b6:	801a      	strh	r2, [r3, #0]
    dig_P8 = (calibData1[21] << 8) | calibData1[20];
 80012b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80012bc:	021b      	lsls	r3, r3, #8
 80012be:	b21a      	sxth	r2, r3
 80012c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	4b29      	ldr	r3, [pc, #164]	@ (8001370 <trimmingParametersRead+0x190>)
 80012cc:	801a      	strh	r2, [r3, #0]
    dig_P9 = (calibData1[23] << 8) | calibData1[22];
 80012ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21a      	sxth	r2, r3
 80012e0:	4b24      	ldr	r3, [pc, #144]	@ (8001374 <trimmingParametersRead+0x194>)
 80012e2:	801a      	strh	r2, [r3, #0]

    dig_H1 = calibData1[24];
 80012e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b23      	ldr	r3, [pc, #140]	@ (8001378 <trimmingParametersRead+0x198>)
 80012ec:	801a      	strh	r2, [r3, #0]
    dig_H2 = (calibData2[1] << 8) | calibData2[0];
 80012ee:	797b      	ldrb	r3, [r7, #5]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	793b      	ldrb	r3, [r7, #4]
 80012f6:	b21b      	sxth	r3, r3
 80012f8:	4313      	orrs	r3, r2
 80012fa:	b21a      	sxth	r2, r3
 80012fc:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <trimmingParametersRead+0x19c>)
 80012fe:	801a      	strh	r2, [r3, #0]
    dig_H3 = calibData2[2];
 8001300:	79bb      	ldrb	r3, [r7, #6]
 8001302:	461a      	mov	r2, r3
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <trimmingParametersRead+0x1a0>)
 8001306:	801a      	strh	r2, [r3, #0]
    dig_H4 = (calibData2[3] << 4) | (calibData2[4] & 0x0F);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	011b      	lsls	r3, r3, #4
 800130c:	b21a      	sxth	r2, r3
 800130e:	7a3b      	ldrb	r3, [r7, #8]
 8001310:	b21b      	sxth	r3, r3
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21a      	sxth	r2, r3
 800131c:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <trimmingParametersRead+0x1a4>)
 800131e:	801a      	strh	r2, [r3, #0]
    dig_H5 = (calibData2[4] << 4) | (calibData2[5] >> 4);
 8001320:	7a3b      	ldrb	r3, [r7, #8]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	b21a      	sxth	r2, r3
 8001326:	7a7b      	ldrb	r3, [r7, #9]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	b2db      	uxtb	r3, r3
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21a      	sxth	r2, r3
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <trimmingParametersRead+0x1a8>)
 8001334:	801a      	strh	r2, [r3, #0]
    dig_H6 = calibData2[6];
 8001336:	7abb      	ldrb	r3, [r7, #10]
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b14      	ldr	r3, [pc, #80]	@ (800138c <trimmingParametersRead+0x1ac>)
 800133c:	801a      	strh	r2, [r3, #0]
}
 800133e:	bf00      	nop
 8001340:	3728      	adds	r7, #40	@ 0x28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000085c 	.word	0x2000085c
 800134c:	20000864 	.word	0x20000864
 8001350:	20000866 	.word	0x20000866
 8001354:	2000085e 	.word	0x2000085e
 8001358:	20000868 	.word	0x20000868
 800135c:	2000086a 	.word	0x2000086a
 8001360:	2000086c 	.word	0x2000086c
 8001364:	2000086e 	.word	0x2000086e
 8001368:	20000870 	.word	0x20000870
 800136c:	20000872 	.word	0x20000872
 8001370:	20000874 	.word	0x20000874
 8001374:	20000876 	.word	0x20000876
 8001378:	20000860 	.word	0x20000860
 800137c:	20000878 	.word	0x20000878
 8001380:	20000862 	.word	0x20000862
 8001384:	2000087a 	.word	0x2000087a
 8001388:	2000087c 	.word	0x2000087c
 800138c:	2000087e 	.word	0x2000087e

08001390 <BME280_init>:

// Function to initialize the BME280 sensor
void BME280_init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
    // Read trimming parameters from the sensor
    trimmingParametersRead();
 8001396:	f7ff ff23 	bl	80011e0 <trimmingParametersRead>
    /*
    5.4.2 The "reset" register contains the soft reset word reset[7:0].
    If the value 0xB6 is written to the register, the device is reset using the complete power-on-reset procedure.
    The readout value is 0x00.
    */
    uint8_t resetSeq = 0xB6;
 800139a:	23b6      	movs	r3, #182	@ 0xb6
 800139c:	71fb      	strb	r3, [r7, #7]
    uint8_t ctrlHum = 0x01;
 800139e:	2301      	movs	r3, #1
 80013a0:	71bb      	strb	r3, [r7, #6]
    uint8_t ctrlMeas = 0xA3; // 0b10100011 in hexadecimal
 80013a2:	23a3      	movs	r3, #163	@ 0xa3
 80013a4:	717b      	strb	r3, [r7, #5]
    uint8_t config = 0x10;   // 0b00010000 in hexadecimal
 80013a6:	2310      	movs	r3, #16
 80013a8:	713b      	strb	r3, [r7, #4]

    // Write reset sequence to the reset register
    SPI_Write(RESET_REG, &resetSeq, CMDWRITESIZE);
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	20e0      	movs	r0, #224	@ 0xe0
 80013b2:	f7ff feb9 	bl	8001128 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80013b6:	2064      	movs	r0, #100	@ 0x64
 80013b8:	f000 fab6 	bl	8001928 <HAL_Delay>

    // Write control settings to the control registers
    SPI_Write(CTRL_HUM, &ctrlHum, CMDWRITESIZE);
 80013bc:	1dbb      	adds	r3, r7, #6
 80013be:	2201      	movs	r2, #1
 80013c0:	4619      	mov	r1, r3
 80013c2:	20f2      	movs	r0, #242	@ 0xf2
 80013c4:	f7ff feb0 	bl	8001128 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80013c8:	2064      	movs	r0, #100	@ 0x64
 80013ca:	f000 faad 	bl	8001928 <HAL_Delay>

    SPI_Write(CTRL_MEAS, &ctrlMeas, CMDWRITESIZE);
 80013ce:	1d7b      	adds	r3, r7, #5
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	20f4      	movs	r0, #244	@ 0xf4
 80013d6:	f7ff fea7 	bl	8001128 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80013da:	2064      	movs	r0, #100	@ 0x64
 80013dc:	f000 faa4 	bl	8001928 <HAL_Delay>

    SPI_Write(CONFIG_REG, &config, CMDWRITESIZE);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2201      	movs	r2, #1
 80013e4:	4619      	mov	r1, r3
 80013e6:	20f5      	movs	r0, #245	@ 0xf5
 80013e8:	f7ff fe9e 	bl	8001128 <SPI_Write>
    HAL_Delay(BME_HAL_DELAY);
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f000 fa9b 	bl	8001928 <HAL_Delay>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <BME280_read>:
{
    return hum;
}

static uint8_t BME280_read(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
    uint8_t sensorData[8];
    uint8_t chipID;

    SPI_Read(CHIPIDREG, &chipID, MEMADDRESSSIZE);
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	2201      	movs	r2, #1
 8001406:	4619      	mov	r1, r3
 8001408:	20d0      	movs	r0, #208	@ 0xd0
 800140a:	f7ff febb 	bl	8001184 <SPI_Read>

    if (chipID == 0x60)
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	2b60      	cmp	r3, #96	@ 0x60
 8001412:	d128      	bne.n	8001466 <BME280_read+0x6a>
    {
        for (int i = 0; i <= 2; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e008      	b.n	800142c <BME280_read+0x30>
        {
            BSP_LED_Toggle(LED2); // sensor ID OK
 800141a:	2001      	movs	r0, #1
 800141c:	f000 f9f8 	bl	8001810 <BSP_LED_Toggle>
            HAL_Delay(100);
 8001420:	2064      	movs	r0, #100	@ 0x64
 8001422:	f000 fa81 	bl	8001928 <HAL_Delay>
        for (int i = 0; i <= 2; i++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b02      	cmp	r3, #2
 8001430:	ddf3      	ble.n	800141a <BME280_read+0x1e>
        }

        SPI_Read(RAWDATAREG1, sensorData, RAWDATASIZE);
 8001432:	f107 0308 	add.w	r3, r7, #8
 8001436:	2208      	movs	r2, #8
 8001438:	4619      	mov	r1, r3
 800143a:	20f7      	movs	r0, #247	@ 0xf7
 800143c:	f7ff fea2 	bl	8001184 <SPI_Read>

        /* Data readout is done by starting a burst read from 0xF7 to 0xFC (temperature and pressure) or from 0xF7 to 0xFE
         * (temperature, pressure and humidity). The data are read out in an unsigned 20-bit format both for pressure and
         * for temperature and in an unsigned 16-bit format for humidity. */

        tADC = (sensorData[3] << 12) | (sensorData[4] << 4) | (sensorData[5] >> 4);
 8001440:	7afb      	ldrb	r3, [r7, #11]
 8001442:	031a      	lsls	r2, r3, #12
 8001444:	7b3b      	ldrb	r3, [r7, #12]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4313      	orrs	r3, r2
 800144a:	7b7a      	ldrb	r2, [r7, #13]
 800144c:	0912      	lsrs	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	4313      	orrs	r3, r2
 8001452:	4a0f      	ldr	r2, [pc, #60]	@ (8001490 <BME280_read+0x94>)
 8001454:	6013      	str	r3, [r2, #0]
        hADC = (sensorData[6] << 8) | sensorData[7];
 8001456:	7bbb      	ldrb	r3, [r7, #14]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	7bfa      	ldrb	r2, [r7, #15]
 800145c:	4313      	orrs	r3, r2
 800145e:	4a0d      	ldr	r2, [pc, #52]	@ (8001494 <BME280_read+0x98>)
 8001460:	6013      	str	r3, [r2, #0]

        return 0;
 8001462:	2300      	movs	r3, #0
 8001464:	e00f      	b.n	8001486 <BME280_read+0x8a>
    }
    else
    {
        for (int i = 0; i <= 2; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	e008      	b.n	800147e <BME280_read+0x82>
        {
            BSP_LED_Toggle(LED3); // sensor ID ERROR
 800146c:	2002      	movs	r0, #2
 800146e:	f000 f9cf 	bl	8001810 <BSP_LED_Toggle>
            HAL_Delay(100);
 8001472:	2064      	movs	r0, #100	@ 0x64
 8001474:	f000 fa58 	bl	8001928 <HAL_Delay>
        for (int i = 0; i <= 2; i++)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	3301      	adds	r3, #1
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b02      	cmp	r3, #2
 8001482:	ddf3      	ble.n	800146c <BME280_read+0x70>
        }

        return 1;
 8001484:	2301      	movs	r3, #1
    }
}
 8001486:	4618      	mov	r0, r3
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000880 	.word	0x20000880
 8001494:	20000884 	.word	0x20000884

08001498 <TEST_SPI>:

#define TEST_DATA
#define TEST_BME280

void TEST_SPI()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
    for (int i = 0; i <= 4; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	e008      	b.n	80014b6 <TEST_SPI+0x1e>
    {
        BSP_LED_Toggle(LED2);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f000 f9b3 	bl	8001810 <BSP_LED_Toggle>
        HAL_Delay(100);
 80014aa:	2064      	movs	r0, #100	@ 0x64
 80014ac:	f000 fa3c 	bl	8001928 <HAL_Delay>
    for (int i = 0; i <= 4; i++)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3301      	adds	r3, #1
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	ddf3      	ble.n	80014a4 <TEST_SPI+0xc>
    }

#ifdef TEST_DATA
    // Test 2 data transactions (MOSI -> SDA/SDI on bme280 board) to see them in the logic analyzer display.
    uint8_t dato = 0xAA;
 80014bc:	23aa      	movs	r3, #170	@ 0xaa
 80014be:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2108      	movs	r1, #8
 80014c4:	4816      	ldr	r0, [pc, #88]	@ (8001520 <TEST_SPI+0x88>)
 80014c6:	f001 f80d 	bl	80024e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &dato, sizeof(dato), HAL_MAX_DELAY);
 80014ca:	1cf9      	adds	r1, r7, #3
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014d0:	2201      	movs	r2, #1
 80014d2:	4814      	ldr	r0, [pc, #80]	@ (8001524 <TEST_SPI+0x8c>)
 80014d4:	f003 f84f 	bl	8004576 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 80014d8:	2201      	movs	r2, #1
 80014da:	2108      	movs	r1, #8
 80014dc:	4810      	ldr	r0, [pc, #64]	@ (8001520 <TEST_SPI+0x88>)
 80014de:	f001 f801 	bl	80024e4 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 fa20 	bl	8001928 <HAL_Delay>

    uint8_t regAddress = 0xAB;
 80014e8:	23ab      	movs	r3, #171	@ 0xab
 80014ea:	70bb      	strb	r3, [r7, #2]
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2108      	movs	r1, #8
 80014f0:	480b      	ldr	r0, [pc, #44]	@ (8001520 <TEST_SPI+0x88>)
 80014f2:	f000 fff7 	bl	80024e4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &regAddress, sizeof(regAddress), HAL_MAX_DELAY);
 80014f6:	1cb9      	adds	r1, r7, #2
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014fc:	2201      	movs	r2, #1
 80014fe:	4809      	ldr	r0, [pc, #36]	@ (8001524 <TEST_SPI+0x8c>)
 8001500:	f003 f839 	bl	8004576 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 8001504:	2201      	movs	r2, #1
 8001506:	2108      	movs	r1, #8
 8001508:	4805      	ldr	r0, [pc, #20]	@ (8001520 <TEST_SPI+0x88>)
 800150a:	f000 ffeb 	bl	80024e4 <HAL_GPIO_WritePin>

    HAL_Delay(1);
 800150e:	2001      	movs	r0, #1
 8001510:	f000 fa0a 	bl	8001928 <HAL_Delay>
#endif
#ifdef TEST_BME280
    // Test 1 data transactions to check chip ID and see it in the logic analyzer display.
    BME280_read();
 8001514:	f7ff ff72 	bl	80013fc <BME280_read>

#endif
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40020400 	.word	0x40020400
 8001524:	20000804 	.word	0x20000804

08001528 <Init_Lcd>:
  * @version 1.0
  * @date 16/4/2023
*/


_Bool Init_Lcd(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
   DelayLcd(DELAY20ms);
 800152e:	2014      	movs	r0, #20
 8001530:	f000 f840 	bl	80015b4 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL); // program hangs here
 8001534:	2100      	movs	r1, #0
 8001536:	2030      	movs	r0, #48	@ 0x30
 8001538:	f000 f8a6 	bl	8001688 <Envia4bitsLcd>

   for (int i = 0; i <= 3; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	e009      	b.n	8001556 <Init_Lcd+0x2e>
   {
	   BSP_LED_Toggle(LED1); // init LCD OK
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f964 	bl	8001810 <BSP_LED_Toggle>
	   HAL_Delay(500);
 8001548:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800154c:	f000 f9ec 	bl	8001928 <HAL_Delay>
   for (int i = 0; i <= 3; i++)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3301      	adds	r3, #1
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b03      	cmp	r3, #3
 800155a:	ddf2      	ble.n	8001542 <Init_Lcd+0x1a>
   }

   DelayLcd(DELAY10ms);
 800155c:	200a      	movs	r0, #10
 800155e:	f000 f829 	bl	80015b4 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8001562:	2100      	movs	r1, #0
 8001564:	2030      	movs	r0, #48	@ 0x30
 8001566:	f000 f88f 	bl	8001688 <Envia4bitsLcd>
   DelayLcd(DELAY1ms);
 800156a:	2001      	movs	r0, #1
 800156c:	f000 f822 	bl	80015b4 <DelayLcd>
   Envia4bitsLcd(COMANDO_INI1,CONTROL);
 8001570:	2100      	movs	r1, #0
 8001572:	2030      	movs	r0, #48	@ 0x30
 8001574:	f000 f888 	bl	8001688 <Envia4bitsLcd>
   Envia4bitsLcd(COMANDO_INI2,CONTROL);
 8001578:	2100      	movs	r1, #0
 800157a:	2020      	movs	r0, #32
 800157c:	f000 f884 	bl	8001688 <Envia4bitsLcd>
   for(uint8_t i=0;i<sizeof(LCD_INIT_CMD);i++)ControlLcd(LCD_INIT_CMD[i]);
 8001580:	2300      	movs	r3, #0
 8001582:	70fb      	strb	r3, [r7, #3]
 8001584:	e008      	b.n	8001598 <Init_Lcd+0x70>
 8001586:	78fb      	ldrb	r3, [r7, #3]
 8001588:	4a09      	ldr	r2, [pc, #36]	@ (80015b0 <Init_Lcd+0x88>)
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f81c 	bl	80015ca <ControlLcd>
 8001592:	78fb      	ldrb	r3, [r7, #3]
 8001594:	3301      	adds	r3, #1
 8001596:	70fb      	strb	r3, [r7, #3]
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d9f3      	bls.n	8001586 <Init_Lcd+0x5e>
   DelayLcd(DELAY2ms);
 800159e:	2002      	movs	r0, #2
 80015a0:	f000 f808 	bl	80015b4 <DelayLcd>
   return LCD_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08005c28 	.word	0x08005c28

080015b4 <DelayLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


static void DelayLcd(uint32_t demora){
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	  HAL_Delay(demora);
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f9b3 	bl	8001928 <HAL_Delay>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <ControlLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


static void ControlLcd(uint8_t valor){
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(valor,CONTROL);
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f838 	bl	800164e <Envia8bitsLcd>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <DatoLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void DatoLcd (uint8_t dato){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	4603      	mov	r3, r0
 80015ee:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato,DATOS);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2101      	movs	r1, #1
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f82a 	bl	800164e <Envia8bitsLcd>
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <DatoAsciiLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void DatoAsciiLcd (uint8_t dato){
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	4603      	mov	r3, r0
 800160a:	71fb      	strb	r3, [r7, #7]
	Envia8bitsLcd(dato+ '0',DATOS);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	3330      	adds	r3, #48	@ 0x30
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2101      	movs	r1, #1
 8001614:	4618      	mov	r0, r3
 8001616:	f000 f81a 	bl	800164e <Envia8bitsLcd>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <DatoBCD>:
  * @author Ing. Pavelek Israel
  * @version 1.0
  * @date 16/4/2023
*/

void DatoBCD (uint8_t dato){
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]

	  DatoAsciiLcd((((dato)&0xf0)>>4));
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	b2db      	uxtb	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ffe5 	bl	8001602 <DatoAsciiLcd>
	  DatoAsciiLcd(((dato)&0x0f));
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	f003 030f 	and.w	r3, r3, #15
 800163e:	b2db      	uxtb	r3, r3
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ffde 	bl	8001602 <DatoAsciiLcd>

}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <Envia8bitsLcd>:
  * @author Ing. Pavelek Israel
  * @version 1.0
  * @date 16/4/2023
*/

void Envia8bitsLcd (uint8_t valor,_Bool tipo){
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	460a      	mov	r2, r1
 8001658:	71fb      	strb	r3, [r7, #7]
 800165a:	4613      	mov	r3, r2
 800165c:	71bb      	strb	r3, [r7, #6]
	Envia4bitsLcd(valor&HIGH_NIBBLE,tipo); 		//me con quedo y envio los 4 bits más significaticos.
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f023 030f 	bic.w	r3, r3, #15
 8001664:	b2db      	uxtb	r3, r3
 8001666:	79ba      	ldrb	r2, [r7, #6]
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f80c 	bl	8001688 <Envia4bitsLcd>
	Envia4bitsLcd(valor<<LOW_NIBBLE,tipo);   	//me quedo y envio los 4 bits menos significativos.
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	b2db      	uxtb	r3, r3
 8001676:	79ba      	ldrb	r2, [r7, #6]
 8001678:	4611      	mov	r1, r2
 800167a:	4618      	mov	r0, r3
 800167c:	f000 f804 	bl	8001688 <Envia4bitsLcd>
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <Envia4bitsLcd>:
  * @author Ing. Pavelek Israel
  * @version 1.0
  * @date 16/4/2023
*/

static void Envia4bitsLcd (uint8_t valor,_Bool tipo){
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	460a      	mov	r2, r1
 8001692:	71fb      	strb	r3, [r7, #7]
 8001694:	4613      	mov	r3, r2
 8001696:	71bb      	strb	r3, [r7, #6]
	LCD_Write_Byte(valor+tipo+EN+BL);
 8001698:	79ba      	ldrb	r2, [r7, #6]
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	4413      	add	r3, r2
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	330c      	adds	r3, #12
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 f849 	bl	800173c <LCD_Write_Byte>
	DelayLcd(DelayTime);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff ff82 	bl	80015b4 <DelayLcd>
	LCD_Write_Byte(valor+tipo+BL);
 80016b0:	79ba      	ldrb	r2, [r7, #6]
 80016b2:	79fb      	ldrb	r3, [r7, #7]
 80016b4:	4413      	add	r3, r2
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	3308      	adds	r3, #8
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f83d 	bl	800173c <LCD_Write_Byte>
	DelayLcd(DelayTime);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff ff76 	bl	80015b4 <DelayLcd>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <SacaTextoLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void SacaTextoLcd (uint8_t *texto){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
	while(*texto)DatoLcd(*texto++);
 80016d8:	e006      	b.n	80016e8 <SacaTextoLcd+0x18>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	607a      	str	r2, [r7, #4]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff7f 	bl	80015e6 <DatoLcd>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1f4      	bne.n	80016da <SacaTextoLcd+0xa>
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <PosCaracHLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void PosCaracHLcd(uint8_t posH){
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posH | LINEA1);
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800170a:	b2db      	uxtb	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5c 	bl	80015ca <ControlLcd>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <PosCaracLLcd>:
  * @version 1.0
  * @date 16/4/2023
*/


void PosCaracLLcd(uint8_t posL){
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
	ControlLcd(posL | LINEA2);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff4c 	bl	80015ca <ControlLcd>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <LCD_Write_Byte>:
  * @version 1.0
  * @date 16/4/2023
*/


void LCD_Write_Byte(uint8_t valor){
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af02      	add	r7, sp, #8
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_Master_Transmit (&hi2c1,LCD_DIR<<1,&valor, sizeof(valor),HAL_MAX_DELAY)!=HAL_OK)Error_Handler();
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	214e      	movs	r1, #78	@ 0x4e
 8001752:	4806      	ldr	r0, [pc, #24]	@ (800176c <LCD_Write_Byte+0x30>)
 8001754:	f001 f83e 	bl	80027d4 <HAL_I2C_Master_Transmit>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <LCD_Write_Byte+0x26>
 800175e:	f7ff f91f 	bl	80009a0 <Error_Handler>

}
 8001762:	bf00      	nop
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000025c 	.word	0x2000025c

08001770 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	@ 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d10e      	bne.n	800179e <BSP_LED_Init+0x2e>
 8001780:	2300      	movs	r3, #0
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	4b1f      	ldr	r3, [pc, #124]	@ (8001804 <BSP_LED_Init+0x94>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001788:	4a1e      	ldr	r2, [pc, #120]	@ (8001804 <BSP_LED_Init+0x94>)
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001790:	4b1c      	ldr	r3, [pc, #112]	@ (8001804 <BSP_LED_Init+0x94>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	e00d      	b.n	80017ba <BSP_LED_Init+0x4a>
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b18      	ldr	r3, [pc, #96]	@ (8001804 <BSP_LED_Init+0x94>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a17      	ldr	r2, [pc, #92]	@ (8001804 <BSP_LED_Init+0x94>)
 80017a8:	f043 0302 	orr.w	r3, r3, #2
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <BSP_LED_Init+0x94>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	4a12      	ldr	r2, [pc, #72]	@ (8001808 <BSP_LED_Init+0x98>)
 80017be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c4:	2301      	movs	r3, #1
 80017c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <BSP_LED_Init+0x9c>)
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	f107 0214 	add.w	r2, r7, #20
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 fcd4 	bl	800218c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4a09      	ldr	r2, [pc, #36]	@ (800180c <BSP_LED_Init+0x9c>)
 80017e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	4a06      	ldr	r2, [pc, #24]	@ (8001808 <BSP_LED_Init+0x98>)
 80017f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	f000 fe74 	bl	80024e4 <HAL_GPIO_WritePin>
}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	@ 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	08005c30 	.word	0x08005c30
 800180c:	20000004 	.word	0x20000004

08001810 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4a07      	ldr	r2, [pc, #28]	@ (800183c <BSP_LED_Toggle+0x2c>)
 800181e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	4906      	ldr	r1, [pc, #24]	@ (8001840 <BSP_LED_Toggle+0x30>)
 8001826:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800182a:	4619      	mov	r1, r3
 800182c:	4610      	mov	r0, r2
 800182e:	f000 fe72 	bl	8002516 <HAL_GPIO_TogglePin>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000004 	.word	0x20000004
 8001840:	08005c30 	.word	0x08005c30

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	@ (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f931 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	2000      	movs	r0, #0
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff f898 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f93b 	bl	8001b22 <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018c4:	f000 f911 	bl	8001aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000014 	.word	0x20000014
 80018e4:	20000010 	.word	0x20000010

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	@ (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000014 	.word	0x20000014
 800190c:	20000888 	.word	0x20000888

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000888 	.word	0x20000888

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000014 	.word	0x20000014

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	@ (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff47 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff5c 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff8e 	bl	8001a28 <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5d 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffb0 	bl	8001a90 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06c      	b.n	8001c28 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d106      	bne.n	8001b66 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2223      	movs	r2, #35	@ 0x23
 8001b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7fe ff4b 	bl	80009fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <HAL_ETH_Init+0xf4>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b6e:	4a30      	ldr	r2, [pc, #192]	@ (8001c30 <HAL_ETH_Init+0xf4>)
 8001b70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b76:	4b2e      	ldr	r3, [pc, #184]	@ (8001c30 <HAL_ETH_Init+0xf4>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001b82:	4b2c      	ldr	r3, [pc, #176]	@ (8001c34 <HAL_ETH_Init+0xf8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a2b      	ldr	r2, [pc, #172]	@ (8001c34 <HAL_ETH_Init+0xf8>)
 8001b88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001b8c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001b8e:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <HAL_ETH_Init+0xf8>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	4927      	ldr	r1, [pc, #156]	@ (8001c34 <HAL_ETH_Init+0xf8>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001b9c:	4b25      	ldr	r3, [pc, #148]	@ (8001c34 <HAL_ETH_Init+0xf8>)
 8001b9e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6812      	ldr	r2, [r2, #0]
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bb6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bb8:	f7ff feaa 	bl	8001910 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bbe:	e011      	b.n	8001be4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001bc0:	f7ff fea6 	bl	8001910 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001bce:	d909      	bls.n	8001be4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	22e0      	movs	r2, #224	@ 0xe0
 8001bdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e021      	b.n	8001c28 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1e4      	bne.n	8001bc0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f958 	bl	8001eac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f9ff 	bl	8002000 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 fa55 	bl	80020b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2100      	movs	r1, #0
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f9bd 	bl	8001f90 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2210      	movs	r2, #16
 8001c22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40013800 	.word	0x40013800

08001c38 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4b51      	ldr	r3, [pc, #324]	@ (8001d94 <ETH_SetMACConfig+0x15c>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	7c1b      	ldrb	r3, [r3, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <ETH_SetMACConfig+0x28>
 8001c5a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001c5e:	e000      	b.n	8001c62 <ETH_SetMACConfig+0x2a>
 8001c60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	7c5b      	ldrb	r3, [r3, #17]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <ETH_SetMACConfig+0x38>
 8001c6a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001c6e:	e000      	b.n	8001c72 <ETH_SetMACConfig+0x3a>
 8001c70:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c72:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	7fdb      	ldrb	r3, [r3, #31]
 8001c7e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001c80:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001c86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001c88:	683a      	ldr	r2, [r7, #0]
 8001c8a:	7f92      	ldrb	r2, [r2, #30]
 8001c8c:	2a00      	cmp	r2, #0
 8001c8e:	d102      	bne.n	8001c96 <ETH_SetMACConfig+0x5e>
 8001c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c94:	e000      	b.n	8001c98 <ETH_SetMACConfig+0x60>
 8001c96:	2200      	movs	r2, #0
                        macconf->Speed |
 8001c98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	7f1b      	ldrb	r3, [r3, #28]
 8001c9e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ca0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ca6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	791b      	ldrb	r3, [r3, #4]
 8001cac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d102      	bne.n	8001cc0 <ETH_SetMACConfig+0x88>
 8001cba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cbe:	e000      	b.n	8001cc2 <ETH_SetMACConfig+0x8a>
 8001cc0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	7bdb      	ldrb	r3, [r3, #15]
 8001cc8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001cd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001cd8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f7ff fe18 	bl	8001928 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d08:	68fa      	ldr	r2, [r7, #12]
 8001d0a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001d0e:	4013      	ands	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d16:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	d101      	bne.n	8001d26 <ETH_SetMACConfig+0xee>
 8001d22:	2280      	movs	r2, #128	@ 0x80
 8001d24:	e000      	b.n	8001d28 <ETH_SetMACConfig+0xf0>
 8001d26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d28:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d30:	683a      	ldr	r2, [r7, #0]
 8001d32:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001d36:	2a01      	cmp	r2, #1
 8001d38:	d101      	bne.n	8001d3e <ETH_SetMACConfig+0x106>
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	e000      	b.n	8001d40 <ETH_SetMACConfig+0x108>
 8001d3e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001d48:	2a01      	cmp	r2, #1
 8001d4a:	d101      	bne.n	8001d50 <ETH_SetMACConfig+0x118>
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	e000      	b.n	8001d52 <ETH_SetMACConfig+0x11a>
 8001d50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001d5a:	2a01      	cmp	r2, #1
 8001d5c:	d101      	bne.n	8001d62 <ETH_SetMACConfig+0x12a>
 8001d5e:	2202      	movs	r2, #2
 8001d60:	e000      	b.n	8001d64 <ETH_SetMACConfig+0x12c>
 8001d62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d64:	4313      	orrs	r3, r2
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fdd3 	bl	8001928 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	ff20810f 	.word	0xff20810f

08001d98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea8 <ETH_SetDMAConfig+0x110>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	7b1b      	ldrb	r3, [r3, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <ETH_SetDMAConfig+0x2c>
 8001dbe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dc2:	e000      	b.n	8001dc6 <ETH_SetDMAConfig+0x2e>
 8001dc4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	7b5b      	ldrb	r3, [r3, #13]
 8001dca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001dcc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	7f52      	ldrb	r2, [r2, #29]
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	d102      	bne.n	8001ddc <ETH_SetDMAConfig+0x44>
 8001dd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001dda:	e000      	b.n	8001dde <ETH_SetDMAConfig+0x46>
 8001ddc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001dde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	7b9b      	ldrb	r3, [r3, #14]
 8001de4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001de6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001dec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	7f1b      	ldrb	r3, [r3, #28]
 8001df2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001df4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	7f9b      	ldrb	r3, [r3, #30]
 8001dfa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001dfc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e0a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f7ff fd7a 	bl	8001928 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	791b      	ldrb	r3, [r3, #4]
 8001e46:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e4c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e52:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e58:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e60:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e62:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e6a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001e70:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6812      	ldr	r2, [r2, #0]
 8001e76:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e7e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f7ff fd4b 	bl	8001928 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	f8de3f23 	.word	0xf8de3f23

08001eac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b0a6      	sub	sp, #152	@ 0x98
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f0e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001f12:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f20:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f24:	4619      	mov	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff fe86 	bl	8001c38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f30:	2301      	movs	r3, #1
 8001f32:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f60:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f62:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f6c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	4619      	mov	r1, r3
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ff08 	bl	8001d98 <ETH_SetDMAConfig>
}
 8001f88:	bf00      	nop
 8001f8a:	3798      	adds	r7, #152	@ 0x98
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3305      	adds	r3, #5
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	021b      	lsls	r3, r3, #8
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	3204      	adds	r2, #4
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <ETH_MACAddressConfig+0x68>)
 8001fb2:	4413      	add	r3, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3303      	adds	r3, #3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	061a      	lsls	r2, r3, #24
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	7812      	ldrb	r2, [r2, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <ETH_MACAddressConfig+0x6c>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	6013      	str	r3, [r2, #0]
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40028040 	.word	0x40028040
 8001ffc:	40028044 	.word	0x40028044

08002000 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	e03e      	b.n	800208c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68d9      	ldr	r1, [r3, #12]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	2200      	movs	r2, #0
 8002036:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	3206      	adds	r2, #6
 8002040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d80c      	bhi.n	8002070 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68d9      	ldr	r1, [r3, #12]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	440b      	add	r3, r1
 8002068:	461a      	mov	r2, r3
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	e004      	b.n	800207a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3301      	adds	r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d9bd      	bls.n	800200e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68da      	ldr	r2, [r3, #12]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a4:	611a      	str	r2, [r3, #16]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	e046      	b.n	800214e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6919      	ldr	r1, [r3, #16]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	2200      	movs	r2, #0
 80020ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2200      	movs	r2, #0
 80020f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80020fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002104:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	3212      	adds	r2, #18
 800211a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d80c      	bhi.n	800213e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	461a      	mov	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	e004      	b.n	8002148 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3301      	adds	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2b03      	cmp	r3, #3
 8002152:	d9b5      	bls.n	80020c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691a      	ldr	r2, [r3, #16]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800217e:	60da      	str	r2, [r3, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	@ 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	e177      	b.n	8002498 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a8:	2201      	movs	r2, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f040 8166 	bne.w	8002492 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d005      	beq.n	80021de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d130      	bne.n	8002240 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	2203      	movs	r2, #3
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	091b      	lsrs	r3, r3, #4
 800222a:	f003 0201 	and.w	r2, r3, #1
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b03      	cmp	r3, #3
 800224a:	d017      	beq.n	800227c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d123      	bne.n	80022d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	08da      	lsrs	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3208      	adds	r2, #8
 8002290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	220f      	movs	r2, #15
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	08da      	lsrs	r2, r3, #3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3208      	adds	r2, #8
 80022ca:	69b9      	ldr	r1, [r7, #24]
 80022cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80c0 	beq.w	8002492 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	4a65      	ldr	r2, [pc, #404]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 800231c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002320:	6453      	str	r3, [r2, #68]	@ 0x44
 8002322:	4b63      	ldr	r3, [pc, #396]	@ (80024b0 <HAL_GPIO_Init+0x324>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002326:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800232e:	4a61      	ldr	r2, [pc, #388]	@ (80024b4 <HAL_GPIO_Init+0x328>)
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a58      	ldr	r2, [pc, #352]	@ (80024b8 <HAL_GPIO_Init+0x32c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d037      	beq.n	80023ca <HAL_GPIO_Init+0x23e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a57      	ldr	r2, [pc, #348]	@ (80024bc <HAL_GPIO_Init+0x330>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d031      	beq.n	80023c6 <HAL_GPIO_Init+0x23a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a56      	ldr	r2, [pc, #344]	@ (80024c0 <HAL_GPIO_Init+0x334>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02b      	beq.n	80023c2 <HAL_GPIO_Init+0x236>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a55      	ldr	r2, [pc, #340]	@ (80024c4 <HAL_GPIO_Init+0x338>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d025      	beq.n	80023be <HAL_GPIO_Init+0x232>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a54      	ldr	r2, [pc, #336]	@ (80024c8 <HAL_GPIO_Init+0x33c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01f      	beq.n	80023ba <HAL_GPIO_Init+0x22e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a53      	ldr	r2, [pc, #332]	@ (80024cc <HAL_GPIO_Init+0x340>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d019      	beq.n	80023b6 <HAL_GPIO_Init+0x22a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a52      	ldr	r2, [pc, #328]	@ (80024d0 <HAL_GPIO_Init+0x344>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d013      	beq.n	80023b2 <HAL_GPIO_Init+0x226>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a51      	ldr	r2, [pc, #324]	@ (80024d4 <HAL_GPIO_Init+0x348>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d00d      	beq.n	80023ae <HAL_GPIO_Init+0x222>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a50      	ldr	r2, [pc, #320]	@ (80024d8 <HAL_GPIO_Init+0x34c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d007      	beq.n	80023aa <HAL_GPIO_Init+0x21e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a4f      	ldr	r2, [pc, #316]	@ (80024dc <HAL_GPIO_Init+0x350>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d101      	bne.n	80023a6 <HAL_GPIO_Init+0x21a>
 80023a2:	2309      	movs	r3, #9
 80023a4:	e012      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023a6:	230a      	movs	r3, #10
 80023a8:	e010      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023aa:	2308      	movs	r3, #8
 80023ac:	e00e      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023ae:	2307      	movs	r3, #7
 80023b0:	e00c      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023b2:	2306      	movs	r3, #6
 80023b4:	e00a      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023b6:	2305      	movs	r3, #5
 80023b8:	e008      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023ba:	2304      	movs	r3, #4
 80023bc:	e006      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023be:	2303      	movs	r3, #3
 80023c0:	e004      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e002      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023c6:	2301      	movs	r3, #1
 80023c8:	e000      	b.n	80023cc <HAL_GPIO_Init+0x240>
 80023ca:	2300      	movs	r3, #0
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	f002 0203 	and.w	r2, r2, #3
 80023d2:	0092      	lsls	r2, r2, #2
 80023d4:	4093      	lsls	r3, r2
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023dc:	4935      	ldr	r1, [pc, #212]	@ (80024b4 <HAL_GPIO_Init+0x328>)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	089b      	lsrs	r3, r3, #2
 80023e2:	3302      	adds	r3, #2
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ea:	4b3d      	ldr	r3, [pc, #244]	@ (80024e0 <HAL_GPIO_Init+0x354>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800240e:	4a34      	ldr	r2, [pc, #208]	@ (80024e0 <HAL_GPIO_Init+0x354>)
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002414:	4b32      	ldr	r3, [pc, #200]	@ (80024e0 <HAL_GPIO_Init+0x354>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	43db      	mvns	r3, r3
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	4013      	ands	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002438:	4a29      	ldr	r2, [pc, #164]	@ (80024e0 <HAL_GPIO_Init+0x354>)
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800243e:	4b28      	ldr	r3, [pc, #160]	@ (80024e0 <HAL_GPIO_Init+0x354>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002462:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_GPIO_Init+0x354>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002468:	4b1d      	ldr	r3, [pc, #116]	@ (80024e0 <HAL_GPIO_Init+0x354>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800248c:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <HAL_GPIO_Init+0x354>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3301      	adds	r3, #1
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	2b0f      	cmp	r3, #15
 800249c:	f67f ae84 	bls.w	80021a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3724      	adds	r7, #36	@ 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40013800 	.word	0x40013800
 80024b8:	40020000 	.word	0x40020000
 80024bc:	40020400 	.word	0x40020400
 80024c0:	40020800 	.word	0x40020800
 80024c4:	40020c00 	.word	0x40020c00
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40021400 	.word	0x40021400
 80024d0:	40021800 	.word	0x40021800
 80024d4:	40021c00 	.word	0x40021c00
 80024d8:	40022000 	.word	0x40022000
 80024dc:	40022400 	.word	0x40022400
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
 80024f0:	4613      	mov	r3, r2
 80024f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024f4:	787b      	ldrb	r3, [r7, #1]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024fa:	887a      	ldrh	r2, [r7, #2]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002500:	e003      	b.n	800250a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	041a      	lsls	r2, r3, #16
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	619a      	str	r2, [r3, #24]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002528:	887a      	ldrh	r2, [r7, #2]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4013      	ands	r3, r2
 800252e:	041a      	lsls	r2, r3, #16
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43d9      	mvns	r1, r3
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	400b      	ands	r3, r1
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	619a      	str	r2, [r3, #24]
}
 800253e:	bf00      	nop
 8002540:	3714      	adds	r7, #20
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e12b      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fb08 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	@ 0x24
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800259e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025b0:	f001 fa64 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 80025b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a81      	ldr	r2, [pc, #516]	@ (80027c0 <HAL_I2C_Init+0x274>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d807      	bhi.n	80025d0 <HAL_I2C_Init+0x84>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4a80      	ldr	r2, [pc, #512]	@ (80027c4 <HAL_I2C_Init+0x278>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	bf94      	ite	ls
 80025c8:	2301      	movls	r3, #1
 80025ca:	2300      	movhi	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e006      	b.n	80025de <HAL_I2C_Init+0x92>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	4a7d      	ldr	r2, [pc, #500]	@ (80027c8 <HAL_I2C_Init+0x27c>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bf94      	ite	ls
 80025d8:	2301      	movls	r3, #1
 80025da:	2300      	movhi	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0e7      	b.n	80027b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4a78      	ldr	r2, [pc, #480]	@ (80027cc <HAL_I2C_Init+0x280>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	0c9b      	lsrs	r3, r3, #18
 80025f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	4a6a      	ldr	r2, [pc, #424]	@ (80027c0 <HAL_I2C_Init+0x274>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d802      	bhi.n	8002620 <HAL_I2C_Init+0xd4>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	3301      	adds	r3, #1
 800261e:	e009      	b.n	8002634 <HAL_I2C_Init+0xe8>
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	4a69      	ldr	r2, [pc, #420]	@ (80027d0 <HAL_I2C_Init+0x284>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	099b      	lsrs	r3, r3, #6
 8002632:	3301      	adds	r3, #1
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	430b      	orrs	r3, r1
 800263a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002646:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	495c      	ldr	r1, [pc, #368]	@ (80027c0 <HAL_I2C_Init+0x274>)
 8002650:	428b      	cmp	r3, r1
 8002652:	d819      	bhi.n	8002688 <HAL_I2C_Init+0x13c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1e59      	subs	r1, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002662:	1c59      	adds	r1, r3, #1
 8002664:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002668:	400b      	ands	r3, r1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_I2C_Init+0x138>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1e59      	subs	r1, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	fbb1 f3f3 	udiv	r3, r1, r3
 800267c:	3301      	adds	r3, #1
 800267e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002682:	e051      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002684:	2304      	movs	r3, #4
 8002686:	e04f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d111      	bne.n	80026b4 <HAL_I2C_Init+0x168>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e58      	subs	r0, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6859      	ldr	r1, [r3, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	440b      	add	r3, r1
 800269e:	fbb0 f3f3 	udiv	r3, r0, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	e012      	b.n	80026da <HAL_I2C_Init+0x18e>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1e58      	subs	r0, r3, #1
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6859      	ldr	r1, [r3, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	0099      	lsls	r1, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ca:	3301      	adds	r3, #1
 80026cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf0c      	ite	eq
 80026d4:	2301      	moveq	r3, #1
 80026d6:	2300      	movne	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Init+0x196>
 80026de:	2301      	movs	r3, #1
 80026e0:	e022      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10e      	bne.n	8002708 <HAL_I2C_Init+0x1bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	1e58      	subs	r0, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6859      	ldr	r1, [r3, #4]
 80026f2:	460b      	mov	r3, r1
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	440b      	add	r3, r1
 80026f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fc:	3301      	adds	r3, #1
 80026fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002706:	e00f      	b.n	8002728 <HAL_I2C_Init+0x1dc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e58      	subs	r0, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	0099      	lsls	r1, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	fbb0 f3f3 	udiv	r3, r0, r3
 800271e:	3301      	adds	r3, #1
 8002720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002724:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002728:	6879      	ldr	r1, [r7, #4]
 800272a:	6809      	ldr	r1, [r1, #0]
 800272c:	4313      	orrs	r3, r2
 800272e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	430a      	orrs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002756:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6911      	ldr	r1, [r2, #16]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	68d2      	ldr	r2, [r2, #12]
 8002762:	4311      	orrs	r1, r2
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	6812      	ldr	r2, [r2, #0]
 8002768:	430b      	orrs	r3, r1
 800276a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695a      	ldr	r2, [r3, #20]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2220      	movs	r2, #32
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	000186a0 	.word	0x000186a0
 80027c4:	001e847f 	.word	0x001e847f
 80027c8:	003d08ff 	.word	0x003d08ff
 80027cc:	431bde83 	.word	0x431bde83
 80027d0:	10624dd3 	.word	0x10624dd3

080027d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	607a      	str	r2, [r7, #4]
 80027de:	461a      	mov	r2, r3
 80027e0:	460b      	mov	r3, r1
 80027e2:	817b      	strh	r3, [r7, #10]
 80027e4:	4613      	mov	r3, r2
 80027e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e8:	f7ff f892 	bl	8001910 <HAL_GetTick>
 80027ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b20      	cmp	r3, #32
 80027f8:	f040 80e0 	bne.w	80029bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	2319      	movs	r3, #25
 8002802:	2201      	movs	r2, #1
 8002804:	4970      	ldr	r1, [pc, #448]	@ (80029c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f964 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002812:	2302      	movs	r3, #2
 8002814:	e0d3      	b.n	80029be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_I2C_Master_Transmit+0x50>
 8002820:	2302      	movs	r3, #2
 8002822:	e0cc      	b.n	80029be <HAL_I2C_Master_Transmit+0x1ea>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b01      	cmp	r3, #1
 8002838:	d007      	beq.n	800284a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f042 0201 	orr.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002858:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2221      	movs	r2, #33	@ 0x21
 800285e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2210      	movs	r2, #16
 8002866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	893a      	ldrh	r2, [r7, #8]
 800287a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4a50      	ldr	r2, [pc, #320]	@ (80029cc <HAL_I2C_Master_Transmit+0x1f8>)
 800288a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800288c:	8979      	ldrh	r1, [r7, #10]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f89c 	bl	80029d0 <I2C_MasterRequestWrite>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e08d      	b.n	80029be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	613b      	str	r3, [r7, #16]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028b8:	e066      	b.n	8002988 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	6a39      	ldr	r1, [r7, #32]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 fa22 	bl	8002d08 <I2C_WaitOnTXEFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d107      	bne.n	80028e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e06b      	b.n	80029be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b04      	cmp	r3, #4
 8002922:	d11b      	bne.n	800295c <HAL_I2C_Master_Transmit+0x188>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	6a39      	ldr	r1, [r7, #32]
 8002960:	68f8      	ldr	r0, [r7, #12]
 8002962:	f000 fa19 	bl	8002d98 <I2C_WaitOnBTFFlagUntilTimeout>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00d      	beq.n	8002988 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	2b04      	cmp	r3, #4
 8002972:	d107      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002982:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e01a      	b.n	80029be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	2b00      	cmp	r3, #0
 800298e:	d194      	bne.n	80028ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800299e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2220      	movs	r2, #32
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e000      	b.n	80029be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	00100002 	.word	0x00100002
 80029cc:	ffff0000 	.word	0xffff0000

080029d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	460b      	mov	r3, r1
 80029de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	d006      	beq.n	80029fa <I2C_MasterRequestWrite+0x2a>
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d003      	beq.n	80029fa <I2C_MasterRequestWrite+0x2a>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029f8:	d108      	bne.n	8002a0c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a08:	601a      	str	r2, [r3, #0]
 8002a0a:	e00b      	b.n	8002a24 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	2b12      	cmp	r3, #18
 8002a12:	d107      	bne.n	8002a24 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f84f 	bl	8002ad4 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a4a:	d103      	bne.n	8002a54 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e035      	b.n	8002ac4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a60:	d108      	bne.n	8002a74 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a70:	611a      	str	r2, [r3, #16]
 8002a72:	e01b      	b.n	8002aac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a74:	897b      	ldrh	r3, [r7, #10]
 8002a76:	11db      	asrs	r3, r3, #7
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	f003 0306 	and.w	r3, r3, #6
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	f063 030f 	orn	r3, r3, #15
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	490e      	ldr	r1, [pc, #56]	@ (8002acc <I2C_MasterRequestWrite+0xfc>)
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f898 	bl	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e010      	b.n	8002ac4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002aa2:	897b      	ldrh	r3, [r7, #10]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	4907      	ldr	r1, [pc, #28]	@ (8002ad0 <I2C_MasterRequestWrite+0x100>)
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f888 	bl	8002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	00010008 	.word	0x00010008
 8002ad0:	00010002 	.word	0x00010002

08002ad4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ae4:	e048      	b.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aec:	d044      	beq.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aee:	f7fe ff0f 	bl	8001910 <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d302      	bcc.n	8002b04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d139      	bne.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	0c1b      	lsrs	r3, r3, #16
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d10d      	bne.n	8002b2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	43da      	mvns	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	e00c      	b.n	8002b44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	43da      	mvns	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	4013      	ands	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d116      	bne.n	8002b78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	f043 0220 	orr.w	r2, r3, #32
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e023      	b.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	0c1b      	lsrs	r3, r3, #16
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d10d      	bne.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	43da      	mvns	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	bf0c      	ite	eq
 8002b94:	2301      	moveq	r3, #1
 8002b96:	2300      	movne	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	e00c      	b.n	8002bb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	43da      	mvns	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d093      	beq.n	8002ae6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bd6:	e071      	b.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be6:	d123      	bne.n	8002c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f043 0204 	orr.w	r2, r3, #4
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e067      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c36:	d041      	beq.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fe fe6a 	bl	8001910 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d136      	bne.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	0c1b      	lsrs	r3, r3, #16
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10c      	bne.n	8002c72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4013      	ands	r3, r2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	bf14      	ite	ne
 8002c6a:	2301      	movne	r3, #1
 8002c6c:	2300      	moveq	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	e00b      	b.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	43da      	mvns	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d016      	beq.n	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e021      	b.n	8002d00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	0c1b      	lsrs	r3, r3, #16
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10c      	bne.n	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	e00b      	b.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f47f af6d 	bne.w	8002bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d14:	e034      	b.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f000 f886 	bl	8002e28 <I2C_IsAcknowledgeFailed>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e034      	b.n	8002d90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002d2c:	d028      	beq.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2e:	f7fe fdef 	bl	8001910 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d11d      	bne.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4e:	2b80      	cmp	r3, #128	@ 0x80
 8002d50:	d016      	beq.n	8002d80 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6c:	f043 0220 	orr.w	r2, r3, #32
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e007      	b.n	8002d90 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8a:	2b80      	cmp	r3, #128	@ 0x80
 8002d8c:	d1c3      	bne.n	8002d16 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da4:	e034      	b.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f83e 	bl	8002e28 <I2C_IsAcknowledgeFailed>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e034      	b.n	8002e20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dbc:	d028      	beq.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbe:	f7fe fda7 	bl	8001910 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d302      	bcc.n	8002dd4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d11d      	bne.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d016      	beq.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e007      	b.n	8002e20 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d1c3      	bne.n	8002da6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e3e:	d11b      	bne.n	8002e78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	f043 0204 	orr.w	r2, r3, #4
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e000      	b.n	8002e7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b20      	cmp	r3, #32
 8002e9a:	d129      	bne.n	8002ef0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2224      	movs	r2, #36	@ 0x24
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 0210 	bic.w	r2, r2, #16
 8002ec2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
 8002f06:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d12a      	bne.n	8002f6e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2224      	movs	r2, #36	@ 0x24
 8002f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002f38:	89fb      	ldrh	r3, [r7, #14]
 8002f3a:	f023 030f 	bic.w	r3, r3, #15
 8002f3e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	89fb      	ldrh	r3, [r7, #14]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	89fa      	ldrh	r2, [r7, #14]
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0201 	orr.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d101      	bne.n	8002f8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e101      	b.n	8003192 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d106      	bne.n	8002fae <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f7fd ff0f 	bl	8000dcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fbc:	d102      	bne.n	8002fc4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fb49 	bl	8005660 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6818      	ldr	r0, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7c1a      	ldrb	r2, [r3, #16]
 8002fd6:	f88d 2000 	strb.w	r2, [sp]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fde:	f002 fadb 	bl	8005598 <USB_CoreInit>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0ce      	b.n	8003192 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 fb41 	bl	8005682 <USB_SetCurrentMode>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0bf      	b.n	8003192 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003012:	2300      	movs	r3, #0
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e04a      	b.n	80030ae <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4413      	add	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3315      	adds	r3, #21
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800302c:	7bfa      	ldrb	r2, [r7, #15]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	4413      	add	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3314      	adds	r3, #20
 800303c:	7bfa      	ldrb	r2, [r7, #15]
 800303e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003040:	7bfa      	ldrb	r2, [r7, #15]
 8003042:	7bfb      	ldrb	r3, [r7, #15]
 8003044:	b298      	uxth	r0, r3
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	332e      	adds	r3, #46	@ 0x2e
 8003054:	4602      	mov	r2, r0
 8003056:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003058:	7bfa      	ldrb	r2, [r7, #15]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3318      	adds	r3, #24
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800306c:	7bfa      	ldrb	r2, [r7, #15]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	331c      	adds	r3, #28
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003080:	7bfa      	ldrb	r2, [r7, #15]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4413      	add	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3320      	adds	r3, #32
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003094:	7bfa      	ldrb	r2, [r7, #15]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	3324      	adds	r3, #36	@ 0x24
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	3301      	adds	r3, #1
 80030ac:	73fb      	strb	r3, [r7, #15]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	791b      	ldrb	r3, [r3, #4]
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d3af      	bcc.n	8003018 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e044      	b.n	8003148 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030be:	7bfa      	ldrb	r2, [r7, #15]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030d4:	7bfa      	ldrb	r2, [r7, #15]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003100:	7bfa      	ldrb	r2, [r7, #15]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003112:	2200      	movs	r2, #0
 8003114:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003116:	7bfa      	ldrb	r2, [r7, #15]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003142:	7bfb      	ldrb	r3, [r7, #15]
 8003144:	3301      	adds	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	791b      	ldrb	r3, [r3, #4]
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	429a      	cmp	r2, r3
 8003150:	d3b5      	bcc.n	80030be <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7c1a      	ldrb	r2, [r3, #16]
 800315a:	f88d 2000 	strb.w	r2, [sp]
 800315e:	3304      	adds	r3, #4
 8003160:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003162:	f002 fadb 	bl	800571c <USB_DevInit>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e00c      	b.n	8003192 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4618      	mov	r0, r3
 800318c:	f002 fca3 	bl	8005ad6 <USB_DevDisconnect>

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e267      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d075      	beq.n	80032a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ba:	4b88      	ldr	r3, [pc, #544]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d00c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031c6:	4b85      	ldr	r3, [pc, #532]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d112      	bne.n	80031f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d2:	4b82      	ldr	r3, [pc, #520]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031de:	d10b      	bne.n	80031f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e0:	4b7e      	ldr	r3, [pc, #504]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d05b      	beq.n	80032a4 <HAL_RCC_OscConfig+0x108>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d157      	bne.n	80032a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e242      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003200:	d106      	bne.n	8003210 <HAL_RCC_OscConfig+0x74>
 8003202:	4b76      	ldr	r3, [pc, #472]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a75      	ldr	r2, [pc, #468]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e01d      	b.n	800324c <HAL_RCC_OscConfig+0xb0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x98>
 800321a:	4b70      	ldr	r3, [pc, #448]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a6f      	ldr	r2, [pc, #444]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003220:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	4b6d      	ldr	r3, [pc, #436]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6c      	ldr	r2, [pc, #432]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0xb0>
 8003234:	4b69      	ldr	r3, [pc, #420]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a68      	ldr	r2, [pc, #416]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 800323a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b66      	ldr	r3, [pc, #408]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a65      	ldr	r2, [pc, #404]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003246:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800324a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d013      	beq.n	800327c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe fb5c 	bl	8001910 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	e008      	b.n	800326e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325c:	f7fe fb58 	bl	8001910 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b64      	cmp	r3, #100	@ 0x64
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e207      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b5b      	ldr	r3, [pc, #364]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d0f0      	beq.n	800325c <HAL_RCC_OscConfig+0xc0>
 800327a:	e014      	b.n	80032a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe fb48 	bl	8001910 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003284:	f7fe fb44 	bl	8001910 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	@ 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e1f3      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	4b51      	ldr	r3, [pc, #324]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0xe8>
 80032a2:	e000      	b.n	80032a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d063      	beq.n	800337a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b2:	4b4a      	ldr	r3, [pc, #296]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00b      	beq.n	80032d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032be:	4b47      	ldr	r3, [pc, #284]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032c6:	2b08      	cmp	r3, #8
 80032c8:	d11c      	bne.n	8003304 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ca:	4b44      	ldr	r3, [pc, #272]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032d6:	4b41      	ldr	r3, [pc, #260]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_RCC_OscConfig+0x152>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e1c7      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032ee:	4b3b      	ldr	r3, [pc, #236]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4937      	ldr	r1, [pc, #220]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003302:	e03a      	b.n	800337a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d020      	beq.n	800334e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800330c:	4b34      	ldr	r3, [pc, #208]	@ (80033e0 <HAL_RCC_OscConfig+0x244>)
 800330e:	2201      	movs	r2, #1
 8003310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003312:	f7fe fafd 	bl	8001910 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800331a:	f7fe faf9 	bl	8001910 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e1a8      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	4b2b      	ldr	r3, [pc, #172]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0f0      	beq.n	800331a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4b28      	ldr	r3, [pc, #160]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	4925      	ldr	r1, [pc, #148]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003348:	4313      	orrs	r3, r2
 800334a:	600b      	str	r3, [r1, #0]
 800334c:	e015      	b.n	800337a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334e:	4b24      	ldr	r3, [pc, #144]	@ (80033e0 <HAL_RCC_OscConfig+0x244>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe fadc 	bl	8001910 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335c:	f7fe fad8 	bl	8001910 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e187      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0308 	and.w	r3, r3, #8
 8003382:	2b00      	cmp	r3, #0
 8003384:	d036      	beq.n	80033f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d016      	beq.n	80033bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800338e:	4b15      	ldr	r3, [pc, #84]	@ (80033e4 <HAL_RCC_OscConfig+0x248>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fe fabc 	bl	8001910 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe fab8 	bl	8001910 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e167      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	4b0b      	ldr	r3, [pc, #44]	@ (80033dc <HAL_RCC_OscConfig+0x240>)
 80033b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x200>
 80033ba:	e01b      	b.n	80033f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033bc:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <HAL_RCC_OscConfig+0x248>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c2:	f7fe faa5 	bl	8001910 <HAL_GetTick>
 80033c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	e00e      	b.n	80033e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ca:	f7fe faa1 	bl	8001910 <HAL_GetTick>
 80033ce:	4602      	mov	r2, r0
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	1ad3      	subs	r3, r2, r3
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d907      	bls.n	80033e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e150      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
 80033dc:	40023800 	.word	0x40023800
 80033e0:	42470000 	.word	0x42470000
 80033e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	4b88      	ldr	r3, [pc, #544]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ea      	bne.n	80033ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8097 	beq.w	8003530 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003402:	2300      	movs	r3, #0
 8003404:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003406:	4b81      	ldr	r3, [pc, #516]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10f      	bne.n	8003432 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b7d      	ldr	r3, [pc, #500]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	4a7c      	ldr	r2, [pc, #496]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 800341c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	@ 0x40
 8003422:	4b7a      	ldr	r3, [pc, #488]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003432:	4b77      	ldr	r3, [pc, #476]	@ (8003610 <HAL_RCC_OscConfig+0x474>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d118      	bne.n	8003470 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800343e:	4b74      	ldr	r3, [pc, #464]	@ (8003610 <HAL_RCC_OscConfig+0x474>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a73      	ldr	r2, [pc, #460]	@ (8003610 <HAL_RCC_OscConfig+0x474>)
 8003444:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003448:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800344a:	f7fe fa61 	bl	8001910 <HAL_GetTick>
 800344e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	e008      	b.n	8003464 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003452:	f7fe fa5d 	bl	8001910 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b02      	cmp	r3, #2
 800345e:	d901      	bls.n	8003464 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e10c      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	4b6a      	ldr	r3, [pc, #424]	@ (8003610 <HAL_RCC_OscConfig+0x474>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0f0      	beq.n	8003452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d106      	bne.n	8003486 <HAL_RCC_OscConfig+0x2ea>
 8003478:	4b64      	ldr	r3, [pc, #400]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800347c:	4a63      	ldr	r2, [pc, #396]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	6713      	str	r3, [r2, #112]	@ 0x70
 8003484:	e01c      	b.n	80034c0 <HAL_RCC_OscConfig+0x324>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b05      	cmp	r3, #5
 800348c:	d10c      	bne.n	80034a8 <HAL_RCC_OscConfig+0x30c>
 800348e:	4b5f      	ldr	r3, [pc, #380]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003492:	4a5e      	ldr	r2, [pc, #376]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 8003494:	f043 0304 	orr.w	r3, r3, #4
 8003498:	6713      	str	r3, [r2, #112]	@ 0x70
 800349a:	4b5c      	ldr	r3, [pc, #368]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800349e:	4a5b      	ldr	r2, [pc, #364]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80034a6:	e00b      	b.n	80034c0 <HAL_RCC_OscConfig+0x324>
 80034a8:	4b58      	ldr	r3, [pc, #352]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ac:	4a57      	ldr	r2, [pc, #348]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80034ae:	f023 0301 	bic.w	r3, r3, #1
 80034b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034b4:	4b55      	ldr	r3, [pc, #340]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80034b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b8:	4a54      	ldr	r2, [pc, #336]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80034ba:	f023 0304 	bic.w	r3, r3, #4
 80034be:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c8:	f7fe fa22 	bl	8001910 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ce:	e00a      	b.n	80034e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034d0:	f7fe fa1e 	bl	8001910 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034de:	4293      	cmp	r3, r2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0cb      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	4b49      	ldr	r3, [pc, #292]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0ee      	beq.n	80034d0 <HAL_RCC_OscConfig+0x334>
 80034f2:	e014      	b.n	800351e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034f4:	f7fe fa0c 	bl	8001910 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fa:	e00a      	b.n	8003512 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fc:	f7fe fa08 	bl	8001910 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350a:	4293      	cmp	r3, r2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e0b5      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	4b3e      	ldr	r3, [pc, #248]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 8003514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1ee      	bne.n	80034fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800351e:	7dfb      	ldrb	r3, [r7, #23]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d105      	bne.n	8003530 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4b39      	ldr	r3, [pc, #228]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003528:	4a38      	ldr	r2, [pc, #224]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 800352a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 80a1 	beq.w	800367c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800353a:	4b34      	ldr	r3, [pc, #208]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
 8003542:	2b08      	cmp	r3, #8
 8003544:	d05c      	beq.n	8003600 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b02      	cmp	r3, #2
 800354c:	d141      	bne.n	80035d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354e:	4b31      	ldr	r3, [pc, #196]	@ (8003614 <HAL_RCC_OscConfig+0x478>)
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe f9dc 	bl	8001910 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355c:	f7fe f9d8 	bl	8001910 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e087      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	4b27      	ldr	r3, [pc, #156]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69da      	ldr	r2, [r3, #28]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	019b      	lsls	r3, r3, #6
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	3b01      	subs	r3, #1
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359c:	061b      	lsls	r3, r3, #24
 800359e:	491b      	ldr	r1, [pc, #108]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <HAL_RCC_OscConfig+0x478>)
 80035a6:	2201      	movs	r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fe f9b1 	bl	8001910 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b2:	f7fe f9ad 	bl	8001910 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e05c      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c4:	4b11      	ldr	r3, [pc, #68]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x416>
 80035d0:	e054      	b.n	800367c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <HAL_RCC_OscConfig+0x478>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe f99a 	bl	8001910 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe f996 	bl	8001910 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e045      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_RCC_OscConfig+0x470>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x444>
 80035fe:	e03d      	b.n	800367c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d107      	bne.n	8003618 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e038      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
 800360c:	40023800 	.word	0x40023800
 8003610:	40007000 	.word	0x40007000
 8003614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003618:	4b1b      	ldr	r3, [pc, #108]	@ (8003688 <HAL_RCC_OscConfig+0x4ec>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d028      	beq.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003630:	429a      	cmp	r2, r3
 8003632:	d121      	bne.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d11a      	bne.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003648:	4013      	ands	r3, r2
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800364e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003650:	4293      	cmp	r3, r2
 8003652:	d111      	bne.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	3b01      	subs	r3, #1
 8003662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0cc      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b68      	ldr	r3, [pc, #416]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d90c      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b65      	ldr	r3, [pc, #404]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b63      	ldr	r3, [pc, #396]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0b8      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e0:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a58      	ldr	r2, [pc, #352]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f8:	4b53      	ldr	r3, [pc, #332]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a52      	ldr	r2, [pc, #328]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b50      	ldr	r3, [pc, #320]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	494d      	ldr	r1, [pc, #308]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d044      	beq.n	80037ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d119      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d003      	beq.n	800374a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	2b03      	cmp	r3, #3
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b3f      	ldr	r3, [pc, #252]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e067      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b37      	ldr	r3, [pc, #220]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4934      	ldr	r1, [pc, #208]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	4313      	orrs	r3, r2
 800377a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7fe f8c8 	bl	8001910 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fe f8c4 	bl	8001910 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e04f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ac:	4b25      	ldr	r3, [pc, #148]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d20c      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b22      	ldr	r3, [pc, #136]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b20      	ldr	r3, [pc, #128]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e032      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b19      	ldr	r3, [pc, #100]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4916      	ldr	r1, [pc, #88]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fe:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	490e      	ldr	r1, [pc, #56]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003812:	f000 f821 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003816:	4602      	mov	r2, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	490a      	ldr	r1, [pc, #40]	@ (800384c <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	5ccb      	ldrb	r3, [r1, r3]
 8003826:	fa22 f303 	lsr.w	r3, r2, r3
 800382a:	4a09      	ldr	r2, [pc, #36]	@ (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800382e:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe f828 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023c00 	.word	0x40023c00
 8003848:	40023800 	.word	0x40023800
 800384c:	08005c10 	.word	0x08005c10
 8003850:	20000000 	.word	0x20000000
 8003854:	20000010 	.word	0x20000010

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800385c:	b094      	sub	sp, #80	@ 0x50
 800385e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	647b      	str	r3, [r7, #68]	@ 0x44
 8003864:	2300      	movs	r3, #0
 8003866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003868:	2300      	movs	r3, #0
 800386a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003870:	4b79      	ldr	r3, [pc, #484]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d00d      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x40>
 800387c:	2b08      	cmp	r3, #8
 800387e:	f200 80e1 	bhi.w	8003a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x34>
 8003886:	2b04      	cmp	r3, #4
 8003888:	d003      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x3a>
 800388a:	e0db      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b73      	ldr	r3, [pc, #460]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800388e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003890:	e0db      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003892:	4b73      	ldr	r3, [pc, #460]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8003894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003896:	e0d8      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003898:	4b6f      	ldr	r3, [pc, #444]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d063      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	2200      	movs	r2, #0
 80038b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038c2:	2300      	movs	r3, #0
 80038c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038ca:	4622      	mov	r2, r4
 80038cc:	462b      	mov	r3, r5
 80038ce:	f04f 0000 	mov.w	r0, #0
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	0159      	lsls	r1, r3, #5
 80038d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038dc:	0150      	lsls	r0, r2, #5
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4621      	mov	r1, r4
 80038e4:	1a51      	subs	r1, r2, r1
 80038e6:	6139      	str	r1, [r7, #16]
 80038e8:	4629      	mov	r1, r5
 80038ea:	eb63 0301 	sbc.w	r3, r3, r1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038fc:	4659      	mov	r1, fp
 80038fe:	018b      	lsls	r3, r1, #6
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003906:	4651      	mov	r1, sl
 8003908:	018a      	lsls	r2, r1, #6
 800390a:	4651      	mov	r1, sl
 800390c:	ebb2 0801 	subs.w	r8, r2, r1
 8003910:	4659      	mov	r1, fp
 8003912:	eb63 0901 	sbc.w	r9, r3, r1
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392a:	4690      	mov	r8, r2
 800392c:	4699      	mov	r9, r3
 800392e:	4623      	mov	r3, r4
 8003930:	eb18 0303 	adds.w	r3, r8, r3
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	462b      	mov	r3, r5
 8003938:	eb49 0303 	adc.w	r3, r9, r3
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800394a:	4629      	mov	r1, r5
 800394c:	024b      	lsls	r3, r1, #9
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003954:	4621      	mov	r1, r4
 8003956:	024a      	lsls	r2, r1, #9
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395e:	2200      	movs	r2, #0
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003968:	f7fc fc40 	bl	80001ec <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003974:	e058      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003976:	4b38      	ldr	r3, [pc, #224]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	2200      	movs	r2, #0
 800397e:	4618      	mov	r0, r3
 8003980:	4611      	mov	r1, r2
 8003982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
 800398c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	f04f 0000 	mov.w	r0, #0
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	0159      	lsls	r1, r3, #5
 800399e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a2:	0150      	lsls	r0, r2, #5
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4641      	mov	r1, r8
 80039aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ae:	4649      	mov	r1, r9
 80039b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039c8:	ebb2 040a 	subs.w	r4, r2, sl
 80039cc:	eb63 050b 	sbc.w	r5, r3, fp
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	00eb      	lsls	r3, r5, #3
 80039da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039de:	00e2      	lsls	r2, r4, #3
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	4643      	mov	r3, r8
 80039e6:	18e3      	adds	r3, r4, r3
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	464b      	mov	r3, r9
 80039ec:	eb45 0303 	adc.w	r3, r5, r3
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039fe:	4629      	mov	r1, r5
 8003a00:	028b      	lsls	r3, r1, #10
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a08:	4621      	mov	r1, r4
 8003a0a:	028a      	lsls	r2, r1, #10
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a12:	2200      	movs	r2, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	61fa      	str	r2, [r7, #28]
 8003a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a1c:	f7fc fbe6 	bl	80001ec <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4613      	mov	r3, r2
 8003a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	3301      	adds	r3, #1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003a38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3750      	adds	r7, #80	@ 0x50
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	007a1200 	.word	0x007a1200

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b03      	ldr	r3, [pc, #12]	@ (8003a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	20000000 	.word	0x20000000

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a80:	f7ff fff0 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0a9b      	lsrs	r3, r3, #10
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	@ (8003aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	08005c20 	.word	0x08005c20

08003aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa8:	f7ff ffdc 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0b5b      	lsrs	r3, r3, #13
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	@ (8003ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	08005c20 	.word	0x08005c20

08003acc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d075      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b00:	4b91      	ldr	r3, [pc, #580]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b06:	f7fd ff03 	bl	8001910 <HAL_GetTick>
 8003b0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b0e:	f7fd feff 	bl	8001910 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e189      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b20:	4b8a      	ldr	r3, [pc, #552]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f0      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	019a      	lsls	r2, r3, #6
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	071b      	lsls	r3, r3, #28
 8003b44:	4981      	ldr	r1, [pc, #516]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01f      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b58:	4b7c      	ldr	r3, [pc, #496]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b5e:	0f1b      	lsrs	r3, r3, #28
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	019a      	lsls	r2, r3, #6
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	431a      	orrs	r2, r3
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	071b      	lsls	r3, r3, #28
 8003b78:	4974      	ldr	r1, [pc, #464]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b80:	4b72      	ldr	r3, [pc, #456]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b86:	f023 021f 	bic.w	r2, r3, #31
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	496e      	ldr	r1, [pc, #440]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00d      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	019a      	lsls	r2, r3, #6
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	061b      	lsls	r3, r3, #24
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	071b      	lsls	r3, r3, #28
 8003bb8:	4964      	ldr	r1, [pc, #400]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bc0:	4b61      	ldr	r3, [pc, #388]	@ (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bc6:	f7fd fea3 	bl	8001910 <HAL_GetTick>
 8003bca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003bce:	f7fd fe9f 	bl	8001910 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e129      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003be0:	4b5a      	ldr	r3, [pc, #360]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d079      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003c04:	4b52      	ldr	r3, [pc, #328]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0a:	f7fd fe81 	bl	8001910 <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003c12:	f7fd fe7d 	bl	8001910 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e107      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c24:	4b49      	ldr	r3, [pc, #292]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c30:	d0ef      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d020      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c3e:	4b43      	ldr	r3, [pc, #268]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c44:	0f1b      	lsrs	r3, r3, #28
 8003c46:	f003 0307 	and.w	r3, r3, #7
 8003c4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	019a      	lsls	r2, r3, #6
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	061b      	lsls	r3, r3, #24
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	071b      	lsls	r3, r3, #28
 8003c5e:	493b      	ldr	r1, [pc, #236]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c66:	4b39      	ldr	r3, [pc, #228]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	021b      	lsls	r3, r3, #8
 8003c78:	4934      	ldr	r1, [pc, #208]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01e      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	0e1b      	lsrs	r3, r3, #24
 8003c94:	f003 030f 	and.w	r3, r3, #15
 8003c98:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	019a      	lsls	r2, r3, #6
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	061b      	lsls	r3, r3, #24
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	071b      	lsls	r3, r3, #28
 8003cac:	4927      	ldr	r1, [pc, #156]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003cb4:	4b25      	ldr	r3, [pc, #148]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	4922      	ldr	r1, [pc, #136]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cca:	4b21      	ldr	r3, [pc, #132]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd0:	f7fd fe1e 	bl	8001910 <HAL_GetTick>
 8003cd4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003cd8:	f7fd fe1a 	bl	8001910 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e0a4      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cea:	4b18      	ldr	r3, [pc, #96]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf6:	d1ef      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0320 	and.w	r3, r3, #32
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 808b 	beq.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	4b10      	ldr	r3, [pc, #64]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d1e:	60fb      	str	r3, [r7, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d22:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a0b      	ldr	r2, [pc, #44]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d2e:	f7fd fdef 	bl	8001910 <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d34:	e010      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d36:	f7fd fdeb 	bl	8001910 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d909      	bls.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e075      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003d48:	42470068 	.word	0x42470068
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	42470070 	.word	0x42470070
 8003d54:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d58:	4b38      	ldr	r3, [pc, #224]	@ (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0e8      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d64:	4b36      	ldr	r3, [pc, #216]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d02f      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d028      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d82:	4b2f      	ldr	r3, [pc, #188]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d92:	4b2c      	ldr	r3, [pc, #176]	@ (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d98:	4a29      	ldr	r2, [pc, #164]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d9e:	4b28      	ldr	r3, [pc, #160]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d114      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003daa:	f7fd fdb1 	bl	8001910 <HAL_GetTick>
 8003dae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd fdad 	bl	8001910 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e035      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0ee      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ddc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003de0:	d10d      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003de2:	4b17      	ldr	r3, [pc, #92]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df6:	4912      	ldr	r1, [pc, #72]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]
 8003dfc:	e005      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	4a0f      	ldr	r2, [pc, #60]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e04:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e08:	6093      	str	r3, [r2, #8]
 8003e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	490a      	ldr	r1, [pc, #40]	@ (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003e2e:	4b06      	ldr	r3, [pc, #24]	@ (8003e48 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003e30:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	40023800 	.word	0x40023800
 8003e44:	42470e40 	.word	0x42470e40
 8003e48:	424711e0 	.word	0x424711e0

08003e4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e073      	b.n	8003f4a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	7f5b      	ldrb	r3, [r3, #29]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d105      	bne.n	8003e78 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc fed0 	bl	8000c18 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f003 0310 	and.w	r3, r3, #16
 8003e88:	2b10      	cmp	r3, #16
 8003e8a:	d055      	beq.n	8003f38 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	22ca      	movs	r2, #202	@ 0xca
 8003e92:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2253      	movs	r2, #83	@ 0x53
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fa49 	bl	8004334 <RTC_EnterInitMode>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d12c      	bne.n	8003f06 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ebe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6899      	ldr	r1, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	68d2      	ldr	r2, [r2, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6919      	ldr	r1, [r3, #16]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	041a      	lsls	r2, r3, #16
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fa50 	bl	80043a2 <RTC_ExitInitMode>
 8003f02:	4603      	mov	r3, r0
 8003f04:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d110      	bne.n	8003f2e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	22ff      	movs	r2, #255	@ 0xff
 8003f34:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f36:	e001      	b.n	8003f3c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d102      	bne.n	8003f48 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f52:	b590      	push	{r4, r7, lr}
 8003f54:	b087      	sub	sp, #28
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	7f1b      	ldrb	r3, [r3, #28]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_RTC_SetTime+0x1c>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e087      	b.n	800407e <HAL_RTC_SetTime+0x12c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2202      	movs	r2, #2
 8003f78:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d126      	bne.n	8003fce <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	2200      	movs	r2, #0
 8003f92:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fa27 	bl	80043ec <RTC_ByteToBcd2>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	785b      	ldrb	r3, [r3, #1]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fa20 	bl	80043ec <RTC_ByteToBcd2>
 8003fac:	4603      	mov	r3, r0
 8003fae:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fb0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	789b      	ldrb	r3, [r3, #2]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fa18 	bl	80043ec <RTC_ByteToBcd2>
 8003fbc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fbe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	78db      	ldrb	r3, [r3, #3]
 8003fc6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e018      	b.n	8004000 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003fee:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003ff4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	78db      	ldrb	r3, [r3, #3]
 8003ffa:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	22ca      	movs	r2, #202	@ 0xca
 8004006:	625a      	str	r2, [r3, #36]	@ 0x24
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2253      	movs	r2, #83	@ 0x53
 800400e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004010:	68f8      	ldr	r0, [r7, #12]
 8004012:	f000 f98f 	bl	8004334 <RTC_EnterInitMode>
 8004016:	4603      	mov	r3, r0
 8004018:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d120      	bne.n	8004062 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800402a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800402e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689a      	ldr	r2, [r3, #8]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800403e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6899      	ldr	r1, [r3, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	431a      	orrs	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f9a2 	bl	80043a2 <RTC_ExitInitMode>
 800405e:	4603      	mov	r3, r0
 8004060:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004062:	7cfb      	ldrb	r3, [r7, #19]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d102      	bne.n	800406e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	22ff      	movs	r2, #255	@ 0xff
 8004074:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]

  return status;
 800407c:	7cfb      	ldrb	r3, [r7, #19]
}
 800407e:	4618      	mov	r0, r3
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	bd90      	pop	{r4, r7, pc}

08004086 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80040b8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80040bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	0c1b      	lsrs	r3, r3, #16
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	0a1b      	lsrs	r3, r3, #8
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	0d9b      	lsrs	r3, r3, #22
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d11a      	bne.n	8004138 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f98e 	bl	8004428 <RTC_Bcd2ToByte>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 f985 	bl	8004428 <RTC_Bcd2ToByte>
 800411e:	4603      	mov	r3, r0
 8004120:	461a      	mov	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	789b      	ldrb	r3, [r3, #2]
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f97c 	bl	8004428 <RTC_Bcd2ToByte>
 8004130:	4603      	mov	r3, r0
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004142:	b590      	push	{r4, r7, lr}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	7f1b      	ldrb	r3, [r3, #28]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_RTC_SetDate+0x1c>
 800415a:	2302      	movs	r3, #2
 800415c:	e071      	b.n	8004242 <HAL_RTC_SetDate+0x100>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2202      	movs	r2, #2
 8004168:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10e      	bne.n	800418e <HAL_RTC_SetDate+0x4c>
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	785b      	ldrb	r3, [r3, #1]
 8004180:	f023 0310 	bic.w	r3, r3, #16
 8004184:	b2db      	uxtb	r3, r3
 8004186:	330a      	adds	r3, #10
 8004188:	b2da      	uxtb	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d11c      	bne.n	80041ce <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	78db      	ldrb	r3, [r3, #3]
 8004198:	4618      	mov	r0, r3
 800419a:	f000 f927 	bl	80043ec <RTC_ByteToBcd2>
 800419e:	4603      	mov	r3, r0
 80041a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f920 	bl	80043ec <RTC_ByteToBcd2>
 80041ac:	4603      	mov	r3, r0
 80041ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	789b      	ldrb	r3, [r3, #2]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 f918 	bl	80043ec <RTC_ByteToBcd2>
 80041bc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041be:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	e00e      	b.n	80041ec <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	78db      	ldrb	r3, [r3, #3]
 80041d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	785b      	ldrb	r3, [r3, #1]
 80041d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041da:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80041e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80041e8:	4313      	orrs	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	22ca      	movs	r2, #202	@ 0xca
 80041f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2253      	movs	r2, #83	@ 0x53
 80041fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f899 	bl	8004334 <RTC_EnterInitMode>
 8004202:	4603      	mov	r3, r0
 8004204:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004206:	7cfb      	ldrb	r3, [r7, #19]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10c      	bne.n	8004226 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004216:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800421a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8c0 	bl	80043a2 <RTC_ExitInitMode>
 8004222:	4603      	mov	r3, r0
 8004224:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004226:	7cfb      	ldrb	r3, [r7, #19]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2201      	movs	r2, #1
 8004230:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	22ff      	movs	r2, #255	@ 0xff
 8004238:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	771a      	strb	r2, [r3, #28]

  return status;
 8004240:	7cfb      	ldrb	r3, [r7, #19]
}
 8004242:	4618      	mov	r0, r3
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd90      	pop	{r4, r7, pc}

0800424a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b086      	sub	sp, #24
 800424e:	af00      	add	r7, sp, #0
 8004250:	60f8      	str	r0, [r7, #12]
 8004252:	60b9      	str	r1, [r7, #8]
 8004254:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004264:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004268:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	b2db      	uxtb	r3, r3
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	b2da      	uxtb	r2, r3
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	0b5b      	lsrs	r3, r3, #13
 8004296:	b2db      	uxtb	r3, r3
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d11a      	bne.n	80042de <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	78db      	ldrb	r3, [r3, #3]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 f8bb 	bl	8004428 <RTC_Bcd2ToByte>
 80042b2:	4603      	mov	r3, r0
 80042b4:	461a      	mov	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f8b2 	bl	8004428 <RTC_Bcd2ToByte>
 80042c4:	4603      	mov	r3, r0
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	789b      	ldrb	r3, [r3, #2]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 f8a9 	bl	8004428 <RTC_Bcd2ToByte>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004330 <HAL_RTC_WaitForSynchro+0x48>)
 80042fa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042fc:	f7fd fb08 	bl	8001910 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004302:	e009      	b.n	8004318 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004304:	f7fd fb04 	bl	8001910 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004312:	d901      	bls.n	8004318 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e007      	b.n	8004328 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ee      	beq.n	8004304 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}
 8004330:	00017f5f 	.word	0x00017f5f

08004334 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d122      	bne.n	8004398 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004360:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004362:	f7fd fad5 	bl	8001910 <HAL_GetTick>
 8004366:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004368:	e00c      	b.n	8004384 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800436a:	f7fd fad1 	bl	8001910 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004378:	d904      	bls.n	8004384 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2204      	movs	r2, #4
 800437e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <RTC_EnterInitMode+0x64>
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d1e8      	bne.n	800436a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004398:	7bfb      	ldrb	r3, [r7, #15]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043bc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10a      	bne.n	80043e2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7ff ff8b 	bl	80042e8 <HAL_RTC_WaitForSynchro>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d004      	beq.n	80043e2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2204      	movs	r2, #4
 80043dc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80043fa:	e005      	b.n	8004408 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3301      	adds	r3, #1
 8004400:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004402:	79fb      	ldrb	r3, [r7, #7]
 8004404:	3b0a      	subs	r3, #10
 8004406:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	2b09      	cmp	r3, #9
 800440c:	d8f6      	bhi.n	80043fc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	b2db      	uxtb	r3, r3
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	b2da      	uxtb	r2, r3
 8004416:	79fb      	ldrb	r3, [r7, #7]
 8004418:	4313      	orrs	r3, r2
 800441a:	b2db      	uxtb	r3, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	b2db      	uxtb	r3, r3
 8004454:	4413      	add	r3, r2
 8004456:	b2db      	uxtb	r3, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	3714      	adds	r7, #20
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e07b      	b.n	800456e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d108      	bne.n	8004490 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004486:	d009      	beq.n	800449c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	61da      	str	r2, [r3, #28]
 800448e:	e005      	b.n	800449c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7fc fbd8 	bl	8000c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2202      	movs	r2, #2
 80044c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004520:	ea42 0103 	orr.w	r1, r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004528:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	f003 0104 	and.w	r1, r3, #4
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	f003 0210 	and.w	r2, r3, #16
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69da      	ldr	r2, [r3, #28]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800455c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b088      	sub	sp, #32
 800457a:	af00      	add	r7, sp, #0
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_SPI_Transmit+0x22>
 8004594:	2302      	movs	r3, #2
 8004596:	e12d      	b.n	80047f4 <HAL_SPI_Transmit+0x27e>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80045a0:	f7fd f9b6 	bl	8001910 <HAL_GetTick>
 80045a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d002      	beq.n	80045bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045b6:	2302      	movs	r3, #2
 80045b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045ba:	e116      	b.n	80047ea <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <HAL_SPI_Transmit+0x52>
 80045c2:	88fb      	ldrh	r3, [r7, #6]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d102      	bne.n	80045ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045cc:	e10d      	b.n	80047ea <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2203      	movs	r2, #3
 80045d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88fa      	ldrh	r2, [r7, #6]
 80045e6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004614:	d10f      	bne.n	8004636 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004624:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004634:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004640:	2b40      	cmp	r3, #64	@ 0x40
 8004642:	d007      	beq.n	8004654 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004652:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800465c:	d14f      	bne.n	80046fe <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_SPI_Transmit+0xf6>
 8004666:	8afb      	ldrh	r3, [r7, #22]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d142      	bne.n	80046f2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004670:	881a      	ldrh	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467c:	1c9a      	adds	r2, r3, #2
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004686:	b29b      	uxth	r3, r3
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004690:	e02f      	b.n	80046f2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b02      	cmp	r3, #2
 800469e:	d112      	bne.n	80046c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a4:	881a      	ldrh	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	1c9a      	adds	r2, r3, #2
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80046c4:	e015      	b.n	80046f2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046c6:	f7fd f923 	bl	8001910 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d803      	bhi.n	80046de <HAL_SPI_Transmit+0x168>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046dc:	d102      	bne.n	80046e4 <HAL_SPI_Transmit+0x16e>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80046f0:	e07b      	b.n	80047ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1ca      	bne.n	8004692 <HAL_SPI_Transmit+0x11c>
 80046fc:	e050      	b.n	80047a0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_SPI_Transmit+0x196>
 8004706:	8afb      	ldrh	r3, [r7, #22]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d144      	bne.n	8004796 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	330c      	adds	r3, #12
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004732:	e030      	b.n	8004796 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b02      	cmp	r3, #2
 8004740:	d113      	bne.n	800476a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	330c      	adds	r3, #12
 800474c:	7812      	ldrb	r2, [r2, #0]
 800474e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004768:	e015      	b.n	8004796 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800476a:	f7fd f8d1 	bl	8001910 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d803      	bhi.n	8004782 <HAL_SPI_Transmit+0x20c>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004780:	d102      	bne.n	8004788 <HAL_SPI_Transmit+0x212>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d106      	bne.n	8004796 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004794:	e029      	b.n	80047ea <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1c9      	bne.n	8004734 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	6839      	ldr	r1, [r7, #0]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fbdf 	bl	8004f68 <SPI_EndRxTxTransaction>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d002      	beq.n	80047b6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2220      	movs	r2, #32
 80047b4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10a      	bne.n	80047d4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047be:	2300      	movs	r3, #0
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d002      	beq.n	80047e2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	77fb      	strb	r3, [r7, #31]
 80047e0:	e003      	b.n	80047ea <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2201      	movs	r2, #1
 80047e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80047f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3720      	adds	r7, #32
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af02      	add	r7, sp, #8
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d002      	beq.n	8004822 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800481c:	2302      	movs	r3, #2
 800481e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004820:	e0fb      	b.n	8004a1a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800482a:	d112      	bne.n	8004852 <HAL_SPI_Receive+0x56>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10e      	bne.n	8004852 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2204      	movs	r2, #4
 8004838:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800483c:	88fa      	ldrh	r2, [r7, #6]
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	4613      	mov	r3, r2
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f8ef 	bl	8004a2c <HAL_SPI_TransmitReceive>
 800484e:	4603      	mov	r3, r0
 8004850:	e0e8      	b.n	8004a24 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_SPI_Receive+0x64>
 800485c:	2302      	movs	r3, #2
 800485e:	e0e1      	b.n	8004a24 <HAL_SPI_Receive+0x228>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004868:	f7fd f852 	bl	8001910 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <HAL_SPI_Receive+0x7e>
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d102      	bne.n	8004880 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800487e:	e0cc      	b.n	8004a1a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2204      	movs	r2, #4
 8004884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2200      	movs	r2, #0
 80048a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048c6:	d10f      	bne.n	80048e8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80048d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f2:	2b40      	cmp	r3, #64	@ 0x40
 80048f4:	d007      	beq.n	8004906 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004904:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d16a      	bne.n	80049e4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800490e:	e032      	b.n	8004976 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b01      	cmp	r3, #1
 800491c:	d115      	bne.n	800494a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f103 020c 	add.w	r2, r3, #12
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	7812      	ldrb	r2, [r2, #0]
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004948:	e015      	b.n	8004976 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494a:	f7fc ffe1 	bl	8001910 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d803      	bhi.n	8004962 <HAL_SPI_Receive+0x166>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004960:	d102      	bne.n	8004968 <HAL_SPI_Receive+0x16c>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d106      	bne.n	8004976 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004974:	e051      	b.n	8004a1a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1c7      	bne.n	8004910 <HAL_SPI_Receive+0x114>
 8004980:	e035      	b.n	80049ee <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d113      	bne.n	80049b8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499a:	b292      	uxth	r2, r2
 800499c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049a2:	1c9a      	adds	r2, r3, #2
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	3b01      	subs	r3, #1
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80049b6:	e015      	b.n	80049e4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b8:	f7fc ffaa 	bl	8001910 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d803      	bhi.n	80049d0 <HAL_SPI_Receive+0x1d4>
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ce:	d102      	bne.n	80049d6 <HAL_SPI_Receive+0x1da>
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80049e2:	e01a      	b.n	8004a1a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1c9      	bne.n	8004982 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	6839      	ldr	r1, [r7, #0]
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fa52 	bl	8004e9c <SPI_EndRxTransaction>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	75fb      	strb	r3, [r7, #23]
 8004a10:	e003      	b.n	8004a1a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	@ 0x30
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_SPI_TransmitReceive+0x26>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e198      	b.n	8004d84 <HAL_SPI_TransmitReceive+0x358>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a5a:	f7fc ff59 	bl	8001910 <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004a70:	887b      	ldrh	r3, [r7, #2]
 8004a72:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004a74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d00f      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x70>
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a82:	d107      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x68>
 8004a8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d003      	beq.n	8004a9c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004a94:	2302      	movs	r3, #2
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004a9a:	e16d      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_SPI_TransmitReceive+0x82>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_SPI_TransmitReceive+0x82>
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d103      	bne.n	8004ab6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004ab4:	e160      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d003      	beq.n	8004aca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	887a      	ldrh	r2, [r7, #2]
 8004ada:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	887a      	ldrh	r2, [r7, #2]
 8004ae0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	887a      	ldrh	r2, [r7, #2]
 8004aec:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	887a      	ldrh	r2, [r7, #2]
 8004af2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0a:	2b40      	cmp	r3, #64	@ 0x40
 8004b0c:	d007      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b26:	d17c      	bne.n	8004c22 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <HAL_SPI_TransmitReceive+0x10a>
 8004b30:	8b7b      	ldrh	r3, [r7, #26]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d16a      	bne.n	8004c0c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b3a:	881a      	ldrh	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b46:	1c9a      	adds	r2, r3, #2
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b5a:	e057      	b.n	8004c0c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d11b      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x176>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d016      	beq.n	8004ba2 <HAL_SPI_TransmitReceive+0x176>
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d113      	bne.n	8004ba2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7e:	881a      	ldrh	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b8a:	1c9a      	adds	r2, r3, #2
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d119      	bne.n	8004be4 <HAL_SPI_TransmitReceive+0x1b8>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d014      	beq.n	8004be4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc4:	b292      	uxth	r2, r2
 8004bc6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004be0:	2301      	movs	r3, #1
 8004be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004be4:	f7fc fe94 	bl	8001910 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d80b      	bhi.n	8004c0c <HAL_SPI_TransmitReceive+0x1e0>
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bfa:	d007      	beq.n	8004c0c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004c0a:	e0b5      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1a2      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x130>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d19d      	bne.n	8004b5c <HAL_SPI_TransmitReceive+0x130>
 8004c20:	e080      	b.n	8004d24 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x204>
 8004c2a:	8b7b      	ldrh	r3, [r7, #26]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d16f      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	7812      	ldrb	r2, [r2, #0]
 8004c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c56:	e05b      	b.n	8004d10 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d11c      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x274>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d017      	beq.n	8004ca0 <HAL_SPI_TransmitReceive+0x274>
 8004c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d114      	bne.n	8004ca0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	330c      	adds	r3, #12
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c88:	1c5a      	adds	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d119      	bne.n	8004ce2 <HAL_SPI_TransmitReceive+0x2b6>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d014      	beq.n	8004ce2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	b2d2      	uxtb	r2, r2
 8004cc4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ce2:	f7fc fe15 	bl	8001910 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d803      	bhi.n	8004cfa <HAL_SPI_TransmitReceive+0x2ce>
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cf8:	d102      	bne.n	8004d00 <HAL_SPI_TransmitReceive+0x2d4>
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d107      	bne.n	8004d10 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2201      	movs	r2, #1
 8004d0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004d0e:	e033      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d19e      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x22c>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d199      	bne.n	8004c58 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f91d 	bl	8004f68 <SPI_EndRxTxTransaction>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d006      	beq.n	8004d42 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004d40:	e01a      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	617b      	str	r3, [r7, #20]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d003      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6e:	e003      	b.n	8004d78 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004d80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3730      	adds	r7, #48	@ 0x30
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d9c:	f7fc fdb8 	bl	8001910 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	4413      	add	r3, r2
 8004daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dac:	f7fc fdb0 	bl	8001910 <HAL_GetTick>
 8004db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004db2:	4b39      	ldr	r3, [pc, #228]	@ (8004e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	015b      	lsls	r3, r3, #5
 8004db8:	0d1b      	lsrs	r3, r3, #20
 8004dba:	69fa      	ldr	r2, [r7, #28]
 8004dbc:	fb02 f303 	mul.w	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dc2:	e054      	b.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dca:	d050      	beq.n	8004e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dcc:	f7fc fda0 	bl	8001910 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d902      	bls.n	8004de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d13d      	bne.n	8004e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dfa:	d111      	bne.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e04:	d004      	beq.n	8004e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e0e:	d107      	bne.n	8004e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e28:	d10f      	bne.n	8004e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e017      	b.n	8004e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4013      	ands	r3, r2
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	bf0c      	ite	eq
 8004e7e:	2301      	moveq	r3, #1
 8004e80:	2300      	movne	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	79fb      	ldrb	r3, [r7, #7]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d19b      	bne.n	8004dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000000 	.word	0x20000000

08004e9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004eb0:	d111      	bne.n	8004ed6 <SPI_EndRxTransaction+0x3a>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004eba:	d004      	beq.n	8004ec6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ec4:	d107      	bne.n	8004ed6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ede:	d12a      	bne.n	8004f36 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ee8:	d012      	beq.n	8004f10 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2180      	movs	r1, #128	@ 0x80
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff ff49 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d02d      	beq.n	8004f5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f04:	f043 0220 	orr.w	r2, r3, #32
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e026      	b.n	8004f5e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	2101      	movs	r1, #1
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f7ff ff36 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d01a      	beq.n	8004f5c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f2a:	f043 0220 	orr.w	r2, r3, #32
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e013      	b.n	8004f5e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2101      	movs	r1, #1
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f7ff ff23 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d007      	beq.n	8004f5c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f50:	f043 0220 	orr.w	r2, r3, #32
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e000      	b.n	8004f5e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b088      	sub	sp, #32
 8004f6c:	af02      	add	r7, sp, #8
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	9300      	str	r3, [sp, #0]
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7ff ff04 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d007      	beq.n	8004f9a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8e:	f043 0220 	orr.w	r2, r3, #32
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e032      	b.n	8005000 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005008 <SPI_EndRxTxTransaction+0xa0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800500c <SPI_EndRxTxTransaction+0xa4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	0d5b      	lsrs	r3, r3, #21
 8004fa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb8:	d112      	bne.n	8004fe0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2180      	movs	r1, #128	@ 0x80
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fee1 	bl	8004d8c <SPI_WaitFlagStateUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d016      	beq.n	8004ffe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e00f      	b.n	8005000 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ff6:	2b80      	cmp	r3, #128	@ 0x80
 8004ff8:	d0f2      	beq.n	8004fe0 <SPI_EndRxTxTransaction+0x78>
 8004ffa:	e000      	b.n	8004ffe <SPI_EndRxTxTransaction+0x96>
        break;
 8004ffc:	bf00      	nop
  }

  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000000 	.word	0x20000000
 800500c:	165e9f81 	.word	0x165e9f81

08005010 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e042      	b.n	80050a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fb fe80 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2224      	movs	r2, #36	@ 0x24
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005052:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f82b 	bl	80050b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005068:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005078:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005088:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2220      	movs	r2, #32
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b4:	b0c0      	sub	sp, #256	@ 0x100
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691b      	ldr	r3, [r3, #16]
 80050c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050cc:	68d9      	ldr	r1, [r3, #12]
 80050ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	ea40 0301 	orr.w	r3, r0, r1
 80050d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	431a      	orrs	r2, r3
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005108:	f021 010c 	bic.w	r1, r1, #12
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005116:	430b      	orrs	r3, r1
 8005118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800512a:	6999      	ldr	r1, [r3, #24]
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	ea40 0301 	orr.w	r3, r0, r1
 8005136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b8f      	ldr	r3, [pc, #572]	@ (800537c <UART_SetConfig+0x2cc>)
 8005140:	429a      	cmp	r2, r3
 8005142:	d005      	beq.n	8005150 <UART_SetConfig+0xa0>
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b8d      	ldr	r3, [pc, #564]	@ (8005380 <UART_SetConfig+0x2d0>)
 800514c:	429a      	cmp	r2, r3
 800514e:	d104      	bne.n	800515a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005150:	f7fe fca8 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 8005154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005158:	e003      	b.n	8005162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800515a:	f7fe fc8f 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 800515e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800516c:	f040 810c 	bne.w	8005388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005174:	2200      	movs	r2, #0
 8005176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800517a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800517e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005182:	4622      	mov	r2, r4
 8005184:	462b      	mov	r3, r5
 8005186:	1891      	adds	r1, r2, r2
 8005188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800518a:	415b      	adcs	r3, r3
 800518c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800518e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005192:	4621      	mov	r1, r4
 8005194:	eb12 0801 	adds.w	r8, r2, r1
 8005198:	4629      	mov	r1, r5
 800519a:	eb43 0901 	adc.w	r9, r3, r1
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051b2:	4690      	mov	r8, r2
 80051b4:	4699      	mov	r9, r3
 80051b6:	4623      	mov	r3, r4
 80051b8:	eb18 0303 	adds.w	r3, r8, r3
 80051bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80051c0:	462b      	mov	r3, r5
 80051c2:	eb49 0303 	adc.w	r3, r9, r3
 80051c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80051ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80051da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051de:	460b      	mov	r3, r1
 80051e0:	18db      	adds	r3, r3, r3
 80051e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051e4:	4613      	mov	r3, r2
 80051e6:	eb42 0303 	adc.w	r3, r2, r3
 80051ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80051ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80051f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80051f4:	f7fa fffa 	bl	80001ec <__aeabi_uldivmod>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4b61      	ldr	r3, [pc, #388]	@ (8005384 <UART_SetConfig+0x2d4>)
 80051fe:	fba3 2302 	umull	r2, r3, r3, r2
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	011c      	lsls	r4, r3, #4
 8005206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800520a:	2200      	movs	r2, #0
 800520c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005218:	4642      	mov	r2, r8
 800521a:	464b      	mov	r3, r9
 800521c:	1891      	adds	r1, r2, r2
 800521e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005220:	415b      	adcs	r3, r3
 8005222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005228:	4641      	mov	r1, r8
 800522a:	eb12 0a01 	adds.w	sl, r2, r1
 800522e:	4649      	mov	r1, r9
 8005230:	eb43 0b01 	adc.w	fp, r3, r1
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005248:	4692      	mov	sl, r2
 800524a:	469b      	mov	fp, r3
 800524c:	4643      	mov	r3, r8
 800524e:	eb1a 0303 	adds.w	r3, sl, r3
 8005252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005256:	464b      	mov	r3, r9
 8005258:	eb4b 0303 	adc.w	r3, fp, r3
 800525c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800526c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005274:	460b      	mov	r3, r1
 8005276:	18db      	adds	r3, r3, r3
 8005278:	643b      	str	r3, [r7, #64]	@ 0x40
 800527a:	4613      	mov	r3, r2
 800527c:	eb42 0303 	adc.w	r3, r2, r3
 8005280:	647b      	str	r3, [r7, #68]	@ 0x44
 8005282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800528a:	f7fa ffaf 	bl	80001ec <__aeabi_uldivmod>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4611      	mov	r1, r2
 8005294:	4b3b      	ldr	r3, [pc, #236]	@ (8005384 <UART_SetConfig+0x2d4>)
 8005296:	fba3 2301 	umull	r2, r3, r3, r1
 800529a:	095b      	lsrs	r3, r3, #5
 800529c:	2264      	movs	r2, #100	@ 0x64
 800529e:	fb02 f303 	mul.w	r3, r2, r3
 80052a2:	1acb      	subs	r3, r1, r3
 80052a4:	00db      	lsls	r3, r3, #3
 80052a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80052aa:	4b36      	ldr	r3, [pc, #216]	@ (8005384 <UART_SetConfig+0x2d4>)
 80052ac:	fba3 2302 	umull	r2, r3, r3, r2
 80052b0:	095b      	lsrs	r3, r3, #5
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80052b8:	441c      	add	r4, r3
 80052ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80052c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80052c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80052cc:	4642      	mov	r2, r8
 80052ce:	464b      	mov	r3, r9
 80052d0:	1891      	adds	r1, r2, r2
 80052d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80052d4:	415b      	adcs	r3, r3
 80052d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80052dc:	4641      	mov	r1, r8
 80052de:	1851      	adds	r1, r2, r1
 80052e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80052e2:	4649      	mov	r1, r9
 80052e4:	414b      	adcs	r3, r1
 80052e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80052f4:	4659      	mov	r1, fp
 80052f6:	00cb      	lsls	r3, r1, #3
 80052f8:	4651      	mov	r1, sl
 80052fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052fe:	4651      	mov	r1, sl
 8005300:	00ca      	lsls	r2, r1, #3
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	4603      	mov	r3, r0
 8005308:	4642      	mov	r2, r8
 800530a:	189b      	adds	r3, r3, r2
 800530c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005310:	464b      	mov	r3, r9
 8005312:	460a      	mov	r2, r1
 8005314:	eb42 0303 	adc.w	r3, r2, r3
 8005318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800532c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005330:	460b      	mov	r3, r1
 8005332:	18db      	adds	r3, r3, r3
 8005334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005336:	4613      	mov	r3, r2
 8005338:	eb42 0303 	adc.w	r3, r2, r3
 800533c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800533e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005346:	f7fa ff51 	bl	80001ec <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4b0d      	ldr	r3, [pc, #52]	@ (8005384 <UART_SetConfig+0x2d4>)
 8005350:	fba3 1302 	umull	r1, r3, r3, r2
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	2164      	movs	r1, #100	@ 0x64
 8005358:	fb01 f303 	mul.w	r3, r1, r3
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	3332      	adds	r3, #50	@ 0x32
 8005362:	4a08      	ldr	r2, [pc, #32]	@ (8005384 <UART_SetConfig+0x2d4>)
 8005364:	fba2 2303 	umull	r2, r3, r2, r3
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	f003 0207 	and.w	r2, r3, #7
 800536e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4422      	add	r2, r4
 8005376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005378:	e106      	b.n	8005588 <UART_SetConfig+0x4d8>
 800537a:	bf00      	nop
 800537c:	40011000 	.word	0x40011000
 8005380:	40011400 	.word	0x40011400
 8005384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538c:	2200      	movs	r2, #0
 800538e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800539a:	4642      	mov	r2, r8
 800539c:	464b      	mov	r3, r9
 800539e:	1891      	adds	r1, r2, r2
 80053a0:	6239      	str	r1, [r7, #32]
 80053a2:	415b      	adcs	r3, r3
 80053a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053aa:	4641      	mov	r1, r8
 80053ac:	1854      	adds	r4, r2, r1
 80053ae:	4649      	mov	r1, r9
 80053b0:	eb43 0501 	adc.w	r5, r3, r1
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	00eb      	lsls	r3, r5, #3
 80053be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053c2:	00e2      	lsls	r2, r4, #3
 80053c4:	4614      	mov	r4, r2
 80053c6:	461d      	mov	r5, r3
 80053c8:	4643      	mov	r3, r8
 80053ca:	18e3      	adds	r3, r4, r3
 80053cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053d0:	464b      	mov	r3, r9
 80053d2:	eb45 0303 	adc.w	r3, r5, r3
 80053d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80053e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053ea:	f04f 0200 	mov.w	r2, #0
 80053ee:	f04f 0300 	mov.w	r3, #0
 80053f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80053f6:	4629      	mov	r1, r5
 80053f8:	008b      	lsls	r3, r1, #2
 80053fa:	4621      	mov	r1, r4
 80053fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005400:	4621      	mov	r1, r4
 8005402:	008a      	lsls	r2, r1, #2
 8005404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005408:	f7fa fef0 	bl	80001ec <__aeabi_uldivmod>
 800540c:	4602      	mov	r2, r0
 800540e:	460b      	mov	r3, r1
 8005410:	4b60      	ldr	r3, [pc, #384]	@ (8005594 <UART_SetConfig+0x4e4>)
 8005412:	fba3 2302 	umull	r2, r3, r3, r2
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	011c      	lsls	r4, r3, #4
 800541a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800541e:	2200      	movs	r2, #0
 8005420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800542c:	4642      	mov	r2, r8
 800542e:	464b      	mov	r3, r9
 8005430:	1891      	adds	r1, r2, r2
 8005432:	61b9      	str	r1, [r7, #24]
 8005434:	415b      	adcs	r3, r3
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800543c:	4641      	mov	r1, r8
 800543e:	1851      	adds	r1, r2, r1
 8005440:	6139      	str	r1, [r7, #16]
 8005442:	4649      	mov	r1, r9
 8005444:	414b      	adcs	r3, r1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005454:	4659      	mov	r1, fp
 8005456:	00cb      	lsls	r3, r1, #3
 8005458:	4651      	mov	r1, sl
 800545a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800545e:	4651      	mov	r1, sl
 8005460:	00ca      	lsls	r2, r1, #3
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	4603      	mov	r3, r0
 8005468:	4642      	mov	r2, r8
 800546a:	189b      	adds	r3, r3, r2
 800546c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005470:	464b      	mov	r3, r9
 8005472:	460a      	mov	r2, r1
 8005474:	eb42 0303 	adc.w	r3, r2, r3
 8005478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 0300 	mov.w	r3, #0
 8005490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005494:	4649      	mov	r1, r9
 8005496:	008b      	lsls	r3, r1, #2
 8005498:	4641      	mov	r1, r8
 800549a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800549e:	4641      	mov	r1, r8
 80054a0:	008a      	lsls	r2, r1, #2
 80054a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80054a6:	f7fa fea1 	bl	80001ec <__aeabi_uldivmod>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	4b38      	ldr	r3, [pc, #224]	@ (8005594 <UART_SetConfig+0x4e4>)
 80054b2:	fba3 2301 	umull	r2, r3, r3, r1
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2264      	movs	r2, #100	@ 0x64
 80054ba:	fb02 f303 	mul.w	r3, r2, r3
 80054be:	1acb      	subs	r3, r1, r3
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	3332      	adds	r3, #50	@ 0x32
 80054c4:	4a33      	ldr	r2, [pc, #204]	@ (8005594 <UART_SetConfig+0x4e4>)
 80054c6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054d0:	441c      	add	r4, r3
 80054d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054d6:	2200      	movs	r2, #0
 80054d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80054da:	677a      	str	r2, [r7, #116]	@ 0x74
 80054dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	1891      	adds	r1, r2, r2
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	415b      	adcs	r3, r3
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054f0:	4641      	mov	r1, r8
 80054f2:	1851      	adds	r1, r2, r1
 80054f4:	6039      	str	r1, [r7, #0]
 80054f6:	4649      	mov	r1, r9
 80054f8:	414b      	adcs	r3, r1
 80054fa:	607b      	str	r3, [r7, #4]
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	f04f 0300 	mov.w	r3, #0
 8005504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005508:	4659      	mov	r1, fp
 800550a:	00cb      	lsls	r3, r1, #3
 800550c:	4651      	mov	r1, sl
 800550e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005512:	4651      	mov	r1, sl
 8005514:	00ca      	lsls	r2, r1, #3
 8005516:	4610      	mov	r0, r2
 8005518:	4619      	mov	r1, r3
 800551a:	4603      	mov	r3, r0
 800551c:	4642      	mov	r2, r8
 800551e:	189b      	adds	r3, r3, r2
 8005520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005522:	464b      	mov	r3, r9
 8005524:	460a      	mov	r2, r1
 8005526:	eb42 0303 	adc.w	r3, r2, r3
 800552a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	663b      	str	r3, [r7, #96]	@ 0x60
 8005536:	667a      	str	r2, [r7, #100]	@ 0x64
 8005538:	f04f 0200 	mov.w	r2, #0
 800553c:	f04f 0300 	mov.w	r3, #0
 8005540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005544:	4649      	mov	r1, r9
 8005546:	008b      	lsls	r3, r1, #2
 8005548:	4641      	mov	r1, r8
 800554a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800554e:	4641      	mov	r1, r8
 8005550:	008a      	lsls	r2, r1, #2
 8005552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005556:	f7fa fe49 	bl	80001ec <__aeabi_uldivmod>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4b0d      	ldr	r3, [pc, #52]	@ (8005594 <UART_SetConfig+0x4e4>)
 8005560:	fba3 1302 	umull	r1, r3, r3, r2
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	2164      	movs	r1, #100	@ 0x64
 8005568:	fb01 f303 	mul.w	r3, r1, r3
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	3332      	adds	r3, #50	@ 0x32
 8005572:	4a08      	ldr	r2, [pc, #32]	@ (8005594 <UART_SetConfig+0x4e4>)
 8005574:	fba2 2303 	umull	r2, r3, r2, r3
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	f003 020f 	and.w	r2, r3, #15
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4422      	add	r2, r4
 8005586:	609a      	str	r2, [r3, #8]
}
 8005588:	bf00      	nop
 800558a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800558e:	46bd      	mov	sp, r7
 8005590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005594:	51eb851f 	.word	0x51eb851f

08005598 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005598:	b084      	sub	sp, #16
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	f107 001c 	add.w	r0, r7, #28
 80055a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d123      	bne.n	80055fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80055c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d105      	bne.n	80055ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 faa0 	bl	8005b34 <USB_CoreReset>
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]
 80055f8:	e01b      	b.n	8005632 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fa94 	bl	8005b34 <USB_CoreReset>
 800560c:	4603      	mov	r3, r0
 800560e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005610:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005614:	2b00      	cmp	r3, #0
 8005616:	d106      	bne.n	8005626 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	639a      	str	r2, [r3, #56]	@ 0x38
 8005624:	e005      	b.n	8005632 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005632:	7fbb      	ldrb	r3, [r7, #30]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d10b      	bne.n	8005650 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f043 0206 	orr.w	r2, r3, #6
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f043 0220 	orr.w	r2, r3, #32
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005650:	7bfb      	ldrb	r3, [r7, #15]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800565c:	b004      	add	sp, #16
 800565e:	4770      	bx	lr

08005660 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f023 0201 	bic.w	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d115      	bne.n	80056d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056b0:	200a      	movs	r0, #10
 80056b2:	f7fc f939 	bl	8001928 <HAL_Delay>
      ms += 10U;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	330a      	adds	r3, #10
 80056ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fa2b 	bl	8005b18 <USB_GetMode>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d01e      	beq.n	8005706 <USB_SetCurrentMode+0x84>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80056cc:	d9f0      	bls.n	80056b0 <USB_SetCurrentMode+0x2e>
 80056ce:	e01a      	b.n	8005706 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056d0:	78fb      	ldrb	r3, [r7, #3]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d115      	bne.n	8005702 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056e2:	200a      	movs	r0, #10
 80056e4:	f7fc f920 	bl	8001928 <HAL_Delay>
      ms += 10U;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	330a      	adds	r3, #10
 80056ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fa12 	bl	8005b18 <USB_GetMode>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <USB_SetCurrentMode+0x84>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80056fe:	d9f0      	bls.n	80056e2 <USB_SetCurrentMode+0x60>
 8005700:	e001      	b.n	8005706 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e005      	b.n	8005712 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2bc8      	cmp	r3, #200	@ 0xc8
 800570a:	d101      	bne.n	8005710 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800571c:	b084      	sub	sp, #16
 800571e:	b580      	push	{r7, lr}
 8005720:	b086      	sub	sp, #24
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800572a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005736:	2300      	movs	r3, #0
 8005738:	613b      	str	r3, [r7, #16]
 800573a:	e009      	b.n	8005750 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	3340      	adds	r3, #64	@ 0x40
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	2200      	movs	r2, #0
 8005748:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	3301      	adds	r3, #1
 800574e:	613b      	str	r3, [r7, #16]
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0e      	cmp	r3, #14
 8005754:	d9f2      	bls.n	800573c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005756:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800575a:	2b00      	cmp	r3, #0
 800575c:	d11c      	bne.n	8005798 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800576c:	f043 0302 	orr.w	r3, r3, #2
 8005770:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005776:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005782:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	639a      	str	r2, [r3, #56]	@ 0x38
 8005796:	e00b      	b.n	80057b0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80057b6:	461a      	mov	r2, r3
 80057b8:	2300      	movs	r3, #0
 80057ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057bc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10d      	bne.n	80057e0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d104      	bne.n	80057d6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057cc:	2100      	movs	r1, #0
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f968 	bl	8005aa4 <USB_SetDevSpeed>
 80057d4:	e008      	b.n	80057e8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057d6:	2101      	movs	r1, #1
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f963 	bl	8005aa4 <USB_SetDevSpeed>
 80057de:	e003      	b.n	80057e8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057e0:	2103      	movs	r1, #3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f95e 	bl	8005aa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057e8:	2110      	movs	r1, #16
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f8fa 	bl	80059e4 <USB_FlushTxFifo>
 80057f0:	4603      	mov	r3, r0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d001      	beq.n	80057fa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f924 	bl	8005a48 <USB_FlushRxFifo>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005810:	461a      	mov	r2, r3
 8005812:	2300      	movs	r3, #0
 8005814:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581c:	461a      	mov	r2, r3
 800581e:	2300      	movs	r3, #0
 8005820:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005828:	461a      	mov	r2, r3
 800582a:	2300      	movs	r3, #0
 800582c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	613b      	str	r3, [r7, #16]
 8005832:	e043      	b.n	80058bc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005846:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800584a:	d118      	bne.n	800587e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10a      	bne.n	8005868 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800585e:	461a      	mov	r2, r3
 8005860:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	e013      	b.n	8005890 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005874:	461a      	mov	r2, r3
 8005876:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e008      	b.n	8005890 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800588a:	461a      	mov	r2, r3
 800588c:	2300      	movs	r3, #0
 800588e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589c:	461a      	mov	r2, r3
 800589e:	2300      	movs	r3, #0
 80058a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ae:	461a      	mov	r2, r3
 80058b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3301      	adds	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80058c0:	461a      	mov	r2, r3
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d3b5      	bcc.n	8005834 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058c8:	2300      	movs	r3, #0
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	e043      	b.n	8005956 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058e4:	d118      	bne.n	8005918 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d10a      	bne.n	8005902 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	015a      	lsls	r2, r3, #5
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4413      	add	r3, r2
 80058f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058f8:	461a      	mov	r2, r3
 80058fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80058fe:	6013      	str	r3, [r2, #0]
 8005900:	e013      	b.n	800592a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	015a      	lsls	r2, r3, #5
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	4413      	add	r3, r2
 800590a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800590e:	461a      	mov	r2, r3
 8005910:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005914:	6013      	str	r3, [r2, #0]
 8005916:	e008      	b.n	800592a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005924:	461a      	mov	r2, r3
 8005926:	2300      	movs	r3, #0
 8005928:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005936:	461a      	mov	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	015a      	lsls	r2, r3, #5
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4413      	add	r3, r2
 8005944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005948:	461a      	mov	r2, r3
 800594a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800594e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	3301      	adds	r3, #1
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800595a:	461a      	mov	r2, r3
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4293      	cmp	r3, r2
 8005960:	d3b5      	bcc.n	80058ce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005974:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005982:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005984:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	f043 0210 	orr.w	r2, r3, #16
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	699a      	ldr	r2, [r3, #24]
 800599c:	4b10      	ldr	r3, [pc, #64]	@ (80059e0 <USB_DevInit+0x2c4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f043 0208 	orr.w	r2, r3, #8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d107      	bne.n	80059d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059c8:	f043 0304 	orr.w	r3, r3, #4
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059dc:	b004      	add	sp, #16
 80059de:	4770      	bx	lr
 80059e0:	803c3800 	.word	0x803c3800

080059e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059fe:	d901      	bls.n	8005a04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e01b      	b.n	8005a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	daf2      	bge.n	80059f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	019b      	lsls	r3, r3, #6
 8005a14:	f043 0220 	orr.w	r2, r3, #32
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a28:	d901      	bls.n	8005a2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e006      	b.n	8005a3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d0f0      	beq.n	8005a1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3301      	adds	r3, #1
 8005a58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a60:	d901      	bls.n	8005a66 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e018      	b.n	8005a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	daf2      	bge.n	8005a54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2210      	movs	r2, #16
 8005a76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005a84:	d901      	bls.n	8005a8a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e006      	b.n	8005a98 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b10      	cmp	r3, #16
 8005a94:	d0f0      	beq.n	8005a78 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	68f9      	ldr	r1, [r7, #12]
 8005ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005af0:	f023 0303 	bic.w	r3, r3, #3
 8005af4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b04:	f043 0302 	orr.w	r3, r3, #2
 8005b08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	f003 0301 	and.w	r3, r3, #1
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b4c:	d901      	bls.n	8005b52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e01b      	b.n	8005b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	daf2      	bge.n	8005b40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f043 0201 	orr.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b76:	d901      	bls.n	8005b7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e006      	b.n	8005b8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d0f0      	beq.n	8005b6a <USB_CoreReset+0x36>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <memset>:
 8005b96:	4402      	add	r2, r0
 8005b98:	4603      	mov	r3, r0
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d100      	bne.n	8005ba0 <memset+0xa>
 8005b9e:	4770      	bx	lr
 8005ba0:	f803 1b01 	strb.w	r1, [r3], #1
 8005ba4:	e7f9      	b.n	8005b9a <memset+0x4>
	...

08005ba8 <__libc_init_array>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4d0d      	ldr	r5, [pc, #52]	@ (8005be0 <__libc_init_array+0x38>)
 8005bac:	4c0d      	ldr	r4, [pc, #52]	@ (8005be4 <__libc_init_array+0x3c>)
 8005bae:	1b64      	subs	r4, r4, r5
 8005bb0:	10a4      	asrs	r4, r4, #2
 8005bb2:	2600      	movs	r6, #0
 8005bb4:	42a6      	cmp	r6, r4
 8005bb6:	d109      	bne.n	8005bcc <__libc_init_array+0x24>
 8005bb8:	4d0b      	ldr	r5, [pc, #44]	@ (8005be8 <__libc_init_array+0x40>)
 8005bba:	4c0c      	ldr	r4, [pc, #48]	@ (8005bec <__libc_init_array+0x44>)
 8005bbc:	f000 f818 	bl	8005bf0 <_init>
 8005bc0:	1b64      	subs	r4, r4, r5
 8005bc2:	10a4      	asrs	r4, r4, #2
 8005bc4:	2600      	movs	r6, #0
 8005bc6:	42a6      	cmp	r6, r4
 8005bc8:	d105      	bne.n	8005bd6 <__libc_init_array+0x2e>
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
 8005bcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd0:	4798      	blx	r3
 8005bd2:	3601      	adds	r6, #1
 8005bd4:	e7ee      	b.n	8005bb4 <__libc_init_array+0xc>
 8005bd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bda:	4798      	blx	r3
 8005bdc:	3601      	adds	r6, #1
 8005bde:	e7f2      	b.n	8005bc6 <__libc_init_array+0x1e>
 8005be0:	08005c40 	.word	0x08005c40
 8005be4:	08005c40 	.word	0x08005c40
 8005be8:	08005c40 	.word	0x08005c40
 8005bec:	08005c44 	.word	0x08005c44

08005bf0 <_init>:
 8005bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bf2:	bf00      	nop
 8005bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bf6:	bc08      	pop	{r3}
 8005bf8:	469e      	mov	lr, r3
 8005bfa:	4770      	bx	lr

08005bfc <_fini>:
 8005bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfe:	bf00      	nop
 8005c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c02:	bc08      	pop	{r3}
 8005c04:	469e      	mov	lr, r3
 8005c06:	4770      	bx	lr
